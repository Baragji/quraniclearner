This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.repomix/
  bundles.json
.trae/
  rules/
    project_rules.md
  .ignore
app/
  admin/
    page.tsx
  advanced-progression/
    page.tsx
  ai-feedback/
    page.tsx
  alphabet/
    page.tsx
  auth/
    login/
      page.tsx
    register/
      page.tsx
  community/
    loading.tsx
    page.tsx
  grammar/
    page.tsx
  kurser/
    [kursusId]/
      [fagId]/
        [emneId]/
          page.tsx
  learn/
    vocabulary/
      page.tsx
  offline/
    error.tsx
    loading.tsx
    page.tsx
  performance/
    page.tsx
  practice/
    quiz/
      page.tsx
  profile/
    page.tsx
  pronunciation/
    page.tsx
  quiz/
    page.tsx
  quiz-system/
    page.tsx
  quran/
    advanced-study/
      loading.tsx
      page.tsx
    study/
      [surahId]/
        error.tsx
        loading.tsx
        page.tsx
    loading.tsx
    page.tsx
  settings/
    error.tsx
    loading.tsx
    page.tsx
  vocabulary/
    flashcards/
      page.tsx
  globals.css
  layout.tsx
  loading.tsx
  manifest.ts
  page.tsx
  sw.ts
apps/
  api/
    prisma/
      migrations/
        20250525050949_init_core_entities/
          migration.sql
        20250526015729_add_missing_modules/
          migration.sql
        migration_lock.toml
      schema.prisma
    src/
      modules/
        auth/
          controllers/
            auth/
              auth.controller.spec.ts
              auth.controller.ts
          dtos/
            create-auth.dto.ts
            login-auth.dto.ts
          services/
            auth/
              auth.service.spec.ts
              auth.service.ts
          auth.module.ts
        flashcard/
          flashcard.module.ts
        grammar/
          grammar.module.ts
        lesson/
          controllers/
            lesson/
              lesson.controller.spec.ts
              lesson.controller.ts
          dtos/
            create-lesson.dto/
              create-lesson.dto.ts
            update-lesson.dto/
              update-lesson.dto.ts
          services/
            lesson/
              lesson.service.spec.ts
              lesson.service.ts
          lesson.module.ts
        prisma/
          prisma.module.ts
          prisma.service.ts
        progress/
          progress.module.ts
        pronunciation/
          pronunciation.module.ts
        quiz/
          controllers/
            quiz/
              quiz.controller.spec.ts
              quiz.controller.ts
          dtos/
            create-quiz.dto.ts
            quiz.dtos.ts
            update-quiz.dto.ts
          services/
            quiz/
              quiz.service.spec.ts
              quiz.service.ts
          quiz.module.ts
        settings/
          controllers/
            settings.controller.spec.ts
            settings.controller.ts
          services/
            settings.service.spec.ts
            settings.service.ts
          settings.module.ts
        verse/
          controllers/
            verse/
              verse.controller.spec.ts
              verse.controller.ts
          dtos/
            create-verse.dto.ts
            update-verse.dto.ts
          services/
            verse/
              verse.service.spec.ts
              verse.service.ts
          verse.module.ts
        words/
          controllers/
            words/
              words.controller.spec.ts
              words.controller.ts
          dtos/
            create-word.dto.ts
            update-word.dto.ts
          services/
            words/
              words.service.spec.ts
              words.service.ts
          words.module.ts
        quiz.module.ts
      app.controller.spec.ts
      app.controller.ts
      app.module.ts
      app.service.ts
      main.ts
    test/
      app.e2e-spec.ts
      jest-e2e.json
    .gitignore
    .prettierrc
    eslint.config.mjs
    nest-cli.json
    package.json
    README.md
    tsconfig.build.json
    tsconfig.json
components/
  performance/
    code-splitting-example.tsx
    lazy-loaded-component.tsx
    optimized-image.tsx
    performance-metrics.tsx
    resource-monitor.tsx
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-mobile.tsx
    use-toast.ts
  admin-analytics-chart.tsx
  admin-error-heatmap.tsx
  ai-explain-overlay.tsx
  ai-insight-card.tsx
  command-menu.tsx
  comparative-study-section.test.tsx
  comparative-study-section.tsx
  course-card.tsx
  flashcard-stats.tsx
  glassmorphism-header.tsx
  level-progress-ring.tsx
  main-nav.tsx
  notification-popup.tsx
  progress-ring.tsx
  progress.tsx
  quran-word-analysis.tsx
  recent-activity-card.tsx
  tafsir-section.test.tsx
  tafsir-section.tsx
  thematic-exploration-section.test.tsx
  thematic-exploration-section.tsx
  theme-provider.tsx
  topic-discussion-thread.tsx
  user-nav.tsx
hooks/
  use-mobile.tsx
  use-performance.ts
  use-toast.ts
lib/
  offline-storage.ts
  performance-monitoring.ts
  utils.ts
public/
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.gitignore
api_udviklingsplan.md
components.json
guidelines.md
Integrationsstrategi.md
next.config.mjs
overblik.txt
package.json
pnpm-workspace.yaml
postcss.config.mjs
PROJEKT_ANALYSE.md
README.md
stackinfo.txt
Struktur.txt
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="apps/api/src/modules/settings/controllers/settings.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { SettingsController } from './settings.controller';

describe('SettingsController', () => {
  let controller: SettingsController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [SettingsController],
    }).compile();

    controller = module.get<SettingsController>(SettingsController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/settings/controllers/settings.controller.ts">
import { Controller } from '@nestjs/common';

@Controller('settings')
export class SettingsController {}
</file>

<file path="apps/api/src/modules/settings/services/settings.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { SettingsService } from './settings.service';

describe('SettingsService', () => {
  let service: SettingsService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [SettingsService],
    }).compile();

    service = module.get<SettingsService>(SettingsService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/settings/services/settings.service.ts">
import { Injectable } from '@nestjs/common';

@Injectable()
export class SettingsService {}
</file>

<file path=".repomix/bundles.json">
{
  "bundles": {}
}
</file>

<file path=".trae/rules/project_rules.md">
Project Rules for Quranic Arabic Trainer
1. Generelle Principper
- Altid følg teknologistakken defineret i `stackinfo.txt`:
- Frontend: Next.js, TypeScript, Tailwind CSS, shadcn/ui.
- Backend: NestJS, TypeScript, Prisma (med PostgreSQL som mål, pt. SQLite).
- Skriv ren, læselig og velorganiseret kode med meningsfulde navne.
- Følg DRY og KISS principperne.
- Brug kommentarer til kompleks logik; stræb efter selvforklarende kode.

2. TypeScript Best Practices
- Udnyt TypeScripts statiske typetjek fuldt ud. **Undgå `any` hvor det er muligt.** 
- Brug interfaces og typer til datastrukturer og kontrakter.

3. Sikkerhed
- Følg OWASP Top 10. [cite: 13]
- Valider og sanitiser al brugerinput (specielt i backend DTOs)
- Håndter følsomme data forsvarligt. Undgå hardkodede secrets.

4. Testning
- Skriv unit tests for kritiske funktioner og komponenter.
- Skriv integrationstests for API endpoints og for at sikre samspil mellem systemdele.
- **Testkrav for backend-moduler: Kritiske moduler skal sigte mod ≥ 80 % dækningsgrad.**

5. Frontend Specifik (`app/`, `components/`)
- Organiser komponenter logisk. Genbrug `shadcn/ui` komponenter.
- Følg etablerede stil- og designprincipper fra `shadcn/ui`.

6.  Backend Specifik (`apps/api/`)
- Organiser koden i moduler baseret på features/domæner.
- Brug DTOs med `class-validator` til validering af request/response payloads. [cite: 13]
- Dokumenter alle API endpoints med Swagger-dekorationer.

7. **Versionering:** Versionér denne fil sammen med koden (commit den til Git)
8.  **Synkronisering:** Sørg for at `guidelines.md` og `project_rules.md` holdes synkroniserede
</file>

<file path=".trae/.ignore">
.next/**` (Next.js build output) 
apps/api/dist/**` (NestJS buil
apps/api/gitignore` 
apps/api/.git/**` (Git-specifikke filer) 
public/**`  
node_modules/**`
*.sqlite`
.log` (Logfiler)
pnpm-lock.yaml` (Lock fil)
out/** (Next.js static export output)
build/** (General build output)
.env* (Environment variables)
.vercel/** (Vercel deployment files)
*.tsbuildinfo (TypeScript build cache)
Struktur.txt (Structure document)
overblik.txt (Overview document)
repomix-output.xml (Repomix output)
fejl.txt (Error log/notes - consider if needed for debugging context)
apps/api/generated/** (Auto-generated API client/files)
</file>

<file path="app/admin/page.tsx">
import { Download, FileText, Plus, Settings, Users } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { AdminAnalyticsChart } from "@/components/admin-analytics-chart"
import { AdminErrorHeatmap } from "@/components/admin-error-heatmap"

export default function AdminDashboard() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-950">
      <GlassmorphismHeader isAdmin />

      <main className="container pb-16 pt-24">
        <div className="mb-8 flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Admin Dashboard</h1>
            <p className="text-muted-foreground">Administrer indhold og overvåg platformens aktivitet</p>
          </div>
          <div className="flex gap-2">
            <Button variant="outline">
              <Download className="mr-2 h-4 w-4" />
              Eksportér Data
            </Button>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              Opret Nyt Kursus
            </Button>
          </div>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-base">Aktive Brugere</CardTitle>
              <CardDescription>Sidste 30 dage</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">1,248</div>
              <p className="text-sm text-green-600 dark:text-green-400">+12.5% fra sidste måned</p>
              <div className="mt-4 h-[80px]">
                <AdminAnalyticsChart type="line" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-base">Gennemførte Quizzer</CardTitle>
              <CardDescription>Sidste 30 dage</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">3,879</div>
              <p className="text-sm text-green-600 dark:text-green-400">+8.2% fra sidste måned</p>
              <div className="mt-4 h-[80px]">
                <AdminAnalyticsChart type="bar" />
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-base">Gennemsnitlig Quiz Score</CardTitle>
              <CardDescription>Sidste 30 dage</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold">76.4%</div>
              <p className="text-sm text-red-600 dark:text-red-400">-2.1% fra sidste måned</p>
              <div className="mt-4 h-[80px]">
                <AdminAnalyticsChart type="line" />
              </div>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="analytics" className="mt-8">
          <TabsList className="mb-4">
            <TabsTrigger value="analytics">Analytics</TabsTrigger>
            <TabsTrigger value="content">Indholdsadministration</TabsTrigger>
            <TabsTrigger value="users">Brugeradministration</TabsTrigger>
            <TabsTrigger value="ai">AI Konfiguration</TabsTrigger>
          </TabsList>
          <TabsContent value="analytics">
            <div className="grid gap-6 md:grid-cols-2">
              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle>Aktivitetsfordeling</CardTitle>
                  <CardDescription>Brugeraktivitet fordelt på kurser og emner</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[300px]">
                    <AdminAnalyticsChart type="bar" isLarge />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Populære Kurser</CardTitle>
                  <CardDescription>Baseret på brugeraktivitet</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {[
                      { name: "Dataanalyse med Python", users: 342, change: "+15%" },
                      { name: "Avanceret Frontend Udvikling", users: 287, change: "+8%" },
                      { name: "Machine Learning Grundkursus", users: 231, change: "+12%" },
                      { name: "Databaser og SQL", users: 189, change: "-3%" },
                      { name: "Cloud Computing Fundamentals", users: 156, change: "+5%" },
                    ].map((course, index) => (
                      <div key={index} className="flex items-center justify-between">
                        <div>
                          <div className="font-medium">{course.name}</div>
                          <div className="text-sm text-muted-foreground">{course.users} aktive brugere</div>
                        </div>
                        <Badge
                          variant="outline"
                          className={
                            course.change.startsWith("+")
                              ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                              : "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300"
                          }
                        >
                          {course.change}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Brugerengagement</CardTitle>
                  <CardDescription>Fordeling af aktivitetstyper</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[200px]">
                    <AdminAnalyticsChart type="pie" />
                  </div>
                  <div className="mt-4 space-y-2">
                    <div className="flex items-center gap-2 text-sm">
                      <div className="h-3 w-3 rounded-full bg-blue-500"></div>
                      <span>Quiz Besvarelser (45%)</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm">
                      <div className="h-3 w-3 rounded-full bg-green-500"></div>
                      <span>Indhold Læst (30%)</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm">
                      <div className="h-3 w-3 rounded-full bg-purple-500"></div>
                      <span>Diskussioner (15%)</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm">
                      <div className="h-3 w-3 rounded-full bg-amber-500"></div>
                      <span>Praktiske Opgaver (10%)</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle>Error Hotspot Heatmap</CardTitle>
                  <CardDescription>Områder hvor brugere ofte laver fejl i quizzer</CardDescription>
                </CardHeader>
                <CardContent>
                  <AdminErrorHeatmap />
                </CardContent>
                <CardFooter>
                  <Button variant="outline">Se Detaljeret Rapport</Button>
                </CardFooter>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="content">
            <Card>
              <CardHeader>
                <CardTitle>Indholdsadministration</CardTitle>
                <CardDescription>Administrer kurser, fag og emner</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between rounded-lg border p-4">
                    <div className="flex items-center gap-3">
                      <FileText className="h-8 w-8 text-blue-500" />
                      <div>
                        <div className="font-medium">Dataanalyse med Python</div>
                        <div className="text-sm text-muted-foreground">5 fag, 23 emner</div>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        Redigér
                      </Button>
                      <Button variant="outline" size="sm">
                        Vis
                      </Button>
                    </div>
                  </div>

                  <div className="flex items-center justify-between rounded-lg border p-4">
                    <div className="flex items-center gap-3">
                      <FileText className="h-8 w-8 text-purple-500" />
                      <div>
                        <div className="font-medium">Avanceret Frontend Udvikling</div>
                        <div className="text-sm text-muted-foreground">4 fag, 18 emner</div>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        Redigér
                      </Button>
                      <Button variant="outline" size="sm">
                        Vis
                      </Button>
                    </div>
                  </div>

                  <div className="flex items-center justify-between rounded-lg border p-4">
                    <div className="flex items-center gap-3">
                      <FileText className="h-8 w-8 text-green-500" />
                      <div>
                        <div className="font-medium">Machine Learning Grundkursus</div>
                        <div className="text-sm text-muted-foreground">3 fag, 15 emner</div>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        Redigér
                      </Button>
                      <Button variant="outline" size="sm">
                        Vis
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button>
                  <Plus className="mr-2 h-4 w-4" />
                  Opret Nyt Kursus
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="users">
            <Card>
              <CardHeader>
                <CardTitle>Brugeradministration</CardTitle>
                <CardDescription>Administrer brugere og rettigheder</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between rounded-lg border p-4">
                    <div className="flex items-center gap-3">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                        <span className="font-medium">MK</span>
                      </div>
                      <div>
                        <div className="font-medium">Mette Kristensen</div>
                        <div className="text-sm text-muted-foreground">mette.k@example.com</div>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Badge>Student</Badge>
                      <Button variant="outline" size="sm">
                        <Settings className="mr-2 h-4 w-4" />
                        Administrer
                      </Button>
                    </div>
                  </div>

                  <div className="flex items-center justify-between rounded-lg border p-4">
                    <div className="flex items-center gap-3">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300">
                        <span className="font-medium">AJ</span>
                      </div>
                      <div>
                        <div className="font-medium">Anders Jensen</div>
                        <div className="text-sm text-muted-foreground">anders.j@example.com</div>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Badge>Student</Badge>
                      <Button variant="outline" size="sm">
                        <Settings className="mr-2 h-4 w-4" />
                        Administrer
                      </Button>
                    </div>
                  </div>

                  <div className="flex items-center justify-between rounded-lg border p-4">
                    <div className="flex items-center gap-3">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                        <span className="font-medium">SP</span>
                      </div>
                      <div>
                        <div className="font-medium">Søren Pedersen</div>
                        <div className="text-sm text-muted-foreground">soren.p@example.com</div>
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <Badge className="bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                        Instruktør
                      </Badge>
                      <Button variant="outline" size="sm">
                        <Settings className="mr-2 h-4 w-4" />
                        Administrer
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button>
                  <Users className="mr-2 h-4 w-4" />
                  Administrer Brugere
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>

          <TabsContent value="ai">
            <Card>
              <CardHeader>
                <CardTitle>AI Konfiguration</CardTitle>
                <CardDescription>Konfigurer AI-assisteret læring og feedback</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="mb-2 text-lg font-medium">AI-assisteret Spørgsmålsgenerering</h3>
                    <div className="rounded-lg border p-4">
                      <div className="mb-4 flex items-center justify-between">
                        <div className="font-medium">Status</div>
                        <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                          Aktiv
                        </Badge>
                      </div>
                      <div className="mb-4">
                        <div className="mb-2 flex items-center justify-between text-sm">
                          <span>Kvalitet af genererede spørgsmål</span>
                          <span className="text-muted-foreground">85%</span>
                        </div>
                        <Progress value={85} />
                      </div>
                      <div className="flex justify-end">
                        <Button variant="outline" size="sm">
                          Konfigurer
                        </Button>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="mb-2 text-lg font-medium">AI Study Companion</h3>
                    <div className="rounded-lg border p-4">
                      <div className="mb-4 flex items-center justify-between">
                        <div className="font-medium">Status</div>
                        <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                          Aktiv
                        </Badge>
                      </div>
                      <div className="mb-4">
                        <div className="mb-2 flex items-center justify-between text-sm">
                          <span>Brugerengagement</span>
                          <span className="text-muted-foreground">72%</span>
                        </div>
                        <Progress value={72} />
                      </div>
                      <div className="flex justify-end">
                        <Button variant="outline" size="sm">
                          Konfigurer
                        </Button>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="mb-2 text-lg font-medium">Adaptive Quizzer</h3>
                    <div className="rounded-lg border p-4">
                      <div className="mb-4 flex items-center justify-between">
                        <div className="font-medium">Status</div>
                        <Badge className="bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-300">
                          Test
                        </Badge>
                      </div>
                      <div className="mb-4">
                        <div className="mb-2 flex items-center justify-between text-sm">
                          <span>Effektivitet af adaptiv algoritme</span>
                          <span className="text-muted-foreground">68%</span>
                        </div>
                        <Progress value={68} />
                      </div>
                      <div className="flex justify-end">
                        <Button variant="outline" size="sm">
                          Konfigurer
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button>
                  <Settings className="mr-2 h-4 w-4" />
                  Avancerede AI Indstillinger
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  )
}
</file>

<file path="app/advanced-progression/page.tsx">
"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import {
  BarChart,
  BookOpen,
  Award,
  Star,
  Target,
  TrendingUp,
  Calendar,
  Clock,
  BarChart3,
  Sparkles,
  AlertCircle,
  Volume,
  Layers,
  CheckCircle,
} from "lucide-react"
import { LevelProgressRing } from "@/components/level-progress-ring"
import { ProgressRing } from "@/components/progress-ring"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"

// Mock data for user progress
const mockUserProgress = {
  level: 12,
  levelProgress: 65,
  totalXP: 24680,
  streak: 42,
  hoursStudied: 120,
  completedLessons: 78,
  masteredWords: 520,
  skillBreakdown: {
    vocabulary: 85,
    grammar: 72,
    pronunciation: 68,
    reading: 77,
    writing: 64,
    listening: 70,
  },
  recentActivity: [
    { date: "2024-05-19", xp: 120, type: "Vocabulary Practice", accuracy: 90 },
    { date: "2024-05-18", xp: 85, type: "Grammar Quiz", accuracy: 75 },
    { date: "2024-05-17", xp: 150, type: "Quran Reading", accuracy: 85 },
    { date: "2024-05-16", xp: 65, type: "Pronunciation Session", accuracy: 70 },
    { date: "2024-05-15", xp: 110, type: "Flashcard Review", accuracy: 95 },
  ],
  weeklyXP: {
    Mandag: 250,
    Tirsdag: 350,
    Onsdag: 200,
    Torsdag: 300,
    Fredag: 400,
    Lørdag: 150,
    Søndag: 320,
  },
  achievements: [
    { name: "7-dages Streak", icon: "Calendar", earned: true, description: "Lær i 7 dage i træk" },
    { name: "Ordmester", icon: "BookOpen", earned: true, description: "Lær 500 nye ord" },
    {
      name: "Grammatikekspert",
      icon: "Award",
      earned: false,
      description: "Opnå 90% nøjagtighed i 10 grammatikquizzer",
    },
    { name: "Surah Fuldførelse", icon: "Star", earned: true, description: "Læs og oversæt en hel surah" },
    { name: "Udtaleperfektionist", icon: "Volume", earned: false, description: "Opnå perfekt score i 5 udtaleøvelser" },
  ],
}

// Mock data for learning path
const mockLearningPath = {
  currentFocus: "Intermediate Grammar",
  recommendedNext: [
    {
      title: "Verbale Former",
      difficulty: "Medium",
      type: "Grammar",
      estimated: "45 min",
      reasons: ["Baseret på din grammatikscore", "Næste logiske skridt i curriculum"],
    },
    {
      title: "Hverdagsudtryk",
      difficulty: "Easy",
      type: "Vocabulary",
      estimated: "30 min",
      reasons: ["Forbedrer konversationelle færdigheder", "Høj anvendelsesfrekvens"],
    },
    {
      title: "Surah Al-Fatiha Analyse",
      difficulty: "Hard",
      type: "Quran Study",
      estimated: "60 min",
      reasons: ["Bygger på tidligere Quran-studier", "Høj relevans for læringsmål"],
    },
  ],
  customizedPath: {
    shortTerm: [
      { week: 1, focus: "Verbale Former & Basale Samtaleudtryk", hours: 5 },
      { week: 2, focus: "Quran Analyse & Lytteøvelser", hours: 5 },
      { week: 3, focus: "Idiomatiske Udtryk & Tekstlæsning", hours: 5 },
    ],
    longTerm: [
      {
        month: 1,
        goal: "Beherskelse af grundlæggende samtale",
        milestones: ["500 ord", "10 samtaleemner", "Grundlæggende grammatiske strukturer"],
      },
      {
        month: 3,
        goal: "Læs korte arabiske tekster",
        milestones: ["1000 ord", "Intermediær grammatik", "Basale læseteknikker"],
      },
      {
        month: 6,
        goal: "Forstå simple Quran-passager",
        milestones: ["Quranisk ordforråd", "Grundlæggende tafsir", "Morfologisk analyse"],
      },
    ],
  },
  adaptiveRecommendations: {
    strengths: ["Vocabulary Retention", "Pattern Recognition", "Reading Comprehension"],
    weaknesses: ["Pronunciation of Gutturals", "Complex Grammar Structures", "Listening Comprehension"],
    recommendedFocus: [
      "Daily pronunciation practice",
      "Grammar drills focusing on verbal forms",
      "Listening exercises with native speakers",
    ],
  },
}

// Mock data for learning goals
const mockLearningGoals = {
  active: [
    { title: "Lær 200 nye ord", progress: 85, deadline: "1. juni 2024", type: "Vocabulary" },
    { title: "Fuldfør 'Verbernes Verden' Kursus", progress: 60, deadline: "15. juni 2024", type: "Grammar" },
    { title: "Læs og oversæt Surah Al-Mulk", progress: 30, deadline: "30. juni 2024", type: "Quran Study" },
  ],
  completed: [
    { title: "Lær det arabiske alfabet", progress: 100, completedDate: "10. januar 2024", type: "Fundamentals" },
    { title: "Gennemfør begynderkursus", progress: 100, completedDate: "5. marts 2024", type: "Course" },
    { title: "Memorisér 100 almindelige ord", progress: 100, completedDate: "20. april 2024", type: "Vocabulary" },
  ],
  suggested: [
    {
      title: "Træn konversation med native speakers",
      type: "Speaking",
      difficulty: "Medium",
      estimatedTime: "8 uger (2 timer/uge)",
    },
    {
      title: "Mestre arabiske diftoner",
      type: "Pronunciation",
      difficulty: "Hard",
      estimatedTime: "4 uger (20 min/dag)",
    },
    {
      title: "Studér klassisk arabisk poesi",
      type: "Literature",
      difficulty: "Expert",
      estimatedTime: "12 uger (3 timer/uge)",
    },
  ],
}

export default function AdvancedProgression() {
  const [activeTab, setActiveTab] = useState("insights")

  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title="Avanceret Progression"
        description="Få detaljeret indsigt i din læringsfremgang, personlige anbefalinger og adaptive læringssti"
        imageUrl="/placeholder.svg?height=100&width=100"
      />

      <Tabs defaultValue="insights" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-3 mb-8">
          <TabsTrigger value="insights" className="flex items-center gap-2">
            <BarChart className="h-4 w-4" />
            <span>Indsigter &amp; Analyse</span>
          </TabsTrigger>
          <TabsTrigger value="learning-path" className="flex items-center gap-2">
            <TrendingUp className="h-4 w-4" />
            <span>Læringssti</span>
          </TabsTrigger>
          <TabsTrigger value="goals" className="flex items-center gap-2">
            <Target className="h-4 w-4" />
            <span>Mål &amp; Milepæle</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="insights" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card className="md:col-span-1">
              <CardHeader className="pb-2">
                <CardTitle>Din Niveau</CardTitle>
                <CardDescription>Din aktuelle progression</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-center pt-4">
                <LevelProgressRing level={mockUserProgress.level} progress={mockUserProgress.levelProgress} />
                <div className="mt-6 text-center">
                  <div className="flex items-center justify-center gap-2 mb-2">
                    <Star className="h-5 w-5 text-yellow-500" />
                    <span className="text-lg font-semibold">{mockUserProgress.totalXP} XP i alt</span>
                  </div>
                  <div className="grid grid-cols-2 gap-4 mt-4">
                    <div className="flex flex-col items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                      <Calendar className="h-5 w-5 text-blue-500 mb-1" />
                      <span className="text-lg font-bold">{mockUserProgress.streak}</span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">Dages streak</span>
                    </div>
                    <div className="flex flex-col items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                      <Clock className="h-5 w-5 text-green-500 mb-1" />
                      <span className="text-lg font-bold">{mockUserProgress.hoursStudied}</span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">Timer studeret</span>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4 mt-4">
                    <div className="flex flex-col items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                      <BookOpen className="h-5 w-5 text-purple-500 mb-1" />
                      <span className="text-lg font-bold">{mockUserProgress.completedLessons}</span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">Lektioner</span>
                    </div>
                    <div className="flex flex-col items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
                      <Award className="h-5 w-5 text-amber-500 mb-1" />
                      <span className="text-lg font-bold">{mockUserProgress.masteredWords}</span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">Mestrede ord</span>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Færdighedsopdeling</CardTitle>
                <CardDescription>Din præstation på tværs af færdighedsområder</CardDescription>
              </CardHeader>
              <CardContent className="pt-4">
                <div className="grid grid-cols-2 sm:grid-cols-3 gap-4">
                  {Object.entries(mockUserProgress.skillBreakdown).map(([skill, score]) => (
                    <div key={skill} className="flex flex-col items-center">
                      <ProgressRing progress={score} size={80}>
                        <div className="flex flex-col items-center justify-center text-center">
                          <span className="text-lg font-bold">{score}%</span>
                        </div>
                      </ProgressRing>
                      <span className="mt-2 capitalize">{skill}</span>
                    </div>
                  ))}
                </div>
              </CardContent>
              <CardFooter className="pt-0">
                <Button variant="outline" className="w-full">
                  Se Detaljeret Analyse
                </Button>
              </CardFooter>
            </Card>

            <Card className="md:col-span-3">
              <CardHeader>
                <CardTitle>Ugentlig XP</CardTitle>
                <CardDescription>Din læringsaktivitet gennem ugen</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] flex items-end justify-between gap-2">
                  {Object.entries(mockUserProgress.weeklyXP).map(([day, xp]) => {
                    const heightPercentage = (xp / 400) * 100
                    return (
                      <div key={day} className="flex flex-col items-center flex-1">
                        <div
                          className="w-full bg-purple-500 dark:bg-purple-600 rounded-t-md"
                          style={{ height: `${heightPercentage}%` }}
                        ></div>
                        <div className="mt-2 text-xs text-center">
                          <div>{day.substring(0, 3)}</div>
                          <div className="font-semibold">{xp} XP</div>
                        </div>
                      </div>
                    )
                  })}
                </div>
              </CardContent>
            </Card>

            <Card className="md:col-span-2">
              <CardHeader>
                <CardTitle>Seneste Aktivitet</CardTitle>
                <CardDescription>Dine seneste læringsaktiviteter</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {mockUserProgress.recentActivity.map((activity, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <div className="p-2 rounded-full bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-300">
                          {activity.type.includes("Vocabulary") && <BookOpen className="h-5 w-5" />}
                          {activity.type.includes("Grammar") && <BarChart3 className="h-5 w-5" />}
                          {activity.type.includes("Quran") && <BookOpen className="h-5 w-5" />}
                          {activity.type.includes("Pronunciation") && <Volume className="h-5 w-5" />}
                          {activity.type.includes("Flashcard") && <Layers className="h-5 w-5" />}
                        </div>
                        <div>
                          <div className="font-medium">{activity.type}</div>
                          <div className="text-xs text-gray-500 dark:text-gray-400">{activity.date}</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={activity.accuracy >= 90 ? "default" : "secondary"}>
                          {activity.accuracy}% præcision
                        </Badge>
                        <div className="font-semibold text-purple-600 dark:text-purple-400">+{activity.xp} XP</div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full">
                  Se Komplet Historie
                </Button>
              </CardFooter>
            </Card>

            <Card className="md:col-span-1">
              <CardHeader>
                <CardTitle>Præstationer</CardTitle>
                <CardDescription>Din indsats belønnes</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {mockUserProgress.achievements.map((achievement, index) => (
                    <div
                      key={index}
                      className={`flex items-center p-3 rounded-lg ${
                        achievement.earned
                          ? "bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-900/50"
                          : "bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700"
                      }`}
                    >
                      <div
                        className={`p-2 rounded-full ${
                          achievement.earned
                            ? "bg-green-500 text-white"
                            : "bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-300"
                        } mr-3`}
                      >
                        {achievement.icon === "Calendar" && <Calendar className="h-4 w-4" />}
                        {achievement.icon === "BookOpen" && <BookOpen className="h-4 w-4" />}
                        {achievement.icon === "Award" && <Award className="h-4 w-4" />}
                        {achievement.icon === "Star" && <Star className="h-4 w-4" />}
                        {achievement.icon === "Volume" && <Volume className="h-4 w-4" />}
                      </div>
                      <div>
                        <div className="font-medium">{achievement.name}</div>
                        <div className="text-xs">{achievement.description}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full">
                  Se Alle Præstationer
                </Button>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="learning-path" className="mt-0">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>Anbefalede Næste Skridt</CardTitle>
                <CardDescription>Baseret på din performance og læringsmål</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <Alert>
                  <Sparkles className="h-4 w-4 text-blue-500" />
                  <AlertTitle>Nuværende Fokus: {mockLearningPath.currentFocus}</AlertTitle>
                  <AlertDescription>
                    Dit AI-personlige kurrikulum er tilpasset for at maksimere din læring baseret på dine fremskridt og
                    mål.
                  </AlertDescription>
                </Alert>

                <div className="space-y-4">
                  {mockLearningPath.recommendedNext.map((item, index) => (
                    <Card key={index}>
                      <CardContent className="p-4 flex flex-col sm:flex-row gap-4 sm:items-center sm:justify-between">
                        <div className="space-y-2">
                          <div className="flex items-center gap-2">
                            <h4 className="font-semibold text-lg">{item.title}</h4>
                            <Badge
                              variant={
                                item.difficulty === "Easy"
                                  ? "outline"
                                  : item.difficulty === "Medium"
                                    ? "secondary"
                                    : "destructive"
                              }
                            >
                              {item.difficulty}
                            </Badge>
                          </div>
                          <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
                            <span>{item.type}</span>
                            <span>•</span>
                            <span>{item.estimated}</span>
                          </div>
                          <div className="pt-2">
                            <div className="text-sm font-medium">Anbefalet fordi:</div>
                            <ul className="list-disc list-inside text-sm text-gray-600 dark:text-gray-400">
                              {item.reasons.map((reason, i) => (
                                <li key={i}>{reason}</li>
                              ))}
                            </ul>
                          </div>
                        </div>
                        <Button>Start Nu</Button>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle>AI-adaptiv Feedback</CardTitle>
                <CardDescription>Personaliseret feedback på din læringsstil</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <h4 className="font-medium text-green-600 dark:text-green-400 mb-2">Dine Styrker</h4>
                  <ul className="list-disc list-inside space-y-1 text-sm">
                    {mockLearningPath.adaptiveRecommendations.strengths.map((strength, index) => (
                      <li key={index}>{strength}</li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h4 className="font-medium text-amber-600 dark:text-amber-400 mb-2">Områder til Forbedring</h4>
                  <ul className="list-disc list-inside space-y-1 text-sm">
                    {mockLearningPath.adaptiveRecommendations.weaknesses.map((weakness, index) => (
                      <li key={index}>{weakness}</li>
                    ))}
                  </ul>
                </div>

                <div>
                  <h4 className="font-medium text-blue-600 dark:text-blue-400 mb-2">Anbefalet Fokus</h4>
                  <ul className="list-disc list-inside space-y-1 text-sm">
                    {mockLearningPath.adaptiveRecommendations.recommendedFocus.map((focus, index) => (
                      <li key={index}>{focus}</li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>

            <Card className="lg:col-span-3">
              <CardHeader>
                <CardTitle>Din Personlige Læringssti</CardTitle>
                <CardDescription>Skræddersyet curriculum baseret på dine mål</CardDescription>
              </CardHeader>
              <CardContent className="space-y-8">
                <div>
                  <h3 className="text-lg font-semibold mb-4">Kortsigtet Plan (Næste 3 Uger)</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {mockLearningPath.customizedPath.shortTerm.map((item, index) => (
                      <Card key={index}>
                        <CardContent className="p-4">
                          <div className="text-center">
                            <div className="bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 text-sm font-medium py-1 px-2 rounded mb-2">
                              Uge {item.week}
                            </div>
                            <h4 className="font-medium">{item.focus}</h4>
                            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
                              Anbefalet: ~{item.hours} timer
                            </p>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold mb-4">Langsigtet Plan (6 Måneder)</h3>
                  <div className="space-y-6">
                    {mockLearningPath.customizedPath.longTerm.map((item, index) => (
                      <div key={index} className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg">
                        <div className="flex items-center justify-between mb-3">
                          <div className="bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 text-sm font-medium py-1 px-3 rounded">
                            Måned {item.month}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">Projekteret Milestone</div>
                        </div>
                        <h4 className="text-lg font-semibold mb-2">{item.goal}</h4>
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 mt-4">
                          {item.milestones.map((milestone, idx) => (
                            <div
                              key={idx}
                              className="bg-blue-50 dark:bg-blue-900/20 border border-blue-100 dark:border-blue-900/50 p-2 rounded text-center text-sm"
                            >
                              {milestone}
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button className="w-full">Tilpas Min Læringssti</Button>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="goals" className="mt-0">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>Aktive Mål</CardTitle>
                <CardDescription>Dine nuværende læringsmål</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {mockLearningGoals.active.map((goal, index) => (
                  <Card key={index}>
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h4 className="font-semibold">{goal.title}</h4>
                          <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 mt-1">
                            <Badge variant="outline">{goal.type}</Badge>
                            <span>Deadline: {goal.deadline}</span>
                          </div>
                        </div>
                        <Button variant="ghost" size="sm" className="h-8">
                          Rediger
                        </Button>
                      </div>
                      <div className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span>Fremskridt</span>
                          <span className="font-medium">{goal.progress}%</span>
                        </div>
                        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                          <div className="bg-green-500 h-2.5 rounded-full" style={{ width: `${goal.progress}%` }}></div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}

                <Button className="w-full">Tilføj Nyt Mål</Button>
              </CardContent>
            </Card>

            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle>Fuldførte Mål</CardTitle>
                <CardDescription>Mål du har opnået</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {mockLearningGoals.completed.map((goal, index) => (
                  <div
                    key={index}
                    className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-900/50 rounded-lg p-3"
                  >
                    <div className="flex items-start gap-2">
                      <CheckCircle className="h-5 w-5 text-green-600 dark:text-green-400 mt-0.5" />
                      <div>
                        <h4 className="font-medium">{goal.title}</h4>
                        <div className="flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400 mt-1">
                          <Badge variant="outline" className="bg-transparent">
                            {goal.type}
                          </Badge>
                          <span>Afsluttet: {goal.completedDate}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}

                <Button variant="outline" className="w-full">
                  Se Alle Fuldførte Mål
                </Button>
              </CardContent>
            </Card>

            <Card className="lg:col-span-3">
              <CardHeader>
                <CardTitle>Foreslåede Mål</CardTitle>
                <CardDescription>Baseret på din fremgang og interesse</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {mockLearningGoals.suggested.map((goal, index) => (
                    <Card key={index}>
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between mb-3">
                          <Badge
                            variant={
                              goal.difficulty === "Easy"
                                ? "outline"
                                : goal.difficulty === "Medium"
                                  ? "secondary"
                                  : goal.difficulty === "Hard"
                                    ? "destructive"
                                    : "default"
                            }
                          >
                            {goal.difficulty}
                          </Badge>
                          <Badge variant="outline">{goal.type}</Badge>
                        </div>
                        <h4 className="font-semibold text-lg mb-2">{goal.title}</h4>
                        <p className="text-sm text-gray-500 dark:text-gray-400 mb-4">{goal.estimatedTime}</p>
                        <Button size="sm" className="w-full">
                          Tilføj Dette Mål
                        </Button>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
              <CardFooter>
                <Alert variant="destructive" className="w-full">
                  <AlertCircle className="h-4 w-4" />
                  <AlertTitle>Vigtigt at bemærke</AlertTitle>
                  <AlertDescription>
                    Sæt realistiske mål og tidsrammer. Det er bedre at opnå mindre mål konsekvent end at sætte for
                    ambitiøse mål, der kan føre til demotivation.
                  </AlertDescription>
                </Alert>
              </CardFooter>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="app/ai-feedback/page.tsx">
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Textarea } from "@/components/ui/textarea"
import { Mic, Play, Square, Volume2, BookOpen, RefreshCw, AlertCircle, CheckCircle, Info } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { AIExplainOverlay } from "@/components/ai-explain-overlay"

// Mock data for pronunciation feedback
const mockPronunciationFeedback = {
  overallScore: 78,
  feedback:
    "Din udtale er generelt god, men der er nogle områder, der kan forbedres. Fokuser på at udtale de gutturale lyde mere distinkt og arbejd på din intonation.",
  detailedFeedback: [
    {
      word: "الرَّحْمَنِ",
      score: 65,
      issues: ["Gutturale lyde kunne være mere distinkte", "Intonation kunne forbedres"],
      correctAudioUrl: "/placeholder-audio.mp3",
    },
    {
      word: "الرَّحِيمِ",
      score: 85,
      issues: ["Let forbedring af længden på lange vokaler"],
      correctAudioUrl: "/placeholder-audio.mp3",
    },
    {
      word: "مَالِكِ",
      score: 90,
      issues: [],
      correctAudioUrl: "/placeholder-audio.mp3",
    },
    {
      word: "يَوْمِ",
      score: 75,
      issues: ["Diftong kunne være tydeligere"],
      correctAudioUrl: "/placeholder-audio.mp3",
    },
    {
      word: "الدِّينِ",
      score: 75,
      issues: ["Emfatisk 'd' kunne være stærkere"],
      correctAudioUrl: "/placeholder-audio.mp3",
    },
  ],
}

// Mock data for grammar feedback
const mockGrammarFeedback = {
  overallScore: 82,
  feedback:
    "Din grammatiske forståelse er god. Du har en solid forståelse af grundlæggende strukturer, men kan forbedre din brug af kasus-endelser og verbale former.",
  detailedFeedback: [
    {
      sentence: "ذَهَبْتُ إِلَى المَدْرَسَةِ",
      translation: "Jeg gik til skolen",
      score: 95,
      correct: true,
      explanation: "Korrekt brug af perfektum verbum og præposition",
    },
    {
      sentence: "الكِتَابُ عَلَى الطَاوِلَةِ",
      translation: "Bogen er på bordet",
      score: 90,
      correct: true,
      explanation: "Korrekt nominativ kasus for subjekt",
    },
    {
      sentence: "أَكَلْتُ الطَعَامَ اللَذِيذَ",
      translation: "Jeg spiste den lækre mad",
      score: 70,
      correct: false,
      explanation: "Adjektivet skal matche substantivet i bestemthed: الطَعَامَ اللَذِيذَ",
      correction: "أَكَلْتُ الطَعَامَ اللَذِيذَ",
    },
    {
      sentence: "هُوَ يَذْهَبُ إِلَى المَسْجِدِ",
      translation: "Han går til moskeen",
      score: 85,
      correct: true,
      explanation: "Korrekt brug af præsens verbum",
    },
  ],
}

// Mock data for translation feedback
const mockTranslationFeedback = {
  overallScore: 75,
  feedback:
    "Din oversættelse fanger den grundlæggende betydning, men der er plads til forbedring i præcision og nuancer. Fokuser på at forstå konteksten og kulturelle referencer.",
  detailedFeedback: [
    {
      original: "بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ",
      userTranslation: "I Guds, Den Nådiges, Den Barmhjertiges navn",
      correctTranslation: "I Allahs, Den Barmhjertiges, Den Nådiges navn",
      score: 85,
      feedback: "God oversættelse, men rækkefølgen af attributterne er byttet om",
    },
    {
      original: "الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ",
      userTranslation: "Tak til Gud, verdens herre",
      correctTranslation: "Al lovprisning tilkommer Allah, alle verdeners Herre",
      score: 70,
      feedback: "Oversættelsen mangler dybde og præcision. 'Al-hamd' er mere omfattende end blot 'tak'",
    },
    {
      original: "إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ",
      userTranslation: "Dig alene tilbeder vi, og dig alene beder vi om hjælp",
      correctTranslation: "Dig alene tilbeder vi, og Dig alene beder vi om hjælp",
      score: 95,
      feedback: "Excellent oversættelse, der fanger både betydning og emfase",
    },
  ],
}

export default function AIFeedback() {
  const [activeTab, setActiveTab] = useState("pronunciation")
  const [isRecording, setIsRecording] = useState(false)
  const [recordedAudio, setRecordedAudio] = useState<string | null>(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [showFeedback, setShowFeedback] = useState(false)
  const [grammarInput, setGrammarInput] = useState("")
  const [translationInput, setTranslationInput] = useState("")
  const [translationOriginal, setTranslationOriginal] = useState(
    "بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ\nالْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ\nإِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ",
  )
  const [showAIExplain, setShowAIExplain] = useState(false)
  const [currentExplanation, setCurrentExplanation] = useState({ title: "", content: "" })
  const [processingFeedback, setProcessingFeedback] = useState(false)

  const audioRef = useRef<HTMLAudioElement | null>(null)
  const mediaRecorderRef = useRef<MediaRecorder | null>(null)
  const audioChunksRef = useRef<Blob[]>([])

  // Simulate recording functionality
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      mediaRecorderRef.current = new MediaRecorder(stream)

      mediaRecorderRef.current.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data)
        }
      }

      mediaRecorderRef.current.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: "audio/wav" })
        const audioUrl = URL.createObjectURL(audioBlob)
        setRecordedAudio(audioUrl)
        audioChunksRef.current = []
      }

      audioChunksRef.current = []
      mediaRecorderRef.current.start()
      setIsRecording(true)
    } catch (error) {
      console.error("Error accessing microphone:", error)
      // In a real app, show a user-friendly error message
    }
  }

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop()
      setIsRecording(false)

      // Simulate a delay for processing
      setProcessingFeedback(true)
      setTimeout(() => {
        setProcessingFeedback(false)
        setShowFeedback(true)
      }, 1500)
    }
  }

  const playAudio = (url: string) => {
    if (audioRef.current) {
      audioRef.current.src = url
      audioRef.current.play()
      setIsPlaying(true)
    }
  }

  const stopAudio = () => {
    if (audioRef.current) {
      audioRef.current.pause()
      audioRef.current.currentTime = 0
      setIsPlaying(false)
    }
  }

  const handleGrammarInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setGrammarInput(e.target.value)
  }

  const handleTranslationInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setTranslationInput(e.target.value)
  }

  const submitGrammarForFeedback = () => {
    // In a real app, this would send the text to an AI for analysis
    setProcessingFeedback(true)
    setTimeout(() => {
      setProcessingFeedback(false)
      setShowFeedback(true)
    }, 1500)
  }

  const submitTranslationForFeedback = () => {
    // In a real app, this would send the translation to an AI for analysis
    setProcessingFeedback(true)
    setTimeout(() => {
      setProcessingFeedback(false)
      setShowFeedback(true)
    }, 1500)
  }

  const resetFeedback = () => {
    setShowFeedback(false)
    setRecordedAudio(null)
    setGrammarInput("")
    setTranslationInput("")
  }

  const showExplanation = (title: string, content: string) => {
    setCurrentExplanation({ title, content })
    setShowAIExplain(true)
  }

  const closeExplanation = () => {
    setShowAIExplain(false)
  }

  // Reset feedback when changing tabs
  useEffect(() => {
    setShowFeedback(false)
    setRecordedAudio(null)
    setProcessingFeedback(false)
    stopAudio()
  }, [activeTab])

  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title="AI Feedback"
        description="Få personlig feedback på din udtale, grammatik og oversættelse"
        imageUrl="/placeholder.svg?height=100&width=100"
      />

      <audio ref={audioRef} onEnded={() => setIsPlaying(false)} className="hidden" />

      {showAIExplain && (
        <AIExplainOverlay
          title={currentExplanation.title}
          content={currentExplanation.content}
          onClose={closeExplanation}
        />
      )}

      <Tabs defaultValue="pronunciation" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-3 mb-8">
          <TabsTrigger value="pronunciation" className="flex items-center gap-2">
            <Volume2 className="h-4 w-4" />
            <span>Udtale</span>
          </TabsTrigger>
          <TabsTrigger value="grammar" className="flex items-center gap-2">
            <BookOpen className="h-4 w-4" />
            <span>Grammatik</span>
          </TabsTrigger>
          <TabsTrigger value="translation" className="flex items-center gap-2">
            <BookOpen className="h-4 w-4" />
            <span>Oversættelse</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="pronunciation" className="mt-0">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>Udtaleøvelse</CardTitle>
                <CardDescription>Optag din udtale for at få AI-feedback</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {!showFeedback ? (
                  <>
                    <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg">
                      <h3 className="text-lg font-semibold mb-4 text-center">Læs følgende passage højt:</h3>
                      <p className="text-2xl text-center leading-relaxed" dir="rtl" lang="ar">
                        بِسْمِ اللَّهِ الرَّحْمَنِ الرَّحِيمِ
                        <br />
                        الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ
                        <br />
                        الرَّحْمَنِ الرَّحِيمِ
                        <br />
                        مَالِكِ يَوْمِ الدِّينِ
                      </p>
                    </div>

                    <div className="flex justify-center">
                      {recordedAudio ? (
                        <div className="flex space-x-4">
                          <Button
                            variant={isPlaying ? "destructive" : "default"}
                            size="lg"
                            onClick={isPlaying ? stopAudio : () => playAudio(recordedAudio)}
                            className="flex items-center gap-2"
                          >
                            {isPlaying ? <Square className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                            {isPlaying ? "Stop" : "Afspil Optagelse"}
                          </Button>
                          <Button variant="outline" size="lg" onClick={() => setRecordedAudio(null)}>
                            Optag Igen
                          </Button>
                          <Button
                            size="lg"
                            onClick={() => {
                              setProcessingFeedback(true)
                              setTimeout(() => {
                                setProcessingFeedback(false)
                                setShowFeedback(true)
                              }, 1500)
                            }}
                          >
                            Få Feedback
                          </Button>
                        </div>
                      ) : (
                        <Button
                          variant={isRecording ? "destructive" : "default"}
                          size="lg"
                          onClick={isRecording ? stopRecording : startRecording}
                          className="flex items-center gap-2"
                        >
                          <Mic className="h-4 w-4" />
                          {isRecording ? "Stop Optagelse" : "Start Optagelse"}
                        </Button>
                      )}
                    </div>
                  </>
                ) : (
                  <div className="space-y-6">
                    <div className="flex justify-between items-center">
                      <h3 className="text-xl font-semibold">Din Udtale Feedback</h3>
                      <Button variant="outline" size="sm" onClick={resetFeedback}>
                        <RefreshCw className="h-4 w-4 mr-1" />
                        Prøv Igen
                      </Button>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg">
                      <div className="flex justify-between items-center mb-4">
                        <span className="text-lg font-medium">Samlet Score</span>
                        <div className="flex items-center">
                          <span className="text-2xl font-bold mr-2">{mockPronunciationFeedback.overallScore}%</span>
                          <Badge
                            variant={
                              mockPronunciationFeedback.overallScore >= 80
                                ? "default"
                                : mockPronunciationFeedback.overallScore >= 60
                                  ? "secondary"
                                  : "destructive"
                            }
                          >
                            {mockPronunciationFeedback.overallScore >= 80
                              ? "God"
                              : mockPronunciationFeedback.overallScore >= 60
                                ? "Forbedring Nødvendig"
                                : "Behøver Øvelse"}
                          </Badge>
                        </div>
                      </div>
                      <Progress value={mockPronunciationFeedback.overallScore} className="h-2 mb-4" />
                      <p className="text-gray-700 dark:text-gray-300">{mockPronunciationFeedback.feedback}</p>
                    </div>

                    <div className="space-y-4">
                      <h4 className="font-semibold">Detaljeret Feedback</h4>

                      {mockPronunciationFeedback.detailedFeedback.map((item, index) => (
                        <Card key={index}>
                          <CardContent className="p-4">
                            <div className="flex justify-between items-center mb-2">
                              <div className="flex items-center">
                                <span className="text-xl font-semibold mr-2" dir="rtl" lang="ar">
                                  {item.word}
                                </span>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  className="h-8 w-8 p-0"
                                  onClick={() => playAudio(item.correctAudioUrl)}
                                >
                                  <Volume2 className="h-4 w-4" />
                                </Button>
                              </div>
                              <Badge
                                variant={item.score >= 80 ? "default" : item.score >= 60 ? "secondary" : "destructive"}
                              >
                                {item.score}%
                              </Badge>
                            </div>

                            {item.issues.length > 0 ? (
                              <div className="space-y-1 mt-2">
                                {item.issues.map((issue, i) => (
                                  <div key={i} className="flex items-start text-sm text-gray-600 dark:text-gray-400">
                                    <AlertCircle className="h-4 w-4 mr-1 mt-0.5 text-amber-500" />
                                    {issue}
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <div className="flex items-start text-sm text-green-600 dark:text-green-400 mt-2">
                                <CheckCircle className="h-4 w-4 mr-1 mt-0.5" />
                                Udtalen er god
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}

                {processingFeedback && (
                  <div className="p-8 flex flex-col items-center justify-center">
                    <div className="animate-pulse flex flex-col items-center space-y-4">
                      <div className="w-12 h-12 rounded-full bg-purple-400"></div>
                      <div className="h-2 w-48 bg-purple-200 rounded"></div>
                      <div className="h-2 w-40 bg-purple-200 rounded"></div>
                    </div>
                    <p className="mt-4 text-center text-gray-600 dark:text-gray-400">Analyserer din udtale...</p>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle>Tips til Forbedring</CardTitle>
                <CardDescription>Lær hvordan du kan forbedre din udtale</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Gutturale Lyde i Arabisk",
                      "Gutturale lyde er konsanter, der udtales i halsen. I arabisk inkluderer disse lyde: ح (ha), خ (kha), ع (ayn), غ (ghayn), ق (qaf). Disse lyde findes ikke i mange vestlige sprog, så de kræver særlig opmærksomhed. Prøv at lytte til indfødte talere og øv dig i at imitere disse lyde.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Forståelse af Gutturale Lyde</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Håndtering af Arabisk Intonation",
                      "Intonation refererer til tonefaldet og rytmen i sproget. I arabisk er intonation vigtig for at formidle betydning og følelser. Bemærk hvordan tonehøjden ændrer sig i forskellige typer sætninger (spørgsmål, udsagn, komandoer). Lyt til koranrecitationer for at fornemme den korrekte rytme og intonation.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Håndtering af Intonation</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Lange og Korte Vokaler",
                      "Arabisk skelner mellem lange og korte vokaler. Korte vokaler er ofte repræsenteret ved diakritiske tegn (fatha, kasra, damma), mens lange vokaler bruger disse tegn sammen med 'alif', 'ya' eller 'waw'. Det er vigtigt at udtale lange vokaler omkring dobbelt så lang tid som korte vokaler for at sikre korrekt udtale og betydning.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Lange og Korte Vokaler</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Emfatiske Konsonanter",
                      "Arabisk har flere emfatiske konsonanter, som udtales med mere kraft og en dybere resonans. Disse inkluderer ص (sad), ض (dad), ط (ta), ظ (zha). For at udtale disse korrekt, prøv at 'forstørre' mundhulen ved at sænke underkæben og trække tungen lidt tilbage.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Emfatiske Konsonanter</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Øvelsestekniker",
                      "Regelmæssig øvelse er nøglen til at forbedre din udtale. Prøv at optage dig selv og sammenligne med indfødte talere. Gentag vanskelige ord og lyde flere gange. Deltag i konversationsgrupper, hvor du kan øve og få feedback. Lyt aktivt til arabiske medier, koranrecitationer eller podcasts for at træne dit øre.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Øvelsestekniker</span>
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="grammar" className="mt-0">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>Grammatikanalyse</CardTitle>
                <CardDescription>Indtast arabiske sætninger for at få grammatisk feedback</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {!showFeedback ? (
                  <>
                    <div className="space-y-4">
                      <Textarea
                        dir="rtl"
                        lang="ar"
                        placeholder="Indtast arabiske sætninger her..."
                        className="min-h-[150px] text-lg"
                        value={grammarInput}
                        onChange={handleGrammarInputChange}
                      />

                      <Alert>
                        <Info className="h-4 w-4" />
                        <AlertTitle>Eksempel</AlertTitle>
                        <AlertDescription>
                          Du kan indtaste sætninger som:
                          <div dir="rtl" lang="ar" className="mt-2">
                            ذَهَبْتُ إِلَى المَدْرَسَةِ
                            <br />
                            الكِتَابُ عَلَى الطَاوِلَةِ
                            <br />
                            أَكَلْتُ الطَعَامَ اللَذِيذَ
                          </div>
                        </AlertDescription>
                      </Alert>

                      <div className="flex justify-center">
                        <Button size="lg" onClick={submitGrammarForFeedback} disabled={!grammarInput.trim()}>
                          Få Grammatisk Feedback
                        </Button>
                      </div>
                    </div>
                  </>
                ) : (
                  <div className="space-y-6">
                    <div className="flex justify-between items-center">
                      <h3 className="text-xl font-semibold">Din Grammatiske Feedback</h3>
                      <Button variant="outline" size="sm" onClick={resetFeedback}>
                        <RefreshCw className="h-4 w-4 mr-1" />
                        Prøv Igen
                      </Button>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg">
                      <div className="flex justify-between items-center mb-4">
                        <span className="text-lg font-medium">Samlet Score</span>
                        <div className="flex items-center">
                          <span className="text-2xl font-bold mr-2">{mockGrammarFeedback.overallScore}%</span>
                          <Badge
                            variant={
                              mockGrammarFeedback.overallScore >= 80
                                ? "default"
                                : mockGrammarFeedback.overallScore >= 60
                                  ? "secondary"
                                  : "destructive"
                            }
                          >
                            {mockGrammarFeedback.overallScore >= 80
                              ? "God"
                              : mockGrammarFeedback.overallScore >= 60
                                ? "Forbedring Nødvendig"
                                : "Behøver Øvelse"}
                          </Badge>
                        </div>
                      </div>
                      <Progress value={mockGrammarFeedback.overallScore} className="h-2 mb-4" />
                      <p className="text-gray-700 dark:text-gray-300">{mockGrammarFeedback.feedback}</p>
                    </div>

                    <div className="space-y-4">
                      <h4 className="font-semibold">Detaljeret Feedback</h4>

                      {mockGrammarFeedback.detailedFeedback.map((item, index) => (
                        <Card key={index}>
                          <CardContent className="p-4">
                            <div className="flex justify-between items-center mb-2">
                              <span className="text-xl font-semibold" dir="rtl" lang="ar">
                                {item.sentence}
                              </span>
                              <Badge variant={item.correct ? "default" : "destructive"}>{item.score}%</Badge>
                            </div>

                            <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">{item.translation}</div>

                            {item.correct ? (
                              <div className="flex items-center text-green-600 dark:text-green-400 text-sm">
                                <CheckCircle className="h-4 w-4 mr-1" />
                                {item.explanation}
                              </div>
                            ) : (
                              <div className="space-y-2">
                                <div className="flex items-center text-amber-600 dark:text-amber-400 text-sm">
                                  <AlertCircle className="h-4 w-4 mr-1" />
                                  {item.explanation}
                                </div>
                                {item.correction && (
                                  <div className="mt-2 p-2 bg-green-50 dark:bg-green-900/20 rounded border border-green-200 dark:border-green-900/50">
                                    <div className="text-xs text-green-700 dark:text-green-400 mb-1">Korrekt Form:</div>
                                    <div dir="rtl" lang="ar" className="text-green-800 dark:text-green-300 font-medium">
                                      {item.correction}
                                    </div>
                                  </div>
                                )}
                              </div>
                            )}
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}

                {processingFeedback && (
                  <div className="p-8 flex flex-col items-center justify-center">
                    <div className="animate-pulse flex flex-col items-center space-y-4">
                      <div className="w-12 h-12 rounded-full bg-purple-400"></div>
                      <div className="h-2 w-48 bg-purple-200 rounded"></div>
                      <div className="h-2 w-40 bg-purple-200 rounded"></div>
                    </div>
                    <p className="mt-4 text-center text-gray-600 dark:text-gray-400">Analyserer grammatikken...</p>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle>Grammatiske Koncepter</CardTitle>
                <CardDescription>Forstå nøglekoncepter i arabisk grammatik</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Kasus i Arabisk",
                      "Arabisk har tre kasus: nominativ (marfu - مَرْفُوع), akkusativ (mansub - مَنْصُوب) og genitiv (majrur - مَجْرُور). Nominativ bruges typisk til subjekter, akkusativ til objekter, og genitiv bruges efter præpositioner og i genitiv-konstruktioner. Hvert kasus har sine egne endelser, der varierer afhængigt af substantivets bestemthed og tal.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Kasus-system</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Verbale Former i Arabisk",
                      "Arabiske verber har forskellige former baseret på tid (perfektum/præteritum, imperfektum/præsens) og aspekt. Derudover bruger arabisk forskellige mønstre (awzan - أَوْزَان) til at danne afledte verbformer, der tilføjer forskellige betydninger til grundverbet, såsom kausativ, refleksiv, passiv, osv.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Verbale Former</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Kongruens i Arabisk",
                      "Kongruens er overensstemmelsen mellem forskellige grammatiske elementer, såsom adjektiver og substantiver. I arabisk skal adjektiver matche deres substantiv i køn, tal, kasus og bestemthed. Dette er meget vigtigt for at skabe korrekte sætninger.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Kongruens</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Idafa-konstruktion",
                      "Idafa (إِضَافَة) er en genitiv-konstruktion i arabisk, der bruges til at udtrykke besiddelse eller tilhørsforhold. Det svarer til den danske konstruktion med 'af' eller genitiv-s. I en idafa-konstruktion er det første substantiv altid ubestemt (uden 'al-'), mens det andet kan være enten bestemt eller ubestemt.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Idafa-konstruktion</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Sætningsstruktur i Arabisk",
                      "Arabisk har to hovedtyper af sætninger: verbale sætninger (بُدْءٌ بِالْفِعْل), der starter med et verbum, og nominale sætninger (بُدْءٌ بِالِاسْم), der starter med et substantiv eller pronomen. Den grundlæggende ordstilling i verbale sætninger er VSO (verbum-subjekt-objekt), mens nominale sætninger typisk følger en subjekt-prædikat struktur.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Sætningsstruktur</span>
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="translation" className="mt-0">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <Card className="lg:col-span-2">
              <CardHeader>
                <CardTitle>Oversættelsesøvelse</CardTitle>
                <CardDescription>Oversæt arabisk tekst for at få feedback</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {!showFeedback ? (
                  <>
                    <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg">
                      <h3 className="text-lg font-semibold mb-4">Originaltekst:</h3>
                      <p className="text-xl text-center leading-relaxed" dir="rtl" lang="ar">
                        {translationOriginal.split("\n").map((line, i) => (
                          <span key={i}>
                            {line}
                            <br />
                          </span>
                        ))}
                      </p>
                    </div>

                    <div className="space-y-4">
                      <Textarea
                        placeholder="Indtast din oversættelse her..."
                        className="min-h-[150px]"
                        value={translationInput}
                        onChange={handleTranslationInputChange}
                      />

                      <div className="flex justify-center">
                        <Button size="lg" onClick={submitTranslationForFeedback} disabled={!translationInput.trim()}>
                          Få Oversættelsesfeedback
                        </Button>
                      </div>
                    </div>
                  </>
                ) : (
                  <div className="space-y-6">
                    <div className="flex justify-between items-center">
                      <h3 className="text-xl font-semibold">Din Oversættelsesfeedback</h3>
                      <Button variant="outline" size="sm" onClick={resetFeedback}>
                        <RefreshCw className="h-4 w-4 mr-1" />
                        Prøv Igen
                      </Button>
                    </div>

                    <div className="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg">
                      <div className="flex justify-between items-center mb-4">
                        <span className="text-lg font-medium">Samlet Score</span>
                        <div className="flex items-center">
                          <span className="text-2xl font-bold mr-2">{mockTranslationFeedback.overallScore}%</span>
                          <Badge
                            variant={
                              mockTranslationFeedback.overallScore >= 80
                                ? "default"
                                : mockTranslationFeedback.overallScore >= 60
                                  ? "secondary"
                                  : "destructive"
                            }
                          >
                            {mockTranslationFeedback.overallScore >= 80
                              ? "God"
                              : mockTranslationFeedback.overallScore >= 60
                                ? "Forbedring Nødvendig"
                                : "Behøver Øvelse"}
                          </Badge>
                        </div>
                      </div>
                      <Progress value={mockTranslationFeedback.overallScore} className="h-2 mb-4" />
                      <p className="text-gray-700 dark:text-gray-300">{mockTranslationFeedback.feedback}</p>
                    </div>

                    <div className="space-y-4">
                      <h4 className="font-semibold">Detaljeret Feedback</h4>

                      {mockTranslationFeedback.detailedFeedback.map((item, index) => (
                        <Card key={index}>
                          <CardContent className="p-4">
                            <div className="grid grid-cols-1 gap-3">
                              <div>
                                <div className="text-xs text-gray-500 dark:text-gray-400 mb-1">Original:</div>
                                <p className="text-lg" dir="rtl" lang="ar">
                                  {item.original}
                                </p>
                              </div>

                              <div>
                                <div className="text-xs text-gray-500 dark:text-gray-400 mb-1">Din oversættelse:</div>
                                <p
                                  className={`text-lg ${item.score >= 80 ? "text-green-600 dark:text-green-400" : "text-amber-600 dark:text-amber-400"}`}
                                >
                                  {item.userTranslation}
                                </p>
                              </div>

                              <div>
                                <div className="text-xs text-gray-500 dark:text-gray-400 mb-1">
                                  Korrekt oversættelse:
                                </div>
                                <p className="text-lg text-green-700 dark:text-green-400">{item.correctTranslation}</p>
                              </div>

                              <div className="pt-2 border-t border-gray-200 dark:border-gray-700">
                                <div className="flex items-start gap-2">
                                  <Badge
                                    variant={
                                      item.score >= 80 ? "default" : item.score >= 60 ? "secondary" : "destructive"
                                    }
                                    className="mt-0.5"
                                  >
                                    {item.score}%
                                  </Badge>
                                  <span className="text-gray-700 dark:text-gray-300">{item.feedback}</span>
                                </div>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}

                {processingFeedback && (
                  <div className="p-8 flex flex-col items-center justify-center">
                    <div className="animate-pulse flex flex-col items-center space-y-4">
                      <div className="w-12 h-12 rounded-full bg-purple-400"></div>
                      <div className="h-2 w-48 bg-purple-200 rounded"></div>
                      <div className="h-2 w-40 bg-purple-200 rounded"></div>
                    </div>
                    <p className="mt-4 text-center text-gray-600 dark:text-gray-400">Analyserer din oversættelse...</p>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card className="lg:col-span-1">
              <CardHeader>
                <CardTitle>Oversættelsestips</CardTitle>
                <CardDescription>Forbedre dine arabiske oversættelser</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Kulturel Kontekst",
                      "Arabisk er dybt forbundet med islamisk kultur og historie. Mange begreber, især i religiøse tekster, har kulturelle og historiske konnotationer, der ikke let kan oversættes direkte. For eksempel har ord som 'taqwa' (تقوى) mange nuancer, der omfatter gudfrygtighed, bevidsthed om Gud, fromhed og andet. Det er vigtigt at forstå den kulturelle kontekst for at lave præcise oversættelser.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Kulturel Kontekst</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Ordforråd og Synonymer",
                      "Arabisk har et rigt ordforråd med mange synonymer, der har subtile betydningsforskelle. For eksempel er der mange forskellige ord for 'kærlighed', hver med sine egne konnotationer og anvendelseskontekster. At kende disse nuancer er afgørende for præcis oversættelse. Brug ordbøger, der inkluderer eksempler og kontekstuelle anvendelser for at vælge det rigtige ord.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Ordforråd og Synonymer</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Idiomatiske Udtryk",
                      "Arabisk har mange idiomatiske udtryk og talemåder, der ikke giver mening, når de oversættes ord for ord. For eksempel betyder udtrykket 'عَلَى عَيْنِي' (på mit øje) egentlig 'med glæde' eller 'det er min ære'. Lær at genkende disse udtryk og find de tilsvarende udtryk på dit eget sprog i stedet for at oversætte dem direkte.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Idiomatiske Udtryk</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Grammatiske Strukturer",
                      "Arabisk har grammatiske strukturer, der ikke findes på samme måde i andre sprog. For eksempel bruger arabisk ofte verbale sætninger, hvor dansk og andre europæiske sprog ville bruge nominale sætninger. Også, arabisk bruger ofte den 'og'-lignende konjunktion 'wa' (و) langt oftere end dansk. Ved oversættelse bør du være opmærksom på disse strukturelle forskelle og tilpasse din oversættelse til målsprogets naturlige stil.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Grammatiske Strukturer</span>
                </Button>

                <Button
                  variant="outline"
                  className="w-full justify-start text-left"
                  onClick={() =>
                    showExplanation(
                      "Oversættelsesstrategier",
                      "Der er forskellige tilgange til oversættelse: Nogle foretrækker at være så tæt på originalen som muligt (formel ækvivalens), mens andre prioriterer at gengive den samme effekt på læseren (dynamisk ækvivalens). For Quran og religiøse tekster er præcision vigtigt, men også klarhed og forståelighed. Overvej din målgruppe og formålet med oversættelsen, når du vælger din strategi.",
                    )
                  }
                >
                  <Info className="h-4 w-4 mr-2" />
                  <span>Oversættelsesstrategier</span>
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="app/alphabet/page.tsx">
"use client";

import Link from "next/link";
import { ArrowLeft, BookOpen, Check, Play, Volume2, ChevronRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { GlassmorphismHeader } from "@/components/glassmorphism-header";
import { useState, useEffect } from "react";
import { calculatePercentage } from "@/lib/utils"; // Importer funktionen her

// Mock data for bogstaver - skal erstattes med reel datahentning
const alphabetData = [
  { id: "alif", letter: "ا", name: "Alif", transliteration: "a/ā", learned: true, audioSrc: "/audio/letters/alif.mp3" },
  { id: "ba", letter: "ب", name: "Ba", transliteration: "b", learned: true, audioSrc: "/audio/letters/ba.mp3" },
  { id: "ta", letter: "ت", name: "Ta", transliteration: "t", learned: true, audioSrc: "/audio/letters/ta.mp3" },
  { id: "tha", letter: "ث", name: "Tha", transliteration: "th", learned: true, audioSrc: "/audio/letters/tha.mp3" },
  { id: "jim", letter: "ج", name: "Jim", transliteration: "j", learned: false, audioSrc: "/audio/letters/jim.mp3" },
  { id: "ha", letter: "ح", name: "Ḥa", transliteration: "ḥ", learned: false, audioSrc: "/audio/letters/ha.mp3" },
  { id: "kha", letter: "خ", name: "Kha", transliteration: "kh", learned: false, audioSrc: "/audio/letters/kha.mp3" },
  { id: "dal", letter: "د", name: "Dal", transliteration: "d", learned: false, audioSrc: "/audio/letters/dal.mp3" },
  { id: "dhal", letter: "ذ", name: "Dhal", transliteration: "dh", learned: false, audioSrc: "/audio/letters/dhal.mp3" },
  { id: "ra", letter: "ر", name: "Ra", transliteration: "r", learned: false, audioSrc: "/audio/letters/ra.mp3" },
  { id: "zay", letter: "ز", name: "Zay", transliteration: "z", learned: false, audioSrc: "/audio/letters/zay.mp3" },
  { id: "sin", letter: "س", name: "Sin", transliteration: "s", learned: false, audioSrc: "/audio/letters/sin.mp3" },
  { id: "shin", letter: "ش", name: "Shin", transliteration: "sh", learned: false, audioSrc: "/audio/letters/shin.mp3" },
  { id: "sad", letter: "ص", name: "Ṣad", transliteration: "ṣ", learned: false, audioSrc: "/audio/letters/sad.mp3" },
  { id: "dad", letter: "ض", name: "Ḍad", transliteration: "ḍ", learned: false, audioSrc: "/audio/letters/dad.mp3" },
  { id: "tah", letter: "ط", name: "Ṭa", transliteration: "ṭ", learned: false, audioSrc: "/audio/letters/tah.mp3" },
  { id: "zah", letter: "ظ", name: "Ẓa", transliteration: "ẓ", learned: false, audioSrc: "/audio/letters/zah.mp3" },
  { id: "ayn", letter: "ع", name: "ʿAyn", transliteration: "ʿ", learned: false, audioSrc: "/audio/letters/ayn.mp3" },
  { id: "ghayn", letter: "غ", name: "Ghayn", transliteration: "gh", learned: false, audioSrc: "/audio/letters/ghayn.mp3" },
  { id: "fa", letter: "ف", name: "Fa", transliteration: "f", learned: false, audioSrc: "/audio/letters/fa.mp3" },
  { id: "qaf", letter: "ق", name: "Qaf", transliteration: "q", learned: false, audioSrc: "/audio/letters/qaf.mp3" },
  { id: "kaf", letter: "ك", name: "Kaf", transliteration: "k", learned: false, audioSrc: "/audio/letters/kaf.mp3" },
  { id: "lam", letter: "ل", name: "Lam", transliteration: "l", learned: false, audioSrc: "/audio/letters/lam.mp3" },
  { id: "mim", letter: "م", name: "Mim", transliteration: "m", learned: false, audioSrc: "/audio/letters/mim.mp3" },
  { id: "nun", letter: "ن", name: "Nun", transliteration: "n", learned: false, audioSrc: "/audio/letters/nun.mp3" },
  { id: "ha-h", letter: "ه", name: "Ha'", transliteration: "h", learned: false, audioSrc: "/audio/letters/ha-h.mp3" },
  { id: "waw", letter: "و", name: "Waw", transliteration: "w/ū", learned: false, audioSrc: "/audio/letters/waw.mp3" },
  { id: "ya", letter: "ي", name: "Ya", transliteration: "y/ī", learned: false, audioSrc: "/audio/letters/ya.mp3" },
];

// const calculatePercentage = (current: number, total: number) => { // FJERN DENNE LOKALE DEFINITION
//   if (total === 0) return 0;
//   return Math.round((current / total) * 100);
// };

const getNextLetterToLearn = (currentAlphabetData: typeof alphabetData) => {
    return currentAlphabetData.find(l => !l.learned) || currentAlphabetData[0];
};

const getLetterForms = (letterObj: typeof alphabetData[0]) => {
    if (!letterObj) return { isolated: '', initial: '', medial: '', final: '' };
    const baseLetter = letterObj.letter;
    return {
        isolated: baseLetter,
        initial: baseLetter + (baseLetter !== 'ا' && baseLetter !== 'د' && baseLetter !== 'ذ' && baseLetter !== 'ر' && baseLetter !== 'ز' && baseLetter !== 'و' ? "ـ" : ""),
        medial: (baseLetter !== 'ا' && baseLetter !== 'د' && baseLetter !== 'ذ' && baseLetter !== 'ر' && baseLetter !== 'ز' && baseLetter !== 'و' ? "ـ" : "") + baseLetter + (baseLetter !== 'ا' && baseLetter !== 'د' && baseLetter !== 'ذ' && baseLetter !== 'ر' && baseLetter !== 'ز' && baseLetter !== 'و' ? "ـ" : ""),
        final: (baseLetter !== 'ا' && baseLetter !== 'د' && baseLetter !== 'ذ' && baseLetter !== 'ر' && baseLetter !== 'ز' && baseLetter !== 'و' ? "ـ" : "") + baseLetter,
    };
};

const exampleWordsData: { [key: string]: { word: string; transliteration: string; meaning: string; audioSrc: string }[] } = {
    alif: [{ word: "أَسَد", transliteration: "asad", meaning: "løve", audioSrc: "/audio/words/asad.mp3" }],
    ba: [{ word: "بَيْت", transliteration: "bayt", meaning: "hus", audioSrc: "/audio/words/bayt.mp3" }],
    shin: [
        { word: "شَمْس", transliteration: "shams", meaning: "sol", audioSrc: "/audio/words/shams.mp3" },
        { word: "شُكْرًا", transliteration: "shukran", meaning: "tak", audioSrc: "/audio/words/shukran.mp3" },
        { word: "مَشَى", transliteration: "mashā", meaning: "at gå", audioSrc: "/audio/words/masha.mp3" },
    ],
};

const practiceExercises = [
  { id: "listening", title: "Lytteøvelse", description: "Lyt til udtalen og vælg det korrekte bogstav.", href: "/practice/alphabet/listening" },
  { id: "writing", title: "Skriveøvelse", description: "Øv dig i at skrive arabiske bogstaver med vejledning.", href: "/practice/alphabet/writing" },
  { id: "matching", title: "Matchning", description: "Match arabiske bogstaver med deres latinske ækvivalenter.", href: "/practice/alphabet/matching" },
];

export default function AlphabetPage() {
  const [userAlphabetData, setUserAlphabetData] = useState(alphabetData);
  const [audioPlayer, setAudioPlayer] = useState<HTMLAudioElement | null>(null);

  useEffect(() => {
    const player = new Audio();
    setAudioPlayer(player);
    return () => {
      if (player) {
        player.pause();
        player.src = '';
      }
    };
  }, []);

  const playSound = (audioSrc: string | undefined) => {
    if (audioPlayer && audioSrc) {
      audioPlayer.src = audioSrc;
      audioPlayer.play().catch(error => console.error("Fejl ved afspilning af lyd:", error));
    } else {
      console.warn("Lydkilde mangler eller afspiller er ikke klar.");
    }
  };

  const learnedLetters = userAlphabetData.filter(l => l.learned);
  const remainingLetters = userAlphabetData.filter(l => !l.learned);
  const progress = calculatePercentage(learnedLetters.length, userAlphabetData.length);
  const nextLetterToLearn = getNextLetterToLearn(userAlphabetData);
  const currentLetterForms = getLetterForms(nextLetterToLearn);
  const currentExampleWords = exampleWordsData[nextLetterToLearn?.id || ''] || [];

  const handleMarkAsLearned = (letterId: string) => {
    setUserAlphabetData(prevData =>
      prevData.map(l => (l.id === letterId ? { ...l, learned: !l.learned } : l))
    );
  };

  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <GlassmorphismHeader />
      <main className="container flex-1 py-24">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2 text-muted-foreground hover:text-foreground">
            <Link href="/">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Dashboard
            </Link>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">الأبجدية العربية / Det Arabiske Alfabet</h1>
          <p className="text-muted-foreground">Lær de 28 bogstaver i det arabiske alfabet og deres udtale</p>
        </div>
        <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex-1">
            <div className="mb-2 flex items-center justify-between text-sm">
              <span>Fremskridt</span>
              <span className="text-muted-foreground">{learnedLetters.length} af {userAlphabetData.length} bogstaver ({progress}%)</span>
            </div>
            <Progress value={progress} className="h-2 bg-primary/20" />
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" disabled={learnedLetters.length === 0}>
              <Play className="mr-2 h-4 w-4" />
              Gennemgå Lærte Bogstaver
            </Button>
            {nextLetterToLearn && (
              <Button size="sm" asChild disabled={remainingLetters.length === 0}>
                <Link href={`/alphabet/learn/${nextLetterToLearn.id}`}>
                  <Play className="mr-2 h-4 w-4" />
                  Fortsæt Læring
                </Link>
              </Button>
            )}
          </div>
        </div>
        <Tabs defaultValue="all" className="mb-8">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="all">Alle Bogstaver</TabsTrigger>
            <TabsTrigger value="learned">Lærte Bogstaver</TabsTrigger>
            <TabsTrigger value="remaining">Resterende Bogstaver</TabsTrigger>
          </TabsList>
          <TabsContent value="all" className="mt-6">
            <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
              {userAlphabetData.map((letter) => (
                <Card key={letter.id} className={letter.learned ? "border-green-500 bg-green-50/50 dark:bg-green-900/20" : "hover:shadow-md"}>
                  <CardContent className="p-4">
                    <div className="mb-2 flex items-center justify-between">
                      <span className="text-sm font-medium">{letter.name}</span>
                      <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => handleMarkAsLearned(letter.id)}>
                        <Check className={`h-4 w-4 ${letter.learned ? "text-green-600" : "text-muted-foreground/50 hover:text-green-500"}`} />
                         <span className="sr-only">{letter.learned ? "Markér som ulært" : "Markér som lært"}</span>
                      </Button>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-arabic text-5xl">{letter.letter}</span>
                      <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => playSound(letter.audioSrc)}>
                        <Volume2 className="h-4 w-4 text-muted-foreground hover:text-primary" />
                        <span className="sr-only">Afspil lyd for {letter.name}</span>
                      </Button>
                    </div>
                    <div className="mt-2 text-sm text-muted-foreground">Udtale: {letter.transliteration}</div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
          <TabsContent value="learned" className="mt-6">
             <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
              {learnedLetters.map((letter) => (
                <Card key={letter.id} className={"border-green-500 bg-green-50/50 dark:bg-green-900/20"}>
                  <CardContent className="p-4">
                    <div className="mb-2 flex items-center justify-between">
                      <span className="text-sm font-medium">{letter.name}</span>
                       <Check className="h-4 w-4 text-green-600" />
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-arabic text-5xl">{letter.letter}</span>
                      <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => playSound(letter.audioSrc)}>
                        <Volume2 className="h-4 w-4 text-muted-foreground hover:text-primary" />
                      </Button>
                    </div>
                    <div className="mt-2 text-sm text-muted-foreground">Udtale: {letter.transliteration}</div>
                  </CardContent>
                </Card>
              ))}
               {learnedLetters.length === 0 && <p className="col-span-full text-center text-muted-foreground">Du har endnu ikke markeret nogen bogstaver som lærte.</p>}
            </div>
          </TabsContent>
          <TabsContent value="remaining" className="mt-6">
            <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
              {remainingLetters.map((letter) => (
                <Card key={letter.id} className="hover:shadow-md">
                  <CardContent className="p-4">
                    <div className="mb-2 flex items-center justify-between">
                      <span className="text-sm font-medium">{letter.name}</span>
                       <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => handleMarkAsLearned(letter.id)}>
                        <Check className="h-4 w-4 text-muted-foreground/50 hover:text-green-500" />
                      </Button>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-arabic text-5xl">{letter.letter}</span>
                       <Button variant="ghost" size="icon" className="h-8 w-8" onClick={() => playSound(letter.audioSrc)}>
                        <Volume2 className="h-4 w-4 text-muted-foreground hover:text-primary" />
                      </Button>
                    </div>
                    <div className="mt-2 text-sm text-muted-foreground">Udtale: {letter.transliteration}</div>
                  </CardContent>
                </Card>
              ))}
              {remainingLetters.length === 0 && <p className="col-span-full text-center text-muted-foreground">Tillykke! Du har lært alle bogstaverne.</p>}
            </div>
          </TabsContent>
        </Tabs>
        {nextLetterToLearn && (
          <Card className="mb-8">
            <CardHeader>
              <CardTitle>Lær Næste Bogstav: <span className="font-arabic text-3xl">{nextLetterToLearn.letter}</span> ({nextLetterToLearn.name})</CardTitle>
              <CardDescription>Lær udtale, skrivning og genkendelse af bogstavet "{nextLetterToLearn.name}".</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-6 md:grid-cols-2">
                <div>
                  <h3 className="mb-2 font-medium">Om Bogstavet</h3>
                  <p className="mb-4 text-sm text-muted-foreground">
                    Bogstavet <span className="font-arabic text-lg">{nextLetterToLearn.letter}</span> ({nextLetterToLearn.name}) udtales som "{nextLetterToLearn.transliteration}".
                  </p>
                  <div className="mb-4 rounded-lg bg-muted p-4 dark:bg-gray-800">
                    <h4 className="mb-2 text-sm font-medium">Skriveformer</h4>
                    <div className="space-y-2">
                      <div className="flex items-center gap-4">
                        <span className="font-arabic text-2xl">{currentLetterForms.isolated}</span>
                        <span className="text-sm text-muted-foreground">Isoleret form</span>
                      </div>
                      <div className="flex items-center gap-4">
                        <span className="font-arabic text-2xl">{currentLetterForms.initial}</span>
                        <span className="text-sm text-muted-foreground">Initial form</span>
                      </div>
                      <div className="flex items-center gap-4">
                        <span className="font-arabic text-2xl">{currentLetterForms.medial}</span>
                        <span className="text-sm text-muted-foreground">Medial form</span>
                      </div>
                      <div className="flex items-center gap-4">
                        <span className="font-arabic text-2xl">{currentLetterForms.final}</span>
                        <span className="text-sm text-muted-foreground">Final form</span>
                      </div>
                    </div>
                  </div>
                </div>
                <div>
                  <h3 className="mb-2 font-medium">Eksempler med {nextLetterToLearn.name}</h3>
                  <div className="space-y-4">
                    {currentExampleWords.length > 0 ? currentExampleWords.map((ex, index) => (
                      <div key={index} className="rounded-lg border p-3">
                        <div className="mb-1 flex items-center justify-between">
                          <span className="font-arabic text-xl">{ex.word}</span>
                          <Button variant="ghost" size="sm" className="h-8 gap-1" onClick={() => playSound(ex.audioSrc)}>
                            <Volume2 className="h-4 w-4" />
                            <span className="text-xs">Lyt</span>
                          </Button>
                        </div>
                        <div className="text-sm text-muted-foreground">
                          <p>Translitteration: {ex.transliteration}</p>
                          <p>Betydning: {ex.meaning}</p>
                        </div>
                      </div>
                    )) : <p className="text-sm text-muted-foreground">Ingen eksempler tilgængelige for dette bogstav endnu.</p>}
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full bg-primary hover:bg-primary/90 text-primary-foreground">
                <Link href={`/alphabet/learn/${nextLetterToLearn.id}`}>Start Lektion for {nextLetterToLearn.name}</Link>
              </Button>
            </CardFooter>
          </Card>
        )}
        <Card>
          <CardHeader>
            <CardTitle>Øvelser</CardTitle>
            <CardDescription>Træn din forståelse af det arabiske alfabet</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
              {practiceExercises.map((exercise) => (
                <Link key={exercise.id} href={exercise.href} className="block">
                  <Card className="h-full hover:shadow-lg transition-shadow">
                    <CardHeader> <CardTitle className="text-lg">{exercise.title}</CardTitle> </CardHeader>
                    <CardContent> <p className="text-sm text-muted-foreground">{exercise.description}</p> </CardContent>
                    <CardFooter> <Button variant="outline" className="w-full">Start Øvelse <ChevronRight className="ml-2 h-4 w-4" /></Button> </CardFooter>
                  </Card>
                </Link>
              ))}
            </div>
          </CardContent>
        </Card>
      </main>
      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; {new Date().getFullYear()} Ata'allam al-Arabiya. Alle rettigheder forbeholdes.
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="app/auth/login/page.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { BookOpen, Eye, EyeOff, Loader2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"

export default function LoginPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      // Simuler autentifikation (i en rigtig app ville dette være et API-kald)
      await new Promise((resolve) => setTimeout(resolve, 1500))

      // Simuler succesfuld login
      router.push("/")
    } catch (error) {
      console.error("Login fejlede:", error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-emerald-50 to-white p-4 dark:from-gray-900 dark:to-gray-950">
      <div className="mb-8 flex items-center gap-2">
        <BookOpen className="h-8 w-8 text-emerald-600 dark:text-emerald-400" />
        <span className="text-2xl font-bold">أتعلم العربية</span>
        <span className="text-2xl font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
      </div>

      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl">Log ind</CardTitle>
          <CardDescription>Indtast dine oplysninger for at få adgang til din konto</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="navn@eksempel.dk"
                value={formData.email}
                onChange={handleChange}
                required
                disabled={isLoading}
              />
            </div>
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="password">Adgangskode</Label>
                <Link
                  href="/auth/forgot-password"
                  className="text-xs text-emerald-600 hover:underline dark:text-emerald-400"
                >
                  Glemt adgangskode?
                </Link>
              </div>
              <div className="relative">
                <Input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="••••••••"
                  value={formData.password}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={isLoading}
                >
                  {showPassword ? (
                    <EyeOff className="h-4 w-4 text-muted-foreground" />
                  ) : (
                    <Eye className="h-4 w-4 text-muted-foreground" />
                  )}
                  <span className="sr-only">{showPassword ? "Skjul adgangskode" : "Vis adgangskode"}</span>
                </Button>
              </div>
            </div>
            <Button type="submit" className="w-full bg-emerald-700 hover:bg-emerald-800" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Logger ind...
                </>
              ) : (
                "Log ind"
              )}
            </Button>
          </form>

          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <Separator />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-card px-2 text-muted-foreground">Eller fortsæt med</span>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <Button variant="outline" disabled={isLoading}>
              <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              Google
            </Button>
            <Button variant="outline" disabled={isLoading}>
              <svg className="mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" />
              </svg>
              Facebook
            </Button>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4">
          <div className="text-center text-sm">
            Har du ikke en konto?{" "}
            <Link href="/auth/register" className="text-emerald-600 hover:underline dark:text-emerald-400">
              Opret konto
            </Link>
          </div>
        </CardFooter>
      </Card>
    </div>
  )
}
</file>

<file path="app/auth/register/page.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import Link from "next/link"
import { useRouter } from "next/navigation"
import { BookOpen, Eye, EyeOff, Loader2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Separator } from "@/components/ui/separator"

export default function RegisterPage() {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      // Simuler registrering (i en rigtig app ville dette være et API-kald)
      await new Promise((resolve) => setTimeout(resolve, 1500))

      // Simuler succesfuld registrering
      router.push("/")
    } catch (error) {
      console.error("Registrering fejlede:", error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-emerald-50 to-white p-4 dark:from-gray-900 dark:to-gray-950">
      <div className="mb-8 flex items-center gap-2">
        <BookOpen className="h-8 w-8 text-emerald-600 dark:text-emerald-400" />
        <span className="text-2xl font-bold">أتعلم العربية</span>
        <span className="text-2xl font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
      </div>

      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl">Opret konto</CardTitle>
          <CardDescription>Indtast dine oplysninger for at oprette en konto</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">Navn</Label>
              <Input
                id="name"
                name="name"
                placeholder="Dit fulde navn"
                value={formData.name}
                onChange={handleChange}
                required
                disabled={isLoading}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="navn@eksempel.dk"
                value={formData.email}
                onChange={handleChange}
                required
                disabled={isLoading}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Adgangskode</Label>
              <div className="relative">
                <Input
                  id="password"
                  name="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="••••••••"
                  value={formData.password}
                  onChange={handleChange}
                  required
                  disabled={isLoading}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                  onClick={() => setShowPassword(!showPassword)}
                  disabled={isLoading}
                >
                  {showPassword ? (
                    <EyeOff className="h-4 w-4 text-muted-foreground" />
                  ) : (
                    <Eye className="h-4 w-4 text-muted-foreground" />
                  )}
                  <span className="sr-only">{showPassword ? "Skjul adgangskode" : "Vis adgangskode"}</span>
                </Button>
              </div>
              <p className="text-xs text-muted-foreground">
                Adgangskoden skal være mindst 8 tegn lang og indeholde mindst ét tal og ét specialtegn.
              </p>
            </div>
            <Button type="submit" className="w-full bg-emerald-700 hover:bg-emerald-800" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Opretter konto...
                </>
              ) : (
                "Opret konto"
              )}
            </Button>
          </form>

          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <Separator />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-card px-2 text-muted-foreground">Eller fortsæt med</span>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <Button variant="outline" disabled={isLoading}>
              <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24">
                <path
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  fill="#4285F4"
                />
                <path
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  fill="#34A853"
                />
                <path
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  fill="#FBBC05"
                />
                <path
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  fill="#EA4335"
                />
              </svg>
              Google
            </Button>
            <Button variant="outline" disabled={isLoading}>
              <svg className="mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" />
              </svg>
              Facebook
            </Button>
          </div>
        </CardContent>
        <CardFooter className="flex flex-col space-y-4">
          <div className="text-center text-sm">
            Har du allerede en konto?{" "}
            <Link href="/auth/login" className="text-emerald-600 hover:underline dark:text-emerald-400">
              Log ind
            </Link>
          </div>
        </CardFooter>
      </Card>
    </div>
  )
}
</file>

<file path="app/community/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/community/page.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import {
  MessageSquare,
  Heart,
  Share2,
  BookmarkPlus,
  Users,
  Award,
  BookOpen,
  MessageCircle,
  TrendingUp,
  Clock,
} from "lucide-react"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { TopicDiscussionThread } from "@/components/topic-discussion-thread"

// Mock data
const mockDiscussions = [
  {
    id: 1,
    title: "Forståelse af Rod-bogstavssystemet",
    author: {
      name: "Ahmed Hassan",
      avatar: "/placeholder.svg?height=40&width=40",
      level: "Avanceret",
    },
    date: "For 2 dage siden",
    content:
      "Jeg har svært ved at forstå konceptet med rod-bogstaver i arabisk. Kan nogen forklare, hvordan man identificerer roden i et ord, og hvordan det hjælper med at forstå ordets betydning?",
    tags: ["Grammatik", "Ordforråd", "Begynder"],
    likes: 24,
    comments: 8,
    views: 156,
  },
  {
    id: 2,
    title: "Tips til at huske arabiske verber",
    author: {
      name: "Sophia Jensen",
      avatar: "/placeholder.svg?height=40&width=40",
      level: "Mellem",
    },
    date: "For 5 dage siden",
    content:
      "Jeg har fundet nogle effektive metoder til at huske arabiske verber og deres konjugationer. Vil gerne dele dem med fællesskabet og høre, hvilke metoder I bruger.",
    tags: ["Verber", "Hukommelsesteknikker", "Studie"],
    likes: 42,
    comments: 15,
    views: 230,
  },
  {
    id: 3,
    title: "Analyse af Surah Al-Fatiha",
    author: {
      name: "Omar Khalid",
      avatar: "/placeholder.svg?height=40&width=40",
      level: "Ekspert",
    },
    date: "For 1 uge siden",
    content:
      "Jeg har lavet en detaljeret grammatisk analyse af Surah Al-Fatiha, som jeg gerne vil dele. Den indeholder ordforråd, grammatiske strukturer og kulturel kontekst.",
    tags: ["Quran", "Analyse", "Grammatik"],
    likes: 87,
    comments: 32,
    views: 412,
  },
]

const mockStudyGroups = [
  {
    id: 1,
    name: "Begyndere i Quranic Arabisk",
    members: 128,
    description: "En gruppe for nybegyndere, der ønsker at lære grundlæggende Quranic arabisk sammen.",
    topics: ["Alfabet", "Grundlæggende Grammatik", "Daglige Udtryk"],
    meetingTime: "Onsdage kl. 19:00",
    image: "/placeholder.svg?height=80&width=80",
  },
  {
    id: 2,
    name: "Quran Tafsir Studiegruppe",
    members: 76,
    description: "Vi studerer Quran med fokus på tafsir (fortolkning) og sproglig analyse.",
    topics: ["Tafsir", "Sproglig Analyse", "Historisk Kontekst"],
    meetingTime: "Lørdage kl. 10:00",
    image: "/placeholder.svg?height=80&width=80",
  },
  {
    id: 3,
    name: "Arabisk Konversationsklub",
    members: 54,
    description: "Praktiser arabisk samtale med andre studerende på alle niveauer.",
    topics: ["Konversation", "Udtale", "Kulturel Udveksling"],
    meetingTime: "Mandage kl. 18:30",
    image: "/placeholder.svg?height=80&width=80",
  },
]

const mockChallenges = [
  {
    id: 1,
    title: "30 Dages Quran Vokabular",
    participants: 342,
    description: "Lær 5 nye Quran-ord hver dag i 30 dage og test din hukommelse.",
    difficulty: "Mellem",
    progress: 65,
    daysLeft: 12,
    badge: "/placeholder.svg?height=60&width=60",
  },
  {
    id: 2,
    title: "Grammatik Mester",
    participants: 186,
    description: "Gennemfør daglige grammatikøvelser og opnå mesterskab i arabisk grammatik.",
    difficulty: "Avanceret",
    progress: 40,
    daysLeft: 18,
    badge: "/placeholder.svg?height=60&width=60",
  },
  {
    id: 3,
    title: "Udtale Udfordring",
    participants: 278,
    description: "Optag din udtale af arabiske lyde og få feedback fra fællesskabet.",
    difficulty: "Begynder",
    progress: 80,
    daysLeft: 6,
    badge: "/placeholder.svg?height=60&width=60",
  },
]

const mockLeaderboard = [
  { rank: 1, name: "Ahmed Hassan", points: 12450, avatar: "/placeholder.svg?height=40&width=40", streak: 86 },
  { rank: 2, name: "Sophia Jensen", points: 11280, avatar: "/placeholder.svg?height=40&width=40", streak: 64 },
  { rank: 3, name: "Omar Khalid", points: 10920, avatar: "/placeholder.svg?height=40&width=40", streak: 78 },
  { rank: 4, name: "Maria Rodriguez", points: 9840, avatar: "/placeholder.svg?height=40&width=40", streak: 52 },
  { rank: 5, name: "Yusuf Ali", points: 9210, avatar: "/placeholder.svg?height=40&width=40", streak: 45 },
]

export default function Community() {
  const [activeTab, setActiveTab] = useState("discussions")
  const [selectedDiscussion, setSelectedDiscussion] = useState<number | null>(null)
  const [newComment, setNewComment] = useState("")
  const [newPost, setNewPost] = useState({ title: "", content: "", tags: "" })

  const handleSelectDiscussion = (id: number) => {
    setSelectedDiscussion(id)
  }

  const handleBackToDiscussions = () => {
    setSelectedDiscussion(null)
  }

  const handleCommentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setNewComment(e.target.value)
  }

  const handlePostComment = () => {
    // In a real app, this would send the comment to a backend
    console.log("Posting comment:", newComment)
    setNewComment("")
  }

  const handleNewPostChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setNewPost((prev) => ({ ...prev, [name]: value }))
  }

  const handleCreatePost = () => {
    // In a real app, this would send the new post to a backend
    console.log("Creating new post:", newPost)
    setNewPost({ title: "", content: "", tags: "" })
  }

  const handleJoinGroup = (groupId: number) => {
    // In a real app, this would join the user to the group
    console.log("Joining group:", groupId)
  }

  const handleJoinChallenge = (challengeId: number) => {
    // In a real app, this would join the user to the challenge
    console.log("Joining challenge:", challengeId)
  }

  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title="Community"
        description="Forbind med andre arabisk-studerende, del ressourcer og deltag i diskussioner"
        imageUrl="/placeholder.svg?height=100&width=100"
      />

      <Tabs defaultValue="discussions" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-4 mb-8">
          <TabsTrigger value="discussions" className="flex items-center gap-2">
            <MessageSquare className="h-4 w-4" />
            <span>Diskussioner</span>
          </TabsTrigger>
          <TabsTrigger value="study-groups" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            <span>Studiegrupper</span>
          </TabsTrigger>
          <TabsTrigger value="challenges" className="flex items-center gap-2">
            <Award className="h-4 w-4" />
            <span>Udfordringer</span>
          </TabsTrigger>
          <TabsTrigger value="leaderboard" className="flex items-center gap-2">
            <TrendingUp className="h-4 w-4" />
            <span>Rangliste</span>
          </TabsTrigger>
        </TabsList>

        <TabsContent value="discussions" className="mt-0">
          {selectedDiscussion === null ? (
            <div className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Start en ny diskussion</CardTitle>
                  <CardDescription>Del dine tanker, spørgsmål eller ressourcer med fællesskabet</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <Input
                        placeholder="Titel på din diskussion"
                        name="title"
                        value={newPost.title}
                        onChange={handleNewPostChange}
                      />
                    </div>
                    <div>
                      <Textarea
                        placeholder="Skriv dit indlæg her..."
                        className="min-h-[120px]"
                        name="content"
                        value={newPost.content}
                        onChange={handleNewPostChange}
                      />
                    </div>
                    <div>
                      <Input
                        placeholder="Tags (adskilt med komma)"
                        name="tags"
                        value={newPost.tags}
                        onChange={handleNewPostChange}
                      />
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button onClick={handleCreatePost} disabled={!newPost.title || !newPost.content}>
                    Opret Diskussion
                  </Button>
                </CardFooter>
              </Card>

              <div className="space-y-4">
                {mockDiscussions.map((discussion) => (
                  <Card
                    key={discussion.id}
                    className="cursor-pointer hover:shadow-md transition-shadow"
                    onClick={() => handleSelectDiscussion(discussion.id)}
                  >
                    <CardContent className="p-6">
                      <div className="space-y-4">
                        <div className="flex justify-between items-start">
                          <h3 className="text-xl font-semibold">{discussion.title}</h3>
                          <div className="flex items-center space-x-4 text-gray-500">
                            <div className="flex items-center">
                              <Heart className="h-4 w-4 mr-1" />
                              <span>{discussion.likes}</span>
                            </div>
                            <div className="flex items-center">
                              <MessageCircle className="h-4 w-4 mr-1" />
                              <span>{discussion.comments}</span>
                            </div>
                          </div>
                        </div>

                        <div className="flex items-center space-x-2">
                          <Avatar>
                            <AvatarImage
                              src={discussion.author.avatar || "/placeholder.svg"}
                              alt={discussion.author.name}
                            />
                            <AvatarFallback>{discussion.author.name.charAt(0)}</AvatarFallback>
                          </Avatar>
                          <div>
                            <p className="font-medium">{discussion.author.name}</p>
                            <p className="text-sm text-gray-500">{discussion.date}</p>
                          </div>
                          <Badge variant="outline" className="ml-2">
                            {discussion.author.level}
                          </Badge>
                        </div>

                        <p className="text-gray-700 line-clamp-2">{discussion.content}</p>

                        <div className="flex flex-wrap gap-2">
                          {discussion.tags.map((tag, index) => (
                            <Badge key={index} variant="secondary">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          ) : (
            <Card>
              <CardHeader className="pb-3">
                <div className="flex justify-between items-center">
                  <Button variant="ghost" size="sm" onClick={handleBackToDiscussions}>
                    &larr; Tilbage til diskussioner
                  </Button>
                  <div className="flex space-x-2">
                    <Button variant="ghost" size="sm">
                      <BookmarkPlus className="h-4 w-4 mr-1" />
                      Gem
                    </Button>
                    <Button variant="ghost" size="sm">
                      <Share2 className="h-4 w-4 mr-1" />
                      Del
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="space-y-6">
                <TopicDiscussionThread discussion={mockDiscussions.find((d) => d.id === selectedDiscussion)!} />

                <Separator />

                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">Skriv en kommentar</h3>
                  <Textarea
                    placeholder="Del dine tanker..."
                    className="min-h-[100px]"
                    value={newComment}
                    onChange={handleCommentChange}
                  />
                  <Button onClick={handlePostComment} disabled={!newComment.trim()}>
                    Send Kommentar
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="study-groups" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {mockStudyGroups.map((group) => (
              <Card key={group.id}>
                <CardContent className="p-6 space-y-4">
                  <div className="flex items-center space-x-4">
                    <Avatar className="h-16 w-16">
                      <AvatarImage src={group.image || "/placeholder.svg"} alt={group.name} />
                      <AvatarFallback>{group.name.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div>
                      <h3 className="text-xl font-semibold">{group.name}</h3>
                      <p className="text-sm text-gray-500">{group.members} medlemmer</p>
                    </div>
                  </div>

                  <p className="text-gray-700">{group.description}</p>

                  <div>
                    <h4 className="text-sm font-medium mb-2">Emner:</h4>
                    <div className="flex flex-wrap gap-2">
                      {group.topics.map((topic, index) => (
                        <Badge key={index} variant="secondary">
                          {topic}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  <div className="flex items-center text-sm text-gray-500">
                    <Clock className="h-4 w-4 mr-1" />
                    <span>{group.meetingTime}</span>
                  </div>

                  <Button onClick={() => handleJoinGroup(group.id)} className="w-full">
                    Deltag i Gruppe
                  </Button>
                </CardContent>
              </Card>
            ))}

            <Card className="border-dashed">
              <CardContent className="p-6 flex flex-col items-center justify-center h-full space-y-4 min-h-[300px]">
                <div className="bg-primary/10 p-4 rounded-full">
                  <Users className="h-8 w-8 text-primary" />
                </div>
                <h3 className="text-xl font-semibold text-center">Opret en ny studiegruppe</h3>
                <p className="text-gray-500 text-center">
                  Start din egen studiegruppe og inviter andre til at lære sammen med dig
                </p>
                <Button>Opret Gruppe</Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="challenges" className="mt-0">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {mockChallenges.map((challenge) => (
              <Card key={challenge.id}>
                <CardContent className="p-6 space-y-4">
                  <div className="flex justify-between items-start">
                    <div className="space-y-1">
                      <h3 className="text-xl font-semibold">{challenge.title}</h3>
                      <p className="text-sm text-gray-500">{challenge.participants} deltagere</p>
                    </div>
                    <Avatar className="h-14 w-14">
                      <AvatarImage src={challenge.badge || "/placeholder.svg"} alt={challenge.title} />
                      <AvatarFallback>{challenge.title.charAt(0)}</AvatarFallback>
                    </Avatar>
                  </div>

                  <p className="text-gray-700">{challenge.description}</p>

                  <div className="flex justify-between items-center">
                    <Badge
                      variant={
                        challenge.difficulty === "Begynder"
                          ? "outline"
                          : challenge.difficulty === "Mellem"
                            ? "secondary"
                            : "destructive"
                      }
                    >
                      {challenge.difficulty}
                    </Badge>
                    <span className="text-sm text-gray-500">{challenge.daysLeft} dage tilbage</span>
                  </div>

                  <div className="space-y-1">
                    <div className="flex justify-between text-sm">
                      <span>Fremskridt</span>
                      <span>{challenge.progress}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div className="bg-primary rounded-full h-2" style={{ width: `${challenge.progress}%` }}></div>
                    </div>
                  </div>

                  <Button onClick={() => handleJoinChallenge(challenge.id)} className="w-full">
                    Deltag i Udfordring
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="leaderboard" className="mt-0">
          <Card>
            <CardHeader>
              <CardTitle>Top Studerende</CardTitle>
              <CardDescription>De mest aktive og engagerede studerende i fællesskabet</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {mockLeaderboard.map((user, index) => (
                  <div key={user.rank} className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div
                        className={`flex items-center justify-center w-8 h-8 rounded-full font-bold ${
                          index === 0
                            ? "bg-yellow-100 text-yellow-700"
                            : index === 1
                              ? "bg-gray-100 text-gray-700"
                              : index === 2
                                ? "bg-amber-100 text-amber-700"
                                : "bg-gray-50 text-gray-500"
                        }`}
                      >
                        {user.rank}
                      </div>
                      <Avatar>
                        <AvatarImage src={user.avatar || "/placeholder.svg"} alt={user.name} />
                        <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <div>
                        <p className="font-medium">{user.name}</p>
                        <div className="flex items-center text-sm text-gray-500">
                          <BookOpen className="h-3 w-3 mr-1" />
                          <span>{user.streak} dages streak</span>
                        </div>
                      </div>
                    </div>
                    <div className="font-bold text-lg">{user.points.toLocaleString()} point</div>
                  </div>
                ))}
              </div>
            </CardContent>
            <CardFooter className="flex justify-center">
              <Button variant="outline">Se Fuld Rangliste</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="app/grammar/page.tsx">
import Link from "next/link"
import { ArrowLeft, BookOpen, ChevronRight, ExternalLink } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MainNav } from "@/components/main-nav"
import { UserNav } from "@/components/user-nav"

export default function GrammarPage() {
  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <header className="sticky top-0 z-40 border-b bg-white/80 backdrop-blur-sm dark:bg-gray-950/80">
        <div className="container flex h-16 items-center justify-between py-4">
          <div className="flex items-center gap-6">
            <Link href="/" className="flex items-center gap-2">
              <BookOpen className="h-6 w-6 text-emerald-600 dark:text-emerald-400" />
              <span className="text-lg font-bold">أتعلم العربية</span>
              <span className="text-lg font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
            </Link>
            <MainNav />
          </div>
          <UserNav />
        </div>
      </header>

      <main className="container flex-1 py-10">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2">
            <Link href="/">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Dashboard
            </Link>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">Arabisk Grammatik</h1>
          <p className="text-muted-foreground">Lær grundlæggende arabisk grammatik og sætningsstruktur</p>
        </div>

        <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex-1">
            <div className="mb-2 flex items-center justify-between text-sm">
              <span>Samlet fremgang</span>
              <span className="text-muted-foreground">3/20 lektioner gennemført</span>
            </div>
            <Progress value={15} className="h-2 bg-emerald-100" />
          </div>
        </div>

        <Tabs defaultValue="lessons" className="mb-8">
          <TabsList>
            <TabsTrigger value="lessons">Lektioner</TabsTrigger>
            <TabsTrigger value="exercises">Øvelser</TabsTrigger>
            <TabsTrigger value="reference">Reference</TabsTrigger>
          </TabsList>
          <TabsContent value="lessons" className="mt-6">
            <div className="grid gap-6 md:grid-cols-3">
              <div className="md:col-span-2">
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle>Lektion 1: Introduktion til Arabisk Grammatik</CardTitle>
                          <CardDescription>Grundlæggende koncepter og struktur</CardDescription>
                        </div>
                        <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                          Gennemført
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        En introduktion til arabisk grammatik, herunder grundlæggende sætningsstruktur, ordklasser og
                        grammatiske termer.
                      </p>
                      <div className="mt-4 flex flex-wrap gap-2">
                        <Badge variant="outline">Begynder</Badge>
                        <Badge variant="outline">15 min</Badge>
                        <Badge variant="outline">Teori</Badge>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline">Se Noter</Button>
                      <Button>Gennemgå Igen</Button>
                    </CardFooter>
                  </Card>

                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle>Lektion 2: Navneord og Køn</CardTitle>
                          <CardDescription>Maskuline og feminine navneord</CardDescription>
                        </div>
                        <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                          Gennemført
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Lær om maskuline og feminine navneord i arabisk, og hvordan man identificerer og bruger dem
                        korrekt.
                      </p>
                      <div className="mt-4 flex flex-wrap gap-2">
                        <Badge variant="outline">Begynder</Badge>
                        <Badge variant="outline">20 min</Badge>
                        <Badge variant="outline">Teori + Øvelser</Badge>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline">Se Noter</Button>
                      <Button>Gennemgå Igen</Button>
                    </CardFooter>
                  </Card>

                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle>Lektion 3: Bestemt og Ubestemt Form</CardTitle>
                          <CardDescription>Brug af Al- og Tanwin</CardDescription>
                        </div>
                        <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                          Gennemført
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Forstå hvordan man bruger den bestemte artikel "al-" og ubestemt form med tanwin i arabisk.
                      </p>
                      <div className="mt-4 flex flex-wrap gap-2">
                        <Badge variant="outline">Begynder</Badge>
                        <Badge variant="outline">25 min</Badge>
                        <Badge variant="outline">Teori + Øvelser</Badge>
                      </div>
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline">Se Noter</Button>
                      <Button>Gennemgå Igen</Button>
                    </CardFooter>
                  </Card>

                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle>Lektion 4: Personlige Pronominer</CardTitle>
                          <CardDescription>Selvstændige og tilknyttede pronominer</CardDescription>
                        </div>
                        <Badge className="bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">Næste</Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Lær om personlige pronominer i arabisk, både selvstændige former og tilknyttede former.
                      </p>
                      <div className="mt-4 flex flex-wrap gap-2">
                        <Badge variant="outline">Begynder</Badge>
                        <Badge variant="outline">30 min</Badge>
                        <Badge variant="outline">Teori + Øvelser</Badge>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full">Start Lektion</Button>
                    </CardFooter>
                  </Card>

                  <Card>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle>Lektion 5: Verbets Grundform</CardTitle>
                          <CardDescription>Introduktion til arabiske verber</CardDescription>
                        </div>
                        <Badge variant="outline">Låst</Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-muted-foreground">
                        Introduktion til arabiske verber, deres rodstruktur og grundlæggende bøjning.
                      </p>
                      <div className="mt-4 flex flex-wrap gap-2">
                        <Badge variant="outline">Begynder-Mellem</Badge>
                        <Badge variant="outline">35 min</Badge>
                        <Badge variant="outline">Teori + Øvelser</Badge>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button className="w-full" disabled>
                        Gennemfør Lektion 4 for at låse op
                      </Button>
                    </CardFooter>
                  </Card>
                </div>
              </div>

              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Din Fremgang</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Gennemførte Lektioner</span>
                          <span className="text-muted-foreground">3/20</span>
                        </div>
                        <Progress value={15} className="h-2" />
                      </div>
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Øvelser Gennemført</span>
                          <span className="text-muted-foreground">8/30</span>
                        </div>
                        <Progress value={26.7} className="h-2" />
                      </div>
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Quiz Score</span>
                          <span className="text-muted-foreground">85%</span>
                        </div>
                        <Progress value={85} className="h-2" />
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Grammatiske Koncepter</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>Navneord</span>
                        <ChevronRight className="h-4 w-4 text-muted-foreground" />
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>Verber</span>
                        <ChevronRight className="h-4 w-4 text-muted-foreground" />
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>Pronominer</span>
                        <ChevronRight className="h-4 w-4 text-muted-foreground" />
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>Adjektiver</span>
                        <ChevronRight className="h-4 w-4 text-muted-foreground" />
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>Præpositioner</span>
                        <ChevronRight className="h-4 w-4 text-muted-foreground" />
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" className="w-full">
                      Se Alle Koncepter
                    </Button>
                  </CardFooter>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Ressourcer</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between rounded-lg border p-3">
                        <div>
                          <p className="font-medium">Grammatik Ordbog</p>
                          <p className="text-sm text-muted-foreground">Opslagsværk for grammatiske termer</p>
                        </div>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn
                        </Button>
                      </div>
                      <div className="flex items-center justify-between rounded-lg border p-3">
                        <div>
                          <p className="font-medium">Verbaltabeller</p>
                          <p className="text-sm text-muted-foreground">Oversigt over verbalbøjninger</p>
                        </div>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn
                        </Button>
                      </div>
                      <div className="flex items-center justify-between rounded-lg border p-3">
                        <div>
                          <p className="font-medium">Grammatik Cheatsheet</p>
                          <p className="text-sm text-muted-foreground">Hurtig reference til grammatikregler</p>
                        </div>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="exercises" className="mt-6">
            <div className="grid gap-6 md:grid-cols-3">
              <div className="md:col-span-2">
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle>Grammatikøvelser</CardTitle>
                      <CardDescription>Øv din forståelse af arabisk grammatik</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div className="flex items-center justify-between rounded-lg border p-4">
                          <div>
                            <p className="font-medium">Navneord og Køn</p>
                            <p className="text-sm text-muted-foreground">
                              Øvelser i at identificere maskuline og feminine navneord
                            </p>
                            <div className="mt-2 flex flex-wrap gap-2">
                              <Badge variant="outline">Begynder</Badge>
                              <Badge variant="outline">10 spørgsmål</Badge>
                              <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                                Gennemført
                              </Badge>
                            </div>
                          </div>
                          <Button>Øv Igen</Button>
                        </div>

                        <div className="flex items-center justify-between rounded-lg border p-4">
                          <div>
                            <p className="font-medium">Bestemt og Ubestemt Form</p>
                            <p className="text-sm text-muted-foreground">Øvelser i at bruge al- og tanwin korrekt</p>
                            <div className="mt-2 flex flex-wrap gap-2">
                              <Badge variant="outline">Begynder</Badge>
                              <Badge variant="outline">15 spørgsmål</Badge>
                              <Badge className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300">
                                Gennemført
                              </Badge>
                            </div>
                          </div>
                          <Button>Øv Igen</Button>
                        </div>

                        <div className="flex items-center justify-between rounded-lg border p-4">
                          <div>
                            <p className="font-medium">Personlige Pronominer</p>
                            <p className="text-sm text-muted-foreground">
                              Øvelser i at bruge personlige pronominer korrekt
                            </p>
                            <div className="mt-2 flex flex-wrap gap-2">
                              <Badge variant="outline">Begynder</Badge>
                              <Badge variant="outline">12 spørgsmål</Badge>
                              <Badge className="bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                                Ny
                              </Badge>
                            </div>
                          </div>
                          <Button>Start Øvelse</Button>
                        </div>

                        <div className="flex items-center justify-between rounded-lg border p-4">
                          <div>
                            <p className="font-medium">Verbets Grundform</p>
                            <p className="text-sm text-muted-foreground">
                              Øvelser i at identificere og bruge verber i grundform
                            </p>
                            <div className="mt-2 flex flex-wrap gap-2">
                              <Badge variant="outline">Begynder-Mellem</Badge>
                              <Badge variant="outline">15 spørgsmål</Badge>
                              <Badge variant="outline">Låst</Badge>
                            </div>
                          </div>
                          <Button disabled>Låst</Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>

              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Øvelsesfremgang</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Gennemførte Øvelser</span>
                          <span className="text-muted-foreground">2/10</span>
                        </div>
                        <Progress value={20} className="h-2" />
                      </div>
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Gennemsnitlig Score</span>
                          <span className="text-muted-foreground">85%</span>
                        </div>
                        <Progress value={85} className="h-2" />
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Anbefalede Øvelser</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="rounded-lg border p-3">
                        <p className="font-medium">Personlige Pronominer</p>
                        <p className="text-sm text-muted-foreground">Baseret på din seneste lektion</p>
                        <Button size="sm" className="mt-2 w-full">
                          Start
                        </Button>
                      </div>
                      <div className="rounded-lg border p-3">
                        <p className="font-medium">Bestemt Form Repetition</p>
                        <p className="text-sm text-muted-foreground">Baseret på dine tidligere resultater</p>
                        <Button size="sm" className="mt-2 w-full">
                          Start
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Grammatik Quiz</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="mb-4 text-sm text-muted-foreground">
                      Test din forståelse af arabisk grammatik med vores ugentlige quiz
                    </p>
                    <Button className="w-full">Start Ugentlig Quiz</Button>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
          <TabsContent value="reference" className="mt-6">
            <div className="grid gap-6 md:grid-cols-3">
              <div className="md:col-span-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Grammatisk Reference</CardTitle>
                    <CardDescription>Omfattende guide til arabisk grammatik</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div>
                        <h3 className="mb-2 text-lg font-medium">Navneord (الاسم)</h3>
                        <div className="rounded-lg border p-4">
                          <p className="mb-2 text-muted-foreground">
                            Navneord i arabisk er enten maskuline eller feminine og kan være i bestemt eller ubestemt
                            form.
                          </p>
                          <div className="mb-4 space-y-2">
                            <div className="flex items-start gap-2">
                              <span className="font-medium">Maskuline navneord:</span>
                              <span className="text-muted-foreground">
                                Har generelt ingen særlig endelse (f.eks. كِتَاب - bog)
                              </span>
                            </div>
                            <div className="flex items-start gap-2">
                              <span className="font-medium">Feminine navneord:</span>
                              <span className="text-muted-foreground">
                                Ender ofte med ة (ta marbuta) (f.eks. مَدْرَسَة - skole)
                              </span>
                            </div>
                          </div>
                          <Button variant="outline" size="sm">
                            Læs Mere om Navneord
                          </Button>
                        </div>
                      </div>

                      <div>
                        <h3 className="mb-2 text-lg font-medium">Verber (الفعل)</h3>
                        <div className="rounded-lg border p-4">
                          <p className="mb-2 text-muted-foreground">
                            Arabiske verber er baseret på en rod, typisk bestående af tre konsonanter, og bøjes efter
                            person, køn, tal og tid.
                          </p>
                          <div className="mb-4 space-y-2">
                            <div className="flex items-start gap-2">
                              <span className="font-medium">Grundform:</span>
                              <span className="text-muted-foreground">
                                3. person ental maskulinum i perfektum (f.eks. كَتَبَ - han skrev)
                              </span>
                            </div>
                            <div className="flex items-start gap-2">
                              <span className="font-medium">Hovedtider:</span>
                              <span className="text-muted-foreground">
                                Perfektum (afsluttet handling) og imperfektum (uafsluttet handling)
                              </span>
                            </div>
                          </div>
                          <Button variant="outline" size="sm">
                            Læs Mere om Verber
                          </Button>
                        </div>
                      </div>

                      <div>
                        <h3 className="mb-2 text-lg font-medium">Pronominer (الضمير)</h3>
                        <div className="rounded-lg border p-4">
                          <p className="mb-2 text-muted-foreground">
                            Arabisk har både selvstændige personlige pronominer og tilknyttede pronominer.
                          </p>
                          <div className="mb-4 space-y-2">
                            <div className="flex items-start gap-2">
                              <span className="font-medium">Selvstændige pronominer:</span>
                              <span className="text-muted-foreground">
                                Bruges som subjekt (f.eks. أَنَا - jeg, هُوَ - han)
                              </span>
                            </div>
                            <div className="flex items-start gap-2">
                              <span className="font-medium">Tilknyttede pronominer:</span>
                              <span className="text-muted-foreground">
                                Tilføjes til navneord, verber eller præpositioner (f.eks. -ي - min/mig)
                              </span>
                            </div>
                          </div>
                          <Button variant="outline" size="sm">
                            Læs Mere om Pronominer
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Grammatiske Termer</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>الاسم (al-ism)</span>
                        <span className="text-sm text-muted-foreground">Navneord</span>
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>الفعل (al-fi'l)</span>
                        <span className="text-sm text-muted-foreground">Verbum</span>
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>الضمير (ad-damir)</span>
                        <span className="text-sm text-muted-foreground">Pronomen</span>
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>الصفة (as-sifa)</span>
                        <span className="text-sm text-muted-foreground">Adjektiv</span>
                      </div>
                      <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                        <span>حرف الجر (harf al-jarr)</span>
                        <span className="text-sm text-muted-foreground">Præposition</span>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" className="w-full">
                      Se Fuld Ordliste
                    </Button>
                  </CardFooter>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Grammatiske Ressourcer</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between rounded-lg border p-3">
                        <div>
                          <p className="font-medium">Verbaltabeller</p>
                          <p className="text-sm text-muted-foreground">Komplette bøjningstabeller</p>
                        </div>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn
                        </Button>
                      </div>
                      <div className="flex items-center justify-between rounded-lg border p-3">
                        <div>
                          <p className="font-medium">Grammatik PDF</p>
                          <p className="text-sm text-muted-foreground">Omfattende grammatikguide</p>
                        </div>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn
                        </Button>
                      </div>
                      <div className="flex items-center justify-between rounded-lg border p-3">
                        <div>
                          <p className="font-medium">Quran Grammatik</p>
                          <p className="text-sm text-muted-foreground">Grammatik specifik for Quran</p>
                        </div>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </main>

      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; 2025 أتعلم العربية (Ata'allam al-Arabiya). Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">
              Om os
            </Link>
            <Link href="/contact" className="hover:underline">
              Kontakt
            </Link>
            <Link href="/privacy" className="hover:underline">
              Privatlivspolitik
            </Link>
            <Link href="/terms" className="hover:underline">
              Vilkår
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/kurser/[kursusId]/[fagId]/[emneId]/page.tsx">
import Link from "next/link"
import { ArrowLeft, BookOpen, ChevronRight, Download, ExternalLink, MessageSquare, Play, ThumbsUp } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AIInsightCard } from "@/components/ai-insight-card"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { TopicDiscussionThread } from "@/components/topic-discussion-thread"

export default function TopicPage() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-950">
      <GlassmorphismHeader />

      <main className="container pb-16 pt-24">
        <div className="mb-6">
          <div className="mb-2 flex items-center gap-2 text-sm text-muted-foreground">
            <Link href="/kurser" className="hover:text-foreground">
              Kurser
            </Link>
            <ChevronRight className="h-4 w-4" />
            <Link href="/kurser/dataanalyse-python" className="hover:text-foreground">
              Dataanalyse med Python
            </Link>
            <ChevronRight className="h-4 w-4" />
            <Link href="/kurser/dataanalyse-python/datastrukturer" className="hover:text-foreground">
              Datastrukturer
            </Link>
            <ChevronRight className="h-4 w-4" />
            <span>Pandas DataFrame Manipulation</span>
          </div>

          <div className="flex items-center justify-between">
            <div>
              <Button variant="ghost" size="sm" asChild className="mb-2">
                <Link href="/kurser/dataanalyse-python/datastrukturer">
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Tilbage til Datastrukturer
                </Link>
              </Button>
              <h1 className="text-3xl font-bold tracking-tight">Pandas DataFrame Manipulation</h1>
              <div className="mt-2 flex flex-wrap items-center gap-2">
                <Badge variant="outline">Python</Badge>
                <Badge variant="outline">Data Science</Badge>
                <Badge variant="outline">Pandas</Badge>
                <div className="flex items-center gap-1 text-sm text-muted-foreground">
                  <BookOpen className="h-4 w-4" />
                  <span>Læsetid: ca. 15 min</span>
                </div>
              </div>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <MessageSquare className="mr-2 h-4 w-4" />
                Diskussion
              </Button>
              <Button variant="outline" size="sm">
                <ThumbsUp className="mr-2 h-4 w-4" />
                Nyttigt
              </Button>
            </div>
          </div>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          <div className="md:col-span-2">
            <Card className="mb-6">
              <CardContent className="p-6">
                <Tabs defaultValue="indhold">
                  <TabsList className="mb-4">
                    <TabsTrigger value="indhold">Indhold</TabsTrigger>
                    <TabsTrigger value="quiz">Quiz</TabsTrigger>
                    <TabsTrigger value="opgaver">Praktiske Opgaver</TabsTrigger>
                  </TabsList>
                  <TabsContent value="indhold" className="space-y-6">
                    <div>
                      <h2 className="mb-4 text-2xl font-semibold">Introduktion til Pandas DataFrames</h2>
                      <p className="mb-4 leading-relaxed text-muted-foreground">
                        Pandas er et kraftfuldt Python-bibliotek til dataanalyse og -manipulation. DataFrames er en af
                        de centrale datastrukturer i Pandas, der giver en fleksibel og effektiv måde at arbejde med
                        tabeldata på.
                      </p>
                      <div className="mb-4 rounded-lg bg-blue-50 p-4 dark:bg-blue-950/30">
                        <h3 className="mb-2 font-medium">Hvad du vil lære</h3>
                        <ul className="ml-6 list-disc space-y-1 text-sm text-muted-foreground">
                          <li>Oprette og indlæse data i Pandas DataFrames</li>
                          <li>Filtrere og vælge data med forskellige metoder</li>
                          <li>Transformere og aggregere data</li>
                          <li>Håndtere manglende værdier</li>
                          <li>Kombinere flere DataFrames</li>
                        </ul>
                      </div>
                    </div>

                    <div>
                      <h2 className="mb-4 text-2xl font-semibold">Oprettelse af DataFrames</h2>
                      <p className="mb-4 leading-relaxed text-muted-foreground">
                        Der er flere måder at oprette en DataFrame på. Den mest almindelige er at indlæse data fra en
                        ekstern kilde som en CSV-fil, men du kan også oprette en DataFrame fra en Python dictionary
                        eller liste.
                      </p>
                      <div className="mb-4 overflow-hidden rounded-lg border bg-muted">
                        <div className="bg-muted px-4 py-2 font-mono text-sm">Eksempel: Oprettelse af DataFrame</div>
                        <div className="overflow-auto p-4 font-mono text-sm">
                          <pre>
                            {`import pandas as pd

# Fra dictionary
data = {
    'Navn': ['Anders', 'Mette', 'Søren', 'Louise'],
    'Alder': [28, 34, 42, 31],
    'By': ['København', 'Aarhus', 'Odense', 'Aalborg']
}

df = pd.DataFrame(data)
print(df)`}
                          </pre>
                        </div>
                      </div>
                      <div className="mb-4 overflow-hidden rounded-lg border">
                        <div className="bg-muted px-4 py-2 font-mono text-sm">Output</div>
                        <div className="overflow-auto p-4 font-mono text-sm">
                          <pre>
                            {`     Navn  Alder         By
0  Anders     28  København
1   Mette     34     Aarhus
2   Søren     42     Odense
3  Louise     31    Aalborg`}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h2 className="mb-4 text-2xl font-semibold">Filtrering og Udvælgelse</h2>
                      <p className="mb-4 leading-relaxed text-muted-foreground">
                        En af de mest almindelige operationer med DataFrames er at filtrere og vælge specifikke rækker
                        eller kolonner baseret på betingelser.
                      </p>
                      <div className="mb-4 overflow-hidden rounded-lg border bg-muted">
                        <div className="bg-muted px-4 py-2 font-mono text-sm">Eksempel: Filtrering</div>
                        <div className="overflow-auto p-4 font-mono text-sm">
                          <pre>
                            {`# Vælg rækker hvor alder er over 30
ældre_end_30 = df[df['Alder'] > 30]
print(ældre_end_30)

# Vælg specifikke kolonner
navne_og_byer = df[['Navn', 'By']]
print(navne_og_byer)`}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div className="rounded-lg border bg-card p-6 shadow-sm">
                      <h3 className="mb-4 text-xl font-semibold">Interaktiv H5P Simulation</h3>
                      <div className="aspect-video rounded-lg bg-muted">
                        <div className="flex h-full flex-col items-center justify-center">
                          <Play className="mb-2 h-12 w-12 text-muted-foreground" />
                          <p className="text-center text-muted-foreground">
                            Interaktiv Pandas DataFrame Manipulation Simulation
                          </p>
                          <Button className="mt-4">Start Simulation</Button>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h2 className="mb-4 text-2xl font-semibold">Transformation og Aggregering</h2>
                      <p className="mb-4 leading-relaxed text-muted-foreground">
                        Pandas giver dig mulighed for at transformere data og beregne aggregerede statistikker på tværs
                        af rækker eller kolonner.
                      </p>
                      <div className="mb-4 overflow-hidden rounded-lg border bg-muted">
                        <div className="bg-muted px-4 py-2 font-mono text-sm">Eksempel: Aggregering</div>
                        <div className="overflow-auto p-4 font-mono text-sm">
                          <pre>
                            {`# Beregn gennemsnitsalder
gennemsnit = df['Alder'].mean()
print(f"Gennemsnitsalder: {gennemsnit}")

# Gruppér efter by og beregn gennemsnitsalder
by_grupper = df.groupby('By')['Alder'].mean()
print("Gennemsnitsalder pr. by:")
print(by_grupper)`}
                          </pre>
                        </div>
                      </div>
                    </div>

                    <div className="flex items-center justify-between rounded-lg border bg-card p-6 shadow-sm">
                      <div>
                        <h3 className="text-lg font-medium">Supplerende Materialer</h3>
                        <p className="text-sm text-muted-foreground">
                          Download komplet notebook og datasæt til øvelser
                        </p>
                      </div>
                      <div className="flex gap-2">
                        <Button variant="outline" size="sm">
                          <Download className="mr-2 h-4 w-4" />
                          Notebook
                        </Button>
                        <Button variant="outline" size="sm">
                          <Download className="mr-2 h-4 w-4" />
                          Datasæt
                        </Button>
                        <Button size="sm">
                          <ExternalLink className="mr-2 h-4 w-4" />
                          Åbn i Colab
                        </Button>
                      </div>
                    </div>
                  </TabsContent>
                  <TabsContent value="quiz">
                    <div className="rounded-lg border bg-card p-6 shadow-sm">
                      <h2 className="mb-4 text-xl font-semibold">Test Din Viden: Pandas DataFrames</h2>
                      <p className="mb-4 text-muted-foreground">
                        Tag denne quiz for at teste din forståelse af Pandas DataFrame manipulation.
                      </p>
                      <Button>Start Quiz</Button>
                    </div>
                  </TabsContent>
                  <TabsContent value="opgaver">
                    <div className="rounded-lg border bg-card p-6 shadow-sm">
                      <h2 className="mb-4 text-xl font-semibold">Praktiske Opgaver</h2>
                      <p className="mb-4 text-muted-foreground">Anvend det du har lært med disse praktiske øvelser.</p>
                      <div className="space-y-4">
                        <div className="rounded-lg border p-4">
                          <h3 className="mb-2 font-medium">Opgave 1: Data Cleaning</h3>
                          <p className="mb-2 text-sm text-muted-foreground">
                            Rens det medfølgende datasæt ved at håndtere manglende værdier og duplikater.
                          </p>
                          <Button variant="outline" size="sm">
                            Se Opgave
                          </Button>
                        </div>
                        <div className="rounded-lg border p-4">
                          <h3 className="mb-2 font-medium">Opgave 2: Data Transformation</h3>
                          <p className="mb-2 text-sm text-muted-foreground">
                            Transformér data ved at oprette nye kolonner baseret på eksisterende data.
                          </p>
                          <Button variant="outline" size="sm">
                            Se Opgave
                          </Button>
                        </div>
                        <div className="rounded-lg border p-4">
                          <h3 className="mb-2 font-medium">Opgave 3: Data Analysis</h3>
                          <p className="mb-2 text-sm text-muted-foreground">
                            Analysér datasættet for at finde mønstre og trends.
                          </p>
                          <Button variant="outline" size="sm">
                            Se Opgave
                          </Button>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>

            <div className="mb-6">
              <h2 className="mb-4 text-xl font-semibold">Diskussion</h2>
              <TopicDiscussionThread />
            </div>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base">Dit Fremskridt</CardTitle>
              </CardHeader>
              <CardContent className="pb-2">
                <div className="mb-2 flex items-center justify-between text-sm">
                  <span>Emne Fremskridt</span>
                  <span className="text-muted-foreground">65%</span>
                </div>
                <Progress value={65} className="mb-4" />
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm">
                    <div className="h-4 w-4 rounded-full bg-green-500"></div>
                    <span>Indhold Læst</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <div className="h-4 w-4 rounded-full bg-yellow-500"></div>
                    <span>Quiz Ikke Fuldført</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <div className="h-4 w-4 rounded-full bg-gray-300 dark:bg-gray-700"></div>
                    <span>Opgaver Ikke Påbegyndt</span>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button className="w-full">Markér som Fuldført</Button>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base">Emner i Dette Fag</CardTitle>
                <CardDescription>Datastrukturer i Python</CardDescription>
              </CardHeader>
              <CardContent className="pb-2">
                <div className="space-y-2">
                  <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                    <div className="flex items-center gap-2">
                      <div className="h-2 w-2 rounded-full bg-green-500"></div>
                      <span className="text-sm">Lister og Tupler</span>
                    </div>
                    <Badge
                      variant="outline"
                      className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                    >
                      Fuldført
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                    <div className="flex items-center gap-2">
                      <div className="h-2 w-2 rounded-full bg-green-500"></div>
                      <span className="text-sm">Dictionaries og Sets</span>
                    </div>
                    <Badge
                      variant="outline"
                      className="bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                    >
                      Fuldført
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between rounded-lg bg-blue-50 p-2 dark:bg-blue-900/20">
                    <div className="flex items-center gap-2">
                      <div className="h-2 w-2 rounded-full bg-blue-500"></div>
                      <span className="text-sm font-medium">Pandas DataFrame Manipulation</span>
                    </div>
                    <Badge variant="outline" className="bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                      I gang
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                    <div className="flex items-center gap-2">
                      <div className="h-2 w-2 rounded-full bg-gray-300 dark:bg-gray-700"></div>
                      <span className="text-sm">NumPy Arrays</span>
                    </div>
                    <Badge variant="outline" className="bg-gray-100 text-gray-500 dark:bg-gray-800 dark:text-gray-400">
                      Ikke startet
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between rounded-lg p-2 hover:bg-muted">
                    <div className="flex items-center gap-2">
                      <div className="h-2 w-2 rounded-full bg-gray-300 dark:bg-gray-700"></div>
                      <span className="text-sm">Avancerede Datastrukturer</span>
                    </div>
                    <Badge variant="outline" className="bg-gray-100 text-gray-500 dark:bg-gray-800 dark:text-gray-400">
                      Ikke startet
                    </Badge>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full">
                  Se Alle Emner
                </Button>
              </CardFooter>
            </Card>

            <AIInsightCard
              title="AI Studietip"
              insight="Pandas DataFrames er særligt nyttige til at håndtere store datasæt. Prøv at øve dig med .loc og .iloc metoderne for mere præcis dataadgang."
              recommendedAction="Øv med Eksempeldatasæt"
            />

            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-base">Flashcards</CardTitle>
                <CardDescription>Repetér nøglebegreber</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="aspect-[4/3] cursor-pointer rounded-lg border bg-card p-4 shadow-sm transition-all hover:shadow-md">
                  <div className="flex h-full flex-col items-center justify-center text-center">
                    <h3 className="mb-2 font-medium">Hvad er en Pandas DataFrame?</h3>
                    <p className="text-sm text-muted-foreground">(Klik for at vende)</p>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline" size="sm">
                  Forrige
                </Button>
                <div className="text-sm text-muted-foreground">1 af 10</div>
                <Button variant="outline" size="sm">
                  Næste
                </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
      </main>
    </div>
  )
}
</file>

<file path="app/learn/vocabulary/page.tsx">
"use client"

import { useState } from "react"
import { ArrowLeft, ArrowRight, BookOpen, Check, Repeat, VolumeIcon as VolumeUp, X } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"

export default function VocabularyTrainer() {
  const [currentCardIndex, setCurrentCardIndex] = useState(0)
  const [isFlipped, setIsFlipped] = useState(false)
  const [knownWords, setKnownWords] = useState(new Set())

  const vocabularyCards = [
    {
      arabic: "ٱلْحَمْدُ",
      transliteration: "al-hamdu",
      translation: "the praise",
      example: "ٱلْحَمْدُ لِلَّهِ",
      exampleTranslation: "All praise is due to Allah",
    },
    {
      arabic: "رَبِّ",
      transliteration: "rabbi",
      translation: "Lord (of)",
      example: "رَبِّ ٱلْعَٰلَمِينَ",
      exampleTranslation: "Lord of the worlds",
    },
    {
      arabic: "ٱلْعَٰلَمِينَ",
      transliteration: "al-'ālamīna",
      translation: "the worlds",
      example: "رَبِّ ٱلْعَٰلَمِينَ",
      exampleTranslation: "Lord of the worlds",
    },
    {
      arabic: "ٱلرَّحْمَٰنِ",
      transliteration: "ar-raḥmāni",
      translation: "the Entirely Merciful",
      example: "ٱلرَّحْمَٰنِ ٱلرَّحِيمِ",
      exampleTranslation: "The Entirely Merciful, the Especially Merciful",
    },
    {
      arabic: "ٱلرَّحِيمِ",
      transliteration: "ar-raḥīmi",
      translation: "the Especially Merciful",
      example: "ٱلرَّحْمَٰنِ ٱلرَّحِيمِ",
      exampleTranslation: "The Entirely Merciful, the Especially Merciful",
    },
    {
      arabic: "مَٰلِكِ",
      transliteration: "māliki",
      translation: "Sovereign (of)",
      example: "مَٰلِكِ يَوْمِ ٱلدِّينِ",
      exampleTranslation: "Sovereign of the Day of Recompense",
    },
    {
      arabic: "يَوْمِ",
      transliteration: "yawmi",
      translation: "Day (of)",
      example: "مَٰلِكِ يَوْمِ ٱلدِّينِ",
      exampleTranslation: "Sovereign of the Day of Recompense",
    },
    {
      arabic: "ٱلدِّينِ",
      transliteration: "ad-dīni",
      translation: "the Recompense",
      example: "مَٰلِكِ يَوْمِ ٱلدِّينِ",
      exampleTranslation: "Sovereign of the Day of Recompense",
    },
  ]

  const currentCard = vocabularyCards[currentCardIndex]
  const progress = (knownWords.size / vocabularyCards.length) * 100

  const handleNextCard = () => {
    setIsFlipped(false)
    setCurrentCardIndex((prevIndex) => (prevIndex + 1) % vocabularyCards.length)
  }

  const handlePrevCard = () => {
    setIsFlipped(false)
    setCurrentCardIndex((prevIndex) => (prevIndex - 1 + vocabularyCards.length) % vocabularyCards.length)
  }

  const handleFlipCard = () => {
    setIsFlipped(!isFlipped)
  }

  const handleMarkAsKnown = () => {
    setKnownWords((prev) => {
      const newSet = new Set(prev)
      newSet.add(currentCardIndex)
      return newSet
    })
    handleNextCard()
  }

  const handleMarkAsUnknown = () => {
    setKnownWords((prev) => {
      const newSet = new Set(prev)
      newSet.delete(currentCardIndex)
      return newSet
    })
    handleNextCard()
  }

  return (
    <div className="flex min-h-screen flex-col">
      <header className="bg-green-900 text-white">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center gap-2">
            <BookOpen className="h-6 w-6" />
            <h1 className="text-xl font-bold">Quranic Arabic Trainer</h1>
          </div>
        </div>
      </header>

      <main className="flex-1 bg-gradient-to-b from-green-50 to-white">
        <div className="container mx-auto px-4 py-8">
          <div className="mb-6">
            <h2 className="text-3xl font-bold text-green-900">Vocabulary Trainer</h2>
            <p className="text-gray-600">Surah Al-Fatiha Vocabulary</p>
          </div>

          <div className="mb-6 flex items-center justify-between">
            <div className="flex-1">
              <Progress value={progress} className="h-2 bg-green-100" />
              <div className="mt-2 text-sm text-gray-600">
                {knownWords.size} of {vocabularyCards.length} words mastered ({Math.round(progress)}%)
              </div>
            </div>
            <div className="ml-4">
              <Button variant="outline" size="sm" onClick={() => setKnownWords(new Set())}>
                <Repeat className="mr-2 h-4 w-4" />
                Reset Progress
              </Button>
            </div>
          </div>

          <div className="mb-8 flex justify-center">
            <Card className="w-full max-w-md">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>
                    Flashcard {currentCardIndex + 1}/{vocabularyCards.length}
                  </span>
                  <Button variant="ghost" size="sm" onClick={() => {}}>
                    <VolumeUp className="h-4 w-4" />
                    <span className="sr-only">Listen</span>
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div
                  className="flex min-h-[200px] cursor-pointer flex-col items-center justify-center rounded-lg bg-green-50 p-6 text-center transition-all duration-300"
                  onClick={handleFlipCard}
                >
                  {!isFlipped ? (
                    <div className="space-y-4">
                      <p className="text-4xl font-arabic" dir="rtl">
                        {currentCard.arabic}
                      </p>
                      <p className="text-sm text-gray-500">Click to reveal meaning</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <p className="text-xl font-medium">{currentCard.translation}</p>
                      <p className="text-md font-medium text-gray-700">{currentCard.transliteration}</p>
                      <div className="mt-4 rounded-lg bg-white p-3 text-sm">
                        <p className="mb-1 text-lg font-arabic" dir="rtl">
                          {currentCard.example}
                        </p>
                        <p className="text-gray-600">{currentCard.exampleTranslation}</p>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <div className="flex gap-2">
                  <Button variant="outline" onClick={handlePrevCard}>
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    Previous
                  </Button>
                  <Button variant="outline" onClick={handleNextCard}>
                    Next
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    className="border-red-200 bg-red-50 text-red-600 hover:bg-red-100 hover:text-red-700"
                    onClick={handleMarkAsUnknown}
                  >
                    <X className="mr-2 h-4 w-4" />
                    Don't Know
                  </Button>
                  <Button
                    variant="outline"
                    className="border-green-200 bg-green-50 text-green-600 hover:bg-green-100 hover:text-green-700"
                    onClick={handleMarkAsKnown}
                  >
                    <Check className="mr-2 h-4 w-4" />
                    Know It
                  </Button>
                </div>
              </CardFooter>
            </Card>
          </div>

          <div className="rounded-lg bg-white p-6 shadow-md">
            <h3 className="mb-4 text-xl font-semibold text-green-800">Study Tips</h3>
            <ul className="list-inside list-disc space-y-2 text-gray-700">
              <li>Practice these words daily for better retention</li>
              <li>Try to use these words in simple sentences</li>
              <li>Pay attention to the root letters to understand word relationships</li>
              <li>Listen to the pronunciation carefully and repeat aloud</li>
              <li>Look for these words when reading Quran to reinforce your learning</li>
            </ul>
          </div>
        </div>
      </main>

      <footer className="bg-green-900 py-6 text-center text-white">
        <div className="container mx-auto px-4">
          <p>© 2025 Quranic Arabic Trainer. All rights reserved.</p>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/offline/error.tsx">
"use client"

import { useEffect } from "react"
import Link from "next/link"
import { CloudOff, RefreshCw } from "lucide-react"

import { Button } from "@/components/ui/button"

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log fejlen til en fejlrapporteringstjeneste
    console.error(error)
  }, [error])

  return (
    <div className="flex min-h-screen flex-col items-center justify-center p-4">
      <CloudOff className="mb-4 h-16 w-16 text-emerald-600 dark:text-emerald-400" />
      <h2 className="mb-2 text-2xl font-bold">Offline Indhold Utilgængeligt</h2>
      <p className="mb-6 max-w-md text-center text-muted-foreground">
        Der opstod en fejl ved indlæsning af offline indhold. Dette kan skyldes manglende internetforbindelse eller
        problemer med cachen.
      </p>
      <div className="flex flex-col gap-2 sm:flex-row">
        <Button onClick={reset} className="gap-2">
          <RefreshCw className="h-4 w-4" />
          Prøv Igen
        </Button>
        <Button variant="outline" asChild>
          <Link href="/">Gå til Forsiden</Link>
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="app/offline/loading.tsx">
import { Loader2 } from "lucide-react"

export default function Loading() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center">
      <Loader2 className="h-10 w-10 animate-spin text-emerald-600 dark:text-emerald-400" />
      <p className="mt-4 text-lg font-medium">Indlæser offline indhold...</p>
    </div>
  )
}
</file>

<file path="app/offline/page.tsx">
import type { Metadata } from "next"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge"

export const metadata: Metadata = {
  title: "Offline Indhold | Quranic Arabic Trainer",
  description: "Administrer dit offline indhold og lær arabisk uden internetforbindelse",
}

export default function OfflinePage() {
  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title="Offline Indhold"
        description="Administrer dit offline indhold og lær arabisk uden internetforbindelse"
        icon="WifiOff"
      />

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="md:col-span-3">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span>Offline Status</span>
              <Badge variant="outline" className="ml-2 bg-green-50 text-green-700 hover:bg-green-50">
                Aktiveret
              </Badge>
            </CardTitle>
            <CardDescription>
              Din app er konfigureret til at fungere offline. Du kan bruge de fleste funktioner uden
              internetforbindelse.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-col space-y-1">
              <div className="flex justify-between text-sm">
                <span>Lagerplads</span>
                <span>235 MB / 500 MB</span>
              </div>
              <Progress value={47} className="h-2" />
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-muted-foreground">Sidst synkroniseret: I dag, 14:32</span>
              <Button variant="outline" size="sm">
                Synkroniser nu
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card className="col-span-1 md:col-span-2 md:row-span-2">
          <CardHeader>
            <CardTitle>Offline Indhold</CardTitle>
            <CardDescription>Administrer hvilket indhold der er tilgængeligt offline</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="courses" className="w-full">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="courses">Kurser</TabsTrigger>
                <TabsTrigger value="quran">Quran</TabsTrigger>
                <TabsTrigger value="vocabulary">Ordforråd</TabsTrigger>
                <TabsTrigger value="grammar">Grammatik</TabsTrigger>
              </TabsList>

              <TabsContent value="courses" className="space-y-4 mt-4">
                <div className="space-y-4">
                  {[
                    { title: "Introduktion til Arabisk", size: "45 MB", downloaded: true },
                    { title: "Arabiske Bogstaver", size: "32 MB", downloaded: true },
                    { title: "Grundlæggende Grammatik", size: "28 MB", downloaded: true },
                    { title: "Quranisk Arabisk Niveau 1", size: "56 MB", downloaded: false },
                    { title: "Quranisk Arabisk Niveau 2", size: "62 MB", downloaded: false },
                  ].map((course, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <div className="text-sm font-medium">{course.title}</div>
                        <div className="text-xs text-muted-foreground">{course.size}</div>
                      </div>
                      <Switch checked={course.downloaded} />
                    </div>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="quran" className="space-y-4 mt-4">
                <div className="space-y-4">
                  {[
                    { title: "Al-Fatiha (1)", size: "2 MB", downloaded: true },
                    { title: "Al-Baqarah (2)", size: "45 MB", downloaded: true },
                    { title: "Ali 'Imran (3)", size: "28 MB", downloaded: false },
                    { title: "An-Nisa (4)", size: "32 MB", downloaded: false },
                    { title: "Al-Ma'idah (5)", size: "30 MB", downloaded: false },
                  ].map((surah, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <div className="text-sm font-medium">{surah.title}</div>
                        <div className="text-xs text-muted-foreground">{surah.size}</div>
                      </div>
                      <Switch checked={surah.downloaded} />
                    </div>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="vocabulary" className="space-y-4 mt-4">
                <div className="space-y-4">
                  {[
                    { title: "Mest Almindelige Ord (Top 100)", size: "5 MB", downloaded: true },
                    { title: "Quraniske Nøgleord", size: "8 MB", downloaded: true },
                    { title: "Verber - Grundlæggende", size: "12 MB", downloaded: true },
                    { title: "Substantiver - Grundlæggende", size: "10 MB", downloaded: false },
                    { title: "Adjektiver - Grundlæggende", size: "7 MB", downloaded: false },
                  ].map((vocab, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <div className="text-sm font-medium">{vocab.title}</div>
                        <div className="text-xs text-muted-foreground">{vocab.size}</div>
                      </div>
                      <Switch checked={vocab.downloaded} />
                    </div>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="grammar" className="space-y-4 mt-4">
                <div className="space-y-4">
                  {[
                    { title: "Grundlæggende Sætningsstruktur", size: "8 MB", downloaded: true },
                    { title: "Verbers Tider", size: "15 MB", downloaded: true },
                    { title: "Substantivers Bøjning", size: "12 MB", downloaded: false },
                    { title: "Adjektivers Bøjning", size: "10 MB", downloaded: false },
                    { title: "Avanceret Grammatik", size: "18 MB", downloaded: false },
                  ].map((grammar, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <div className="text-sm font-medium">{grammar.title}</div>
                        <div className="text-xs text-muted-foreground">{grammar.size}</div>
                      </div>
                      <Switch checked={grammar.downloaded} />
                    </div>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
          <CardFooter>
            <Button className="w-full">Gem ændringer</Button>
          </CardFooter>
        </Card>

        <Card className="md:row-span-1">
          <CardHeader>
            <CardTitle>Offline Indstillinger</CardTitle>
            <CardDescription>Konfigurer hvordan appen fungerer offline</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="auto-sync">Automatisk synkronisering</Label>
                <p className="text-xs text-muted-foreground">Synkroniser automatisk når du har internetforbindelse</p>
              </div>
              <Switch id="auto-sync" defaultChecked />
            </div>
            <Separator />
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="wifi-only">Kun på Wi-Fi</Label>
                <p className="text-xs text-muted-foreground">Download kun indhold når du er på Wi-Fi</p>
              </div>
              <Switch id="wifi-only" defaultChecked />
            </div>
            <Separator />
            <div className="flex items-center justify-between">
              <div className="space-y-0.5">
                <Label htmlFor="auto-download">Automatisk download</Label>
                <p className="text-xs text-muted-foreground">Download automatisk nyt indhold</p>
              </div>
              <Switch id="auto-download" />
            </div>
          </CardContent>
        </Card>

        <Card className="md:row-span-1">
          <CardHeader>
            <CardTitle>Offline Læring</CardTitle>
            <CardDescription>Funktioner tilgængelige uden internetforbindelse</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <ul className="space-y-2">
              {[
                { feature: "Flashcards", available: true },
                { feature: "Quran Læsning", available: true },
                { feature: "Grammatikøvelser", available: true },
                { feature: "Udtaleøvelser", available: false },
                { feature: "Quizzer", available: true },
                { feature: "Fællesskabsfunktioner", available: false },
                { feature: "AI-assisteret Læring", available: false },
              ].map((item, index) => (
                <li key={index} className="flex items-center justify-between">
                  <span className="text-sm">{item.feature}</span>
                  {item.available ? (
                    <Badge variant="outline" className="bg-green-50 text-green-700 hover:bg-green-50">
                      Tilgængelig
                    </Badge>
                  ) : (
                    <Badge variant="outline" className="bg-amber-50 text-amber-700 hover:bg-amber-50">
                      Kræver internet
                    </Badge>
                  )}
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="app/performance/page.tsx">
import type { Metadata } from "next"
import { PerformanceMetrics } from "@/components/performance/performance-metrics"
import { ResourceMonitor } from "@/components/performance/resource-monitor"
import { CodeSplittingExample } from "@/components/performance/code-splitting-example"
import { OptimizedImage } from "@/components/performance/optimized-image"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"

export const metadata: Metadata = {
  title: "Performance | Quranic Arabic Trainer",
  description: "Monitor and optimize application performance",
}

export default function PerformancePage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-3xl font-bold mb-6">Performance Monitoring</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <Card>
          <CardHeader>
            <CardTitle>Performance Overview</CardTitle>
            <CardDescription>Key metrics and insights about application performance</CardDescription>
          </CardHeader>
          <CardContent>
            <p className="mb-4">
              This dashboard provides real-time monitoring of your application's performance metrics, including Core Web
              Vitals, resource usage, and memory consumption.
            </p>
            <p>Use these insights to identify bottlenecks and optimize the user experience.</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Optimization Tips</CardTitle>
            <CardDescription>Recommendations to improve performance</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h3 className="font-medium">1. Minimize JavaScript</h3>
              <p className="text-sm text-muted-foreground">
                Reduce bundle size by removing unused code and splitting bundles.
              </p>
            </div>
            <div>
              <h3 className="font-medium">2. Optimize Images</h3>
              <p className="text-sm text-muted-foreground">
                Use next/image for automatic optimization and responsive images.
              </p>
            </div>
            <div>
              <h3 className="font-medium">3. Implement Caching</h3>
              <p className="text-sm text-muted-foreground">
                Use service workers and HTTP caching for faster repeat visits.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <PerformanceMetrics />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <ResourceMonitor />
          <OptimizedImage />
        </div>
        <CodeSplittingExample />
      </div>
    </div>
  )
}
</file>

<file path="app/practice/quiz/page.tsx">
"use client"

import { useState } from "react"
import Link from "next/link"
import { ArrowLeft, BookOpen, CheckCircle, ChevronRight, HelpCircle, Lightbulb, Timer, XCircle } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { MainNav } from "@/components/main-nav"
import { UserNav } from "@/components/user-nav"
import { AIExplainOverlay } from "@/components/ai-explain-overlay"

export default function QuizPage() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState("")
  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false)
  const [showAIExplain, setShowAIExplain] = useState(false)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [score, setScore] = useState(0)
  const [timeRemaining, setTimeRemaining] = useState(300) // 5 minutter i sekunder
  const [difficulty, setDifficulty] = useState(50) // 0-100 skala

  const quizQuestions = [
    {
      question: "Hvad betyder ordet 'كِتَاب' (kitāb)?",
      options: ["Pen", "Bog", "Stol", "Vand"],
      correctAnswer: "Bog",
      explanation:
        "Ordet 'كِتَاب' (kitāb) betyder 'bog' på arabisk. Det er et almindeligt ord, der stammer fra roden ك-ت-ب (k-t-b), som er relateret til skrivning og litteratur.",
    },
    {
      question: "Hvilken af følgende er den korrekte arabiske oversættelse af 'hus'?",
      options: ["مَدْرَسَة (madrasa)", "بَيْت (bayt)", "سَيَّارَة (sayyāra)", "كُرْسِي (kursī)"],
      correctAnswer: "بَيْت (bayt)",
      explanation:
        "بَيْت (bayt) er det arabiske ord for 'hus'. Det er et grundlæggende ord i arabisk ordforråd og bruges ofte i daglig tale.",
    },
    {
      question: "Hvad er den korrekte udtale af bogstavet 'ض'?",
      options: ["Za", "Da", "Ḍād", "Ṣād"],
      correctAnswer: "Ḍād",
      explanation:
        "Bogstavet 'ض' udtales som 'Ḍād'. Det er et unikt arabisk bogstav med en dyb 'd'-lyd, der dannes ved at presse tungen mod den øvre del af munden. Faktisk kaldes arabisk nogle gange for 'lughat al-ḍād' (sproget af ḍād), fordi dette bogstav er unikt for arabisk.",
    },
    {
      question: "Hvilken af følgende sætninger betyder 'Jeg læser en bog'?",
      options: [
        "أَنَا أَكْتُبُ كِتَابًا (anā aktubu kitāban)",
        "أَنَا أَقْرَأُ كِتَابًا (anā aqra'u kitāban)",
        "هَذَا كِتَابٌ (hādhā kitābun)",
        "أَيْنَ الكِتَاب؟ (ayna al-kitāb?)",
      ],
      correctAnswer: "أَنَا أَقْرَأُ كِتَابًا (anā aqra'u kitāban)",
      explanation:
        "أَنَا أَقْرَأُ كِتَابًا (anā aqra'u kitāban) betyder 'Jeg læser en bog'. 'أَنَا' (anā) betyder 'jeg', 'أَقْرَأُ' (aqra'u) er verbet 'at læse' i nutid, og 'كِتَابًا' (kitāban) er 'en bog' i akkusativ kasus.",
    },
    {
      question: "Hvad er den korrekte måde at sige 'godmorgen' på arabisk?",
      options: [
        "مَسَاءُ الخَيْر (masā' al-khayr)",
        "صَبَاحُ الخَيْر (ṣabāḥ al-khayr)",
        "مَرْحَبًا (marḥaban)",
        "إِلَى اللِقَاء (ilā al-liqā')",
      ],
      correctAnswer: "صَبَاحُ الخَيْر (ṣabāḥ al-khayr)",
      explanation:
        "صَبَاحُ الخَيْر (ṣabāḥ al-khayr) er den korrekte måde at sige 'godmorgen' på arabisk. Ordret betyder det 'morgen af godhed'. Det er en almindelig hilsen, der bruges om morgenen i arabisktalende lande.",
    },
  ]

  const currentQuestion = quizQuestions[currentQuestionIndex]
  const progress = ((currentQuestionIndex + (isAnswerSubmitted ? 1 : 0)) / quizQuestions.length) * 100

  const handleAnswerSelect = (answer: string) => {
    if (!isAnswerSubmitted) {
      setSelectedAnswer(answer)
    }
  }

  const handleSubmitAnswer = () => {
    if (!selectedAnswer) return

    if (!isAnswerSubmitted) {
      const isCorrect = selectedAnswer === currentQuestion.correctAnswer
      if (isCorrect) {
        setScore(score + 1)
        // Øg sværhedsgraden lidt for korrekte svar
        setDifficulty(Math.min(100, difficulty + 5))
      } else {
        // Sænk sværhedsgraden for forkerte svar
        setDifficulty(Math.max(0, difficulty - 10))
        setShowAIExplain(true)
      }
      setIsAnswerSubmitted(true)
    } else {
      // Gå til næste spørgsmål
      setShowAIExplain(false)
      if (currentQuestionIndex < quizQuestions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1)
        setSelectedAnswer("")
        setIsAnswerSubmitted(false)
      } else {
        setQuizCompleted(true)
      }
    }
  }

  const getDifficultyColor = () => {
    if (difficulty < 30) return "text-green-500"
    if (difficulty < 70) return "text-yellow-500"
    return "text-red-500"
  }

  // Formater tid som MM:SS
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <header className="sticky top-0 z-40 border-b bg-white/80 backdrop-blur-sm dark:bg-gray-950/80">
        <div className="container flex h-16 items-center justify-between py-4">
          <div className="flex items-center gap-6">
            <Link href="/" className="flex items-center gap-2">
              <BookOpen className="h-6 w-6 text-emerald-600 dark:text-emerald-400" />
              <span className="text-lg font-bold">أتعلم العربية</span>
              <span className="text-lg font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
            </Link>
            <MainNav />
          </div>
          <UserNav />
        </div>
      </header>

      <main className="container flex-1 py-10">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2">
            <Link href="/practice">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Øvelser
            </Link>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">Arabisk Ordforråd Quiz</h1>
          <p className="text-muted-foreground">Test din viden om grundlæggende arabiske ord og udtryk</p>
        </div>

        {!quizCompleted ? (
          <div className="mx-auto max-w-3xl">
            <div className="mb-6">
              <div className="mb-2 flex items-center justify-between">
                <div className="text-sm">
                  Spørgsmål {currentQuestionIndex + 1} af {quizQuestions.length}
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">Sværhedsgrad:</span>
                  <span className={`text-sm font-medium ${getDifficultyColor()}`}>
                    {difficulty < 30 ? "Let" : difficulty < 70 ? "Mellem" : "Svær"}
                  </span>
                </div>
              </div>
              <Progress value={progress} className="h-2 bg-emerald-100" />
            </div>

            <Card className="mb-6">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <CardTitle className="text-xl">{currentQuestion.question}</CardTitle>
                  <Badge variant="outline" className="ml-2">
                    {difficulty < 30 ? "1" : difficulty < 70 ? "2" : "3"} point
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <RadioGroup value={selectedAnswer} className="space-y-3">
                  {currentQuestion.options.map((option, index) => (
                    <div
                      key={index}
                      className={`flex cursor-pointer items-center space-x-2 rounded-lg border p-4 transition-colors ${
                        isAnswerSubmitted && option === currentQuestion.correctAnswer
                          ? "border-green-500 bg-green-50 dark:border-green-700 dark:bg-green-900/20"
                          : isAnswerSubmitted && option === selectedAnswer && option !== currentQuestion.correctAnswer
                            ? "border-red-500 bg-red-50 dark:border-red-700 dark:bg-red-900/20"
                            : selectedAnswer === option
                              ? "border-emerald-200 bg-emerald-50 dark:border-emerald-700 dark:bg-emerald-900/20"
                              : ""
                      }`}
                      onClick={() => handleAnswerSelect(option)}
                    >
                      <RadioGroupItem value={option} id={`option-${index}`} disabled={isAnswerSubmitted} />
                      <Label
                        htmlFor={`option-${index}`}
                        className="flex flex-1 cursor-pointer items-center justify-between"
                      >
                        {option}
                        {isAnswerSubmitted && option === currentQuestion.correctAnswer && (
                          <CheckCircle className="h-5 w-5 text-green-500" />
                        )}
                        {isAnswerSubmitted && option === selectedAnswer && option !== currentQuestion.correctAnswer && (
                          <XCircle className="h-5 w-5 text-red-500" />
                        )}
                      </Label>
                    </div>
                  ))}
                </RadioGroup>

                {isAnswerSubmitted && (
                  <div
                    className={`mt-4 rounded-lg p-4 ${
                      selectedAnswer === currentQuestion.correctAnswer
                        ? "bg-green-50 text-green-800 dark:bg-green-900/20 dark:text-green-300"
                        : "bg-red-50 text-red-800 dark:bg-red-900/20 dark:text-red-300"
                    }`}
                  >
                    <div className="flex items-start gap-2">
                      {selectedAnswer === currentQuestion.correctAnswer ? (
                        <CheckCircle className="mt-0.5 h-5 w-5 flex-shrink-0" />
                      ) : (
                        <XCircle className="mt-0.5 h-5 w-5 flex-shrink-0" />
                      )}
                      <div>
                        <p className="font-medium">
                          {selectedAnswer === currentQuestion.correctAnswer ? "Korrekt!" : "Ikke korrekt"}
                        </p>
                        <p className="mt-1 text-sm">
                          {selectedAnswer === currentQuestion.correctAnswer
                            ? "Godt klaret! Du har forstået konceptet."
                            : `Det korrekte svar er: ${currentQuestion.correctAnswer}`}
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-between">
                <div className="flex items-center gap-2">
                  <div className="flex items-center gap-1 rounded-full bg-emerald-100 px-3 py-1 text-emerald-800 dark:bg-emerald-900/50 dark:text-emerald-300">
                    <Timer className="h-4 w-4" />
                    <span className="text-xs font-medium">{formatTime(timeRemaining)}</span>
                  </div>
                </div>
                <Button onClick={handleSubmitAnswer} disabled={!selectedAnswer && !isAnswerSubmitted}>
                  {isAnswerSubmitted ? (
                    <>
                      Næste
                      <ChevronRight className="ml-2 h-4 w-4" />
                    </>
                  ) : (
                    "Svar"
                  )}
                </Button>
              </CardFooter>
            </Card>

            <div className="flex items-center justify-between rounded-lg border bg-card p-4 shadow-sm">
              <div className="flex items-center gap-2">
                <HelpCircle className="h-5 w-5 text-emerald-500" />
                <span className="text-sm font-medium">Brug for hjælp?</span>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <BookOpen className="mr-2 h-4 w-4" />
                  Se Materiale
                </Button>
                <Button size="sm" onClick={() => setShowAIExplain(true)}>
                  <Lightbulb className="mr-2 h-4 w-4" />
                  Få Hint
                </Button>
              </div>
            </div>

            {showAIExplain && (
              <AIExplainOverlay explanation={currentQuestion.explanation} onClose={() => setShowAIExplain(false)} />
            )}
          </div>
        ) : (
          <div className="mx-auto max-w-3xl">
            <Card>
              <CardHeader>
                <CardTitle className="text-center text-2xl">Quiz Fuldført!</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex flex-col items-center justify-center">
                  <div className="mb-4 flex h-32 w-32 items-center justify-center rounded-full bg-emerald-100 text-4xl font-bold text-emerald-700 dark:bg-emerald-900/50 dark:text-emerald-300">
                    {score}/{quizQuestions.length}
                  </div>
                  <h3 className="text-xl font-semibold">
                    {score === quizQuestions.length
                      ? "Perfekt Score!"
                      : score >= quizQuestions.length * 0.7
                        ? "Godt Klaret!"
                        : "Fortsæt Det Gode Arbejde!"}
                  </h3>
                  <p className="mt-1 text-center text-muted-foreground">
                    {score === quizQuestions.length
                      ? "Du har mestret det grundlæggende arabiske ordforråd!"
                      : score >= quizQuestions.length * 0.7
                        ? "Du har en god forståelse af arabiske ord."
                        : "Med mere øvelse vil du mestre det arabiske ordforråd."}
                  </p>
                </div>

                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="rounded-lg border p-4">
                    <h3 className="mb-2 font-medium">Du har optjent</h3>
                    <div className="flex items-center gap-2">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-emerald-400 to-emerald-600 text-white">
                        <span className="font-bold">{score * 25}</span>
                      </div>
                      <div>
                        <p className="font-medium">XP Points</p>
                        <p className="text-xs text-muted-foreground">+{score * 5} streak bonus</p>
                      </div>
                    </div>
                  </div>
                  <div className="rounded-lg border p-4">
                    <h3 className="mb-2 font-medium">Næste Badge</h3>
                    <div className="flex items-center gap-2">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-amber-400 to-amber-600 p-2 text-white">
                        <BookOpen className="h-5 w-5" />
                      </div>
                      <div>
                        <p className="font-medium">Ordforråd Mester</p>
                        <p className="text-xs text-muted-foreground">2 af 3 quizzer fuldført</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline">Se Dine Svar</Button>
                <Button className="bg-emerald-700 hover:bg-emerald-800">Fortsæt Læring</Button>
              </CardFooter>
            </Card>
          </div>
        )}
      </main>

      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; 2025 أتعلم العربية (Ata'allam al-Arabiya). Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">
              Om os
            </Link>
            <Link href="/contact" className="hover:underline">
              Kontakt
            </Link>
            <Link href="/privacy" className="hover:underline">
              Privatlivspolitik
            </Link>
            <Link href="/terms" className="hover:underline">
              Vilkår
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/profile/page.tsx">
import Link from "next/link"

import { MainNav } from "@/components/main-nav"
import { UserNav } from "@/components/user-nav"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Settings } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { BookOpen, ChevronRight, Trophy, Star, Award, Calendar, Clock, Check, ArrowUpRight } from "lucide-react"
import { LevelProgressRing } from "@/components/level-progress-ring"

export default function ProfilePage() {
  return (
    <div className="flex min-h-screen flex-col">
      <header className="container z-40 bg-background">
        <div className="flex h-20 items-center justify-between py-6">
          <div className="flex items-center gap-4">
            <Link href="/" className="hidden items-center space-x-2 md:flex">
              <span className="text-lg font-bold">أتعلم العربية</span>
              <span className="text-lg font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
            </Link>
            <MainNav />
          </div>
          <UserNav />
        </div>
      </header>

      <main className="container flex-1 py-10">
        <div className="mb-8">
          <h1 className="text-3xl font-bold tracking-tight">Min Profil</h1>
          <p className="text-muted-foreground">Administrer din konto og se din fremgang</p>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          <div className="md:col-span-2">
            <Card className="mb-6">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4">
                    <Avatar className="h-16 w-16">
                      <AvatarFallback className="bg-emerald-100 text-emerald-700 text-xl dark:bg-emerald-900 dark:text-emerald-300">
                        AB
                      </AvatarFallback>
                    </Avatar>
                    <div>
                      <CardTitle className="text-2xl">Ahmed Bakir</CardTitle>
                      <CardDescription>Medlem siden januar 2025</CardDescription>
                    </div>
                  </div>
                  <Button variant="outline" size="sm">
                    <Settings className="mr-2 h-4 w-4" />
                    Rediger Profil
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="mt-4 flex flex-wrap gap-2">
                  <Badge
                    variant="outline"
                    className="bg-emerald-50 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-300"
                  >
                    Begynder
                  </Badge>
                  <Badge variant="outline" className="bg-blue-50 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300">
                    5-dages Streak
                  </Badge>
                  <Badge
                    variant="outline"
                    className="bg-purple-50 text-purple-700 dark:bg-purple-900/30 dark:text-purple-300"
                  >
                    Alfabet Mester
                  </Badge>
                </div>
              </CardContent>
            </Card>

            <Tabs defaultValue="progress" className="mb-6">
              <TabsList>
                <TabsTrigger value="progress">Fremgang</TabsTrigger>
                <TabsTrigger value="achievements">Præstationer</TabsTrigger>
                <TabsTrigger value="activity">Aktivitet</TabsTrigger>
              </TabsList>
              <TabsContent value="progress" className="mt-6">
                <div className="space-y-6">
                  <Card>
                    <CardHeader>
                      <CardTitle>Læringsrejse</CardTitle>
                      <CardDescription>Din fremgang i arabisk læring</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div>
                          <div className="mb-1 flex items-center justify-between text-sm">
                            <span>Arabisk Alfabet</span>
                            <span className="text-muted-foreground">12/28 bogstaver</span>
                          </div>
                          <Progress value={42.8} className="h-2" />
                        </div>
                        <div>
                          <div className="mb-1 flex items-center justify-between text-sm">
                            <span>Grundlæggende Ordforråd</span>
                            <span className="text-muted-foreground">45/100 ord</span>
                          </div>
                          <Progress value={45} className="h-2" />
                        </div>
                        <div>
                          <div className="mb-1 flex items-center justify-between text-sm">
                            <span>Quran Ordforråd</span>
                            <span className="text-muted-foreground">15/200 ord</span>
                          </div>
                          <Progress value={7.5} className="h-2" />
                        </div>
                        <div>
                          <div className="mb-1 flex items-center justify-between text-sm">
                            <span>Grammatik</span>
                            <span className="text-muted-foreground">3/20 lektioner</span>
                          </div>
                          <Progress value={15} className="h-2" />
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <div className="grid gap-6 md:grid-cols-2">
                    <Card>
                      <CardHeader>
                        <CardTitle>Nyligt Gennemførte</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          <div className="flex items-center gap-4">
                            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                              <BookOpen className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <p className="font-medium">Arabisk Alfabet - Lektion 4</p>
                              <p className="text-sm text-muted-foreground">Gennemført for 2 dage siden</p>
                            </div>
                            <Button variant="ghost" size="icon">
                              <ChevronRight className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                              <BookOpen className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <p className="font-medium">Grundlæggende Ordforråd - Lektion 2</p>
                              <p className="text-sm text-muted-foreground">Gennemført for 3 dage siden</p>
                            </div>
                            <Button variant="ghost" size="icon">
                              <ChevronRight className="h-4 w-4" />
                            </Button>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                              <BookOpen className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <p className="font-medium">Surah Al-Fatiha - Introduktion</p>
                              <p className="text-sm text-muted-foreground">Gennemført for 5 dage siden</p>
                            </div>
                            <Button variant="ghost" size="icon">
                              <ChevronRight className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>

                    <Card>
                      <CardHeader>
                        <CardTitle>Næste Skridt</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          <div className="flex items-center gap-4">
                            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                              <BookOpen className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <p className="font-medium">Arabisk Alfabet - Lektion 5</p>
                              <p className="text-sm text-muted-foreground">Lær bogstaverne ش til ع</p>
                            </div>
                            <Button size="sm">Start</Button>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                              <BookOpen className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <p className="font-medium">Grundlæggende Ordforråd - Lektion 3</p>
                              <p className="text-sm text-muted-foreground">Lær 10 nye ord</p>
                            </div>
                            <Button size="sm">Start</Button>
                          </div>
                          <div className="flex items-center gap-4">
                            <div className="flex h-10 w-10 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                              <BookOpen className="h-5 w-5" />
                            </div>
                            <div className="flex-1">
                              <p className="font-medium">Grammatik - Lektion 1</p>
                              <p className="text-sm text-muted-foreground">Introduktion til arabisk grammatik</p>
                            </div>
                            <Button size="sm">Start</Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              </TabsContent>
              <TabsContent value="achievements" className="mt-6">
                <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="flex items-center gap-2">
                        <Trophy className="h-5 w-5 text-amber-500" />
                        <span>Alfabet Mester</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">Lær alle 28 bogstaver i det arabiske alfabet</p>
                      <div className="mt-4">
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Fremgang</span>
                          <span className="text-muted-foreground">12/28</span>
                        </div>
                        <Progress value={42.8} className="h-2" />
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="flex items-center gap-2">
                        <Star className="h-5 w-5 text-amber-500" />
                        <span>Ordforråd Samler</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">Lær 100 grundlæggende arabiske ord</p>
                      <div className="mt-4">
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Fremgang</span>
                          <span className="text-muted-foreground">45/100</span>
                        </div>
                        <Progress value={45} className="h-2" />
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="flex items-center gap-2">
                        <Award className="h-5 w-5 text-amber-500" />
                        <span>Quran Begynder</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">Gennemfør studiet af Surah Al-Fatiha</p>
                      <div className="mt-4">
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Fremgang</span>
                          <span className="text-muted-foreground">3/7 vers</span>
                        </div>
                        <Progress value={42.8} className="h-2" />
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="flex items-center gap-2">
                        <Calendar className="h-5 w-5 text-amber-500" />
                        <span>Dedikeret Elev</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">Log ind og lær 7 dage i træk</p>
                      <div className="mt-4">
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Fremgang</span>
                          <span className="text-muted-foreground">5/7 dage</span>
                        </div>
                        <Progress value={71.4} className="h-2" />
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="flex items-center gap-2">
                        <Clock className="h-5 w-5 text-amber-500" />
                        <span>Tidlig Fugl</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">Gennemfør 5 lektioner før kl. 9 om morgenen</p>
                      <div className="mt-4">
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Fremgang</span>
                          <span className="text-muted-foreground">2/5 lektioner</span>
                        </div>
                        <Progress value={40} className="h-2" />
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardHeader className="pb-2">
                      <CardTitle className="flex items-center gap-2">
                        <Trophy className="h-5 w-5 text-gray-400" />
                        <span className="text-muted-foreground">Grammatik Guru</span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">Gennemfør alle grundlæggende grammatiklektioner</p>
                      <div className="mt-4">
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Fremgang</span>
                          <span className="text-muted-foreground">3/20 lektioner</span>
                        </div>
                        <Progress value={15} className="h-2" />
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
              <TabsContent value="activity" className="mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Nylig Aktivitet</CardTitle>
                    <CardDescription>Din læringsaktivitet fra de sidste 30 dage</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-6">
                      <div className="flex items-center gap-4">
                        <div className="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                          <BookOpen className="h-5 w-5" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <p className="font-medium">Gennemførte Arabisk Alfabet - Lektion 4</p>
                            <p className="text-sm text-muted-foreground">2 dage siden</p>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            Du lærte 3 nye bogstaver og bestod quizzen med 100%
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="flex h-10 w-10 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                          <Trophy className="h-5 w-5" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <p className="font-medium">Optjente præstationen "5-dages Streak"</p>
                            <p className="text-sm text-muted-foreground">2 dage siden</p>
                          </div>
                          <p className="text-sm text-muted-foreground">Du har logget ind og lært 5 dage i træk</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                          <BookOpen className="h-5 w-5" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <p className="font-medium">Gennemførte Grundlæggende Ordforråd - Lektion 2</p>
                            <p className="text-sm text-muted-foreground">3 dage siden</p>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            Du lærte 10 nye ord og øvede dem med flashcards
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="flex h-10 w-10 items-center justify-center rounded-full bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300">
                          <Award className="h-5 w-5" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <p className="font-medium">Optjente 150 XP</p>
                            <p className="text-sm text-muted-foreground">4 dage siden</p>
                          </div>
                          <p className="text-sm text-muted-foreground">Du gennemførte 3 lektioner på én dag</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <div className="flex h-10 w-10 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                          <BookOpen className="h-5 w-5" />
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <p className="font-medium">Gennemførte Surah Al-Fatiha - Introduktion</p>
                            <p className="text-sm text-muted-foreground">5 dage siden</p>
                          </div>
                          <p className="text-sm text-muted-foreground">Du lærte om Surah Al-Fatiha og dens betydning</p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" className="w-full">
                      <ArrowUpRight className="mr-2 h-4 w-4" />
                      Se Fuld Aktivitetshistorik
                    </Button>
                  </CardFooter>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Dit Niveau</CardTitle>
              </CardHeader>
              <CardContent className="flex flex-col items-center">
                <LevelProgressRing level={2} progress={65} />
                <div className="mt-4 text-center">
                  <p className="text-sm text-muted-foreground">Du er 35% fra niveau 3</p>
                  <p className="mt-1 text-sm text-muted-foreground">Gennemfør flere lektioner for at stige i niveau</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Streak</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-center gap-2">
                  <div className="flex h-16 w-16 items-center justify-center rounded-full bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-300">
                    <div className="text-center">
                      <div className="text-2xl font-bold">5</div>
                      <div className="text-xs">dage</div>
                    </div>
                  </div>
                  <div>
                    <p className="font-medium">Nuværende streak</p>
                    <p className="text-sm text-muted-foreground">Kom tilbage i morgen for at fortsætte din streak!</p>
                  </div>
                </div>
                <div className="mt-4 grid grid-cols-7 gap-1">
                  {["M", "T", "O", "T", "F", "L", "S"].map((day, i) => (
                    <div key={i} className="text-center text-xs font-medium">
                      {day}
                    </div>
                  ))}
                  {[true, true, true, true, true, false, false].map((active, i) => (
                    <div
                      key={i}
                      className={`flex h-8 items-center justify-center rounded-full ${
                        active
                          ? "bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-300"
                          : "bg-muted text-muted-foreground"
                      }`}
                    >
                      {active ? <Check className="h-4 w-4" /> : ""}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>XP Optjent</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-2xl font-bold">1,245</div>
                    <p className="text-sm text-muted-foreground">Total XP</p>
                  </div>
                  <div>
                    <div className="text-2xl font-bold">150</div>
                    <p className="text-sm text-muted-foreground">Denne uge</p>
                  </div>
                </div>
                <div className="mt-4">
                  <div className="mb-1 flex items-center justify-between text-sm">
                    <span>Næste niveau</span>
                    <span className="text-muted-foreground">1,245 / 2,000 XP</span>
                  </div>
                  <Progress value={62.25} className="h-2" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-2">
                <CardTitle>Statistik</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Lektioner gennemført</span>
                    <span className="font-medium">24</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Quiz gennemført</span>
                    <span className="font-medium">12</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Ord lært</span>
                    <span className="font-medium">45</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Bogstaver mestret</span>
                    <span className="font-medium">12</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Præstationer optjent</span>
                    <span className="font-medium">3</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; 2025 أتعلم العربية (Ata'allam al-Arabiya). Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">
              Om os
            </Link>
            <Link href="/contact" className="hover:underline">
              Kontakt
            </Link>
            <Link href="/privacy" className="hover:underline">
              Privatlivspolitik
            </Link>
            <Link href="/terms" className="hover:underline">
              Vilkår
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/pronunciation/page.tsx">
"use client"

import { useState, useRef } from "react"
import Link from "next/link"
import { ArrowLeft, BookOpen, Mic, Play, Volume2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MainNav } from "@/components/main-nav"
import { UserNav } from "@/components/user-nav"

export default function PronunciationPage() {
  const [isRecording, setIsRecording] = useState(false)
  const [recordingComplete, setRecordingComplete] = useState(false)
  const [feedback, setFeedback] = useState<null | {
    accuracy: number
    feedback: string
  }>(null)
  const [selectedLetter, setSelectedLetter] = useState("ا")
  const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  const letters = [
    { letter: "ا", name: "Alif", sound: "a/i/u" },
    { letter: "ب", name: "Ba", sound: "b" },
    { letter: "ت", name: "Ta", sound: "t" },
    { letter: "ث", name: "Tha", sound: "th" },
    { letter: "ج", name: "Jim", sound: "j" },
    { letter: "ح", name: "Ha", sound: "ḥ" },
    { letter: "خ", name: "Kha", sound: "kh" },
    { letter: "د", name: "Dal", sound: "d" },
  ]

  const words = [
    { word: "كِتَاب", transliteration: "kitāb", meaning: "bog" },
    { word: "قَلَم", transliteration: "qalam", meaning: "pen" },
    { word: "بَيْت", transliteration: "bayt", meaning: "hus" },
    { word: "مَدْرَسَة", transliteration: "madrasa", meaning: "skole" },
  ]

  const phrases = [
    { phrase: "السَّلَامُ عَلَيْكُمْ", transliteration: "as-salāmu ʿalaykum", meaning: "Fred være med dig" },
    { phrase: "كَيْفَ حَالُكَ", transliteration: "kayfa ḥāluka", meaning: "Hvordan har du det?" },
    { phrase: "شُكْرًا", transliteration: "shukran", meaning: "Tak" },
    { phrase: "مَا اسْمُكَ", transliteration: "mā ismuka", meaning: "Hvad hedder du?" },
  ]

  const playAudio = () => {
    // I en rigtig app ville dette afspille en lydfil
    console.log(`Afspiller lyd for: ${selectedLetter}`)
  }

  const startRecording = () => {
    setIsRecording(true)
    setRecordingComplete(false)
    setFeedback(null)

    // Simuler optagelse i 3 sekunder
    recordingTimeoutRef.current = setTimeout(() => {
      setIsRecording(false)
      setRecordingComplete(true)

      // Simuler feedback (i en rigtig app ville dette komme fra en API)
      const randomAccuracy = Math.floor(Math.random() * 40) + 60 // 60-99%
      setFeedback({
        accuracy: randomAccuracy,
        feedback:
          randomAccuracy > 85
            ? "Fremragende udtale! Din udtale er meget præcis."
            : randomAccuracy > 70
              ? "God udtale! Prøv at fokusere lidt mere på lydenes længde."
              : "Ikke dårligt! Prøv at lytte til eksemplet igen og fokuser på at efterligne lyden.",
      })
    }, 3000)
  }

  const stopRecording = () => {
    if (recordingTimeoutRef.current) {
      clearTimeout(recordingTimeoutRef.current)
    }
    setIsRecording(false)
  }

  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <header className="sticky top-0 z-40 border-b bg-white/80 backdrop-blur-sm dark:bg-gray-950/80">
        <div className="container flex h-16 items-center justify-between py-4">
          <div className="flex items-center gap-6">
            <Link href="/" className="flex items-center gap-2">
              <BookOpen className="h-6 w-6 text-emerald-600 dark:text-emerald-400" />
              <span className="text-lg font-bold">أتعلم العربية</span>
              <span className="text-lg font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
            </Link>
            <MainNav />
          </div>
          <UserNav />
        </div>
      </header>

      <main className="container flex-1 py-10">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2">
            <Link href="/">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Dashboard
            </Link>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">Udtaleøvelser</h1>
          <p className="text-muted-foreground">Øv din arabiske udtale med interaktive øvelser</p>
        </div>

        <Tabs defaultValue="letters" className="mb-8">
          <TabsList>
            <TabsTrigger value="letters">Bogstaver</TabsTrigger>
            <TabsTrigger value="words">Ord</TabsTrigger>
            <TabsTrigger value="phrases">Sætninger</TabsTrigger>
          </TabsList>
          <TabsContent value="letters" className="mt-6">
            <div className="grid gap-6 md:grid-cols-3">
              <div className="md:col-span-2">
                <Card className="mb-6">
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <span>Udtaleøvelse: {selectedLetter}</span>
                      <Button variant="ghost" size="sm" onClick={playAudio} className="gap-1">
                        <Volume2 className="h-4 w-4" />
                        <span className="text-xs">Lyt til Udtale</span>
                      </Button>
                    </CardTitle>
                    <CardDescription>Lyt til udtalen og øv dig ved at gentage lyden</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="mb-6 flex flex-col items-center justify-center">
                      <div className="mb-4 flex h-32 w-32 items-center justify-center rounded-full bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200">
                        <span className="font-arabic text-6xl">{selectedLetter}</span>
                      </div>
                      <div className="text-center">
                        <p className="text-lg font-medium">{letters.find((l) => l.letter === selectedLetter)?.name}</p>
                        <p className="text-muted-foreground">
                          Udtales som "{letters.find((l) => l.letter === selectedLetter)?.sound}"
                        </p>
                      </div>
                    </div>

                    <div className="mt-6 flex flex-col items-center">
                      <Button
                        size="lg"
                        className={`h-16 w-16 rounded-full ${
                          isRecording ? "bg-red-500 hover:bg-red-600" : "bg-emerald-700 hover:bg-emerald-800"
                        }`}
                        onClick={isRecording ? stopRecording : startRecording}
                      >
                        <Mic className={`h-6 w-6 ${isRecording ? "animate-pulse" : ""}`} />
                      </Button>
                      <p className="mt-2 text-sm text-muted-foreground">
                        {isRecording
                          ? "Optager... Tryk for at stoppe"
                          : recordingComplete
                            ? "Optagelse færdig"
                            : "Tryk for at optage din udtale"}
                      </p>
                    </div>

                    {feedback && (
                      <div className="mt-6 rounded-lg border p-4">
                        <h3 className="mb-2 font-medium">Feedback på din udtale</h3>
                        <div className="mb-4">
                          <div className="mb-1 flex items-center justify-between text-sm">
                            <span>Nøjagtighed</span>
                            <span>{feedback.accuracy}%</span>
                          </div>
                          <Progress
                            value={feedback.accuracy}
                            className="h-2"
                            indicatorClassName={
                              feedback.accuracy > 85
                                ? "bg-green-500"
                                : feedback.accuracy > 70
                                  ? "bg-yellow-500"
                                  : "bg-orange-500"
                            }
                          />
                        </div>
                        <p className="text-sm text-muted-foreground">{feedback.feedback}</p>
                      </div>
                    )}
                  </CardContent>
                  <CardFooter className="flex justify-between">
                    <Button variant="outline" onClick={playAudio}>
                      <Play className="mr-2 h-4 w-4" />
                      Afspil Igen
                    </Button>
                    <Button onClick={startRecording} disabled={isRecording}>
                      <Mic className="mr-2 h-4 w-4" />
                      Optag Igen
                    </Button>
                  </CardFooter>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Udtaletips</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ul className="list-inside list-disc space-y-2 text-muted-foreground">
                      <li>Lyt omhyggeligt til eksemplet før du forsøger at gentage det</li>
                      <li>Vær opmærksom på hvor i munden lyden dannes (læber, tunge, hals)</li>
                      <li>Øv dig i at skelne mellem lignende lyde som ح (ha) og خ (kha)</li>
                      <li>Optag og lyt til din egen udtale for at identificere områder, der kan forbedres</li>
                      <li>Øv regelmæssigt - selv korte daglige øvelser kan give store fremskridt over tid</li>
                    </ul>
                  </CardContent>
                </Card>
              </div>

              <div>
                <Card>
                  <CardHeader>
                    <CardTitle>Vælg et Bogstav</CardTitle>
                    <CardDescription>Klik på et bogstav for at øve dets udtale</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-4 gap-2">
                      {letters.map((letter) => (
                        <Button
                          key={letter.letter}
                          variant={selectedLetter === letter.letter ? "default" : "outline"}
                          className={`h-12 font-arabic text-lg ${
                            selectedLetter === letter.letter ? "bg-emerald-700 hover:bg-emerald-800" : ""
                          }`}
                          onClick={() => {
                            setSelectedLetter(letter.letter)
                            setFeedback(null)
                            setRecordingComplete(false)
                          }}
                        >
                          {letter.letter}
                        </Button>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card className="mt-6">
                  <CardHeader>
                    <CardTitle>Din Fremgang</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Mestrede Bogstaver</span>
                          <span className="text-muted-foreground">5/28</span>
                        </div>
                        <Progress value={(5 / 28) * 100} className="h-2" />
                      </div>
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Øvede Bogstaver</span>
                          <span className="text-muted-foreground">12/28</span>
                        </div>
                        <Progress value={(12 / 28) * 100} className="h-2" />
                      </div>
                      <div>
                        <div className="mb-1 flex items-center justify-between text-sm">
                          <span>Gennemsnitlig Nøjagtighed</span>
                          <span className="text-muted-foreground">78%</span>
                        </div>
                        <Progress value={78} className="h-2" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="words" className="mt-6">
            <div className="grid gap-6 md:grid-cols-3">
              <div className="md:col-span-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Ordudtale</CardTitle>
                    <CardDescription>Øv udtalen af hele arabiske ord</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {words.map((word, index) => (
                        <div key={index} className="flex items-center justify-between rounded-lg border p-4">
                          <div>
                            <p className="font-arabic text-2xl" dir="rtl">
                              {word.word}
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {word.transliteration} - {word.meaning}
                            </p>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                              <Volume2 className="mr-2 h-4 w-4" />
                              Lyt
                            </Button>
                            <Button size="sm">
                              <Mic className="mr-2 h-4 w-4" />
                              Øv
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Ordforråd Fremgang</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="mb-1 flex items-center justify-between text-sm">
                        <span>Mestrede Ord</span>
                        <span className="text-muted-foreground">12/100</span>
                      </div>
                      <Progress value={12} className="h-2" />
                    </div>
                    <div>
                      <div className="mb-1 flex items-center justify-between text-sm">
                        <span>Øvede Ord</span>
                        <span className="text-muted-foreground">45/100</span>
                      </div>
                      <Progress value={45} className="h-2" />
                    </div>
                    <div>
                      <div className="mb-1 flex items-center justify-between text-sm">
                        <span>Gennemsnitlig Nøjagtighed</span>
                        <span className="text-muted-foreground">82%</span>
                      </div>
                      <Progress value={82} className="h-2" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="phrases" className="mt-6">
            <div className="grid gap-6 md:grid-cols-3">
              <div className="md:col-span-2">
                <Card>
                  <CardHeader>
                    <CardTitle>Sætningsudtale</CardTitle>
                    <CardDescription>Øv udtalen af arabiske sætninger og fraser</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {phrases.map((phrase, index) => (
                        <div key={index} className="flex items-center justify-between rounded-lg border p-4">
                          <div>
                            <p className="font-arabic text-xl" dir="rtl">
                              {phrase.phrase}
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {phrase.transliteration} - {phrase.meaning}
                            </p>
                          </div>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm">
                              <Volume2 className="mr-2 h-4 w-4" />
                              Lyt
                            </Button>
                            <Button size="sm">
                              <Mic className="mr-2 h-4 w-4" />
                              Øv
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Sætnings Fremgang</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="mb-1 flex items-center justify-between text-sm">
                        <span>Mestrede Sætninger</span>
                        <span className="text-muted-foreground">5/50</span>
                      </div>
                      <Progress value={10} className="h-2" />
                    </div>
                    <div>
                      <div className="mb-1 flex items-center justify-between text-sm">
                        <span>Øvede Sætninger</span>
                        <span className="text-muted-foreground">15/50</span>
                      </div>
                      <Progress value={30} className="h-2" />
                    </div>
                    <div>
                      <div className="mb-1 flex items-center justify-between text-sm">
                        <span>Gennemsnitlig Nøjagtighed</span>
                        <span className="text-muted-foreground">75%</span>
                      </div>
                      <Progress value={75} className="h-2" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </main>

      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; 2025 أتعلم العربية (Ata'allam al-Arabiya). Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">
              Om os
            </Link>
            <Link href="/contact" className="hover:underline">
              Kontakt
            </Link>
            <Link href="/privacy" className="hover:underline">
              Privatlivspolitik
            </Link>
            <Link href="/terms" className="hover:underline">
              Vilkår
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/quiz/page.tsx">
"use client"

import { useState } from "react"
import { ArrowLeft, ArrowRight, BookOpen, CheckCircle, HelpCircle, Lightbulb, XCircle } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Separator } from "@/components/ui/separator"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { AIExplainOverlay } from "@/components/ai-explain-overlay"

export default function QuizPage() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [selectedAnswer, setSelectedAnswer] = useState("")
  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false)
  const [showAIExplain, setShowAIExplain] = useState(false)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [score, setScore] = useState(0)
  const [difficulty, setDifficulty] = useState(50) // 0-100 scale

  const quizQuestions = [
    {
      question: "Hvilken metode bruges til at vælge specifikke kolonner i en Pandas DataFrame?",
      options: [
        "df.select(['kolonne1', 'kolonne2'])",
        "df[['kolonne1', 'kolonne2']]",
        "df.columns(['kolonne1', 'kolonne2'])",
        "df.get_columns('kolonne1', 'kolonne2')",
      ],
      correctAnswer: "df[['kolonne1', 'kolonne2']]",
      explanation:
        "I Pandas bruges dobbelte firkantede parenteser df[['kolonne1', 'kolonne2']] til at vælge flere specifikke kolonner. Den ydre parentes er DataFrame-indekseringsoperatoren, og den indre liste definerer kolonnerne, der skal vælges.",
    },
    {
      question: "Hvordan filtrerer man rækker i en DataFrame baseret på en betingelse?",
      options: [
        "df.filter(df['kolonne'] > 10)",
        "df.where(df['kolonne'] > 10)",
        "df[df['kolonne'] > 10]",
        "df.query('kolonne > 10')",
      ],
      correctAnswer: "df[df['kolonne'] > 10]",
      explanation:
        "For at filtrere rækker baseret på en betingelse, bruges boolean indexing: df[df['kolonne'] > 10]. Dette returnerer alle rækker, hvor værdien i 'kolonne' er større end 10. Bemærk at df.query('kolonne > 10') også er en gyldig metode, men den første er mere almindelig.",
    },
    {
      question: "Hvilken funktion bruges til at håndtere manglende værdier i en DataFrame?",
      options: ["df.handle_missing()", "df.dropna()", "df.fillna(0)", "Både B og C er korrekte"],
      correctAnswer: "Både B og C er korrekte",
      explanation:
        "Både dropna() og fillna() bruges til at håndtere manglende værdier. dropna() fjerner rækker eller kolonner med manglende værdier, mens fillna() erstatter manglende værdier med en specificeret værdi (f.eks. 0).",
    },
    {
      question: "Hvordan beregner man gennemsnittet af en numerisk kolonne i en DataFrame?",
      options: [
        "df['kolonne'].mean()",
        "df['kolonne'].average()",
        "df.mean('kolonne')",
        "df.calculate_mean('kolonne')",
      ],
      correctAnswer: "df['kolonne'].mean()",
      explanation:
        "For at beregne gennemsnittet af en kolonne, bruges mean() metoden på kolonnen: df['kolonne'].mean(). Dette er en del af Pandas' deskriptive statistikfunktioner.",
    },
    {
      question: "Hvilken metode bruges til at gruppere data i en DataFrame?",
      options: ["df.categorize()", "df.segment()", "df.groupby()", "df.cluster()"],
      correctAnswer: "df.groupby()",
      explanation:
        "groupby() metoden bruges til at gruppere DataFrame-data baseret på værdier i en eller flere kolonner. Dette muliggør aggregeringsoperationer som sum(), mean(), count() osv. på hver gruppe.",
    },
  ]

  const currentQuestion = quizQuestions[currentQuestionIndex]
  const progress = ((currentQuestionIndex + (isAnswerSubmitted ? 1 : 0)) / quizQuestions.length) * 100

  const handleAnswerSelect = (answer) => {
    if (!isAnswerSubmitted) {
      setSelectedAnswer(answer)
    }
  }

  const handleSubmitAnswer = () => {
    if (!selectedAnswer) return

    if (!isAnswerSubmitted) {
      const isCorrect = selectedAnswer === currentQuestion.correctAnswer
      if (isCorrect) {
        setScore(score + 1)
        // Increase difficulty slightly for correct answers
        setDifficulty(Math.min(100, difficulty + 5))
      } else {
        // Decrease difficulty for incorrect answers
        setDifficulty(Math.max(0, difficulty - 10))
        setShowAIExplain(true)
      }
      setIsAnswerSubmitted(true)
    } else {
      // Move to next question
      setShowAIExplain(false)
      if (currentQuestionIndex < quizQuestions.length - 1) {
        setCurrentQuestionIndex(currentQuestionIndex + 1)
        setSelectedAnswer("")
        setIsAnswerSubmitted(false)
      } else {
        setQuizCompleted(true)
      }
    }
  }

  const getDifficultyColor = () => {
    if (difficulty < 30) return "text-green-500"
    if (difficulty < 70) return "text-yellow-500"
    return "text-red-500"
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white dark:from-gray-900 dark:to-gray-950">
      <GlassmorphismHeader />

      <main className="container pb-16 pt-24">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2">
            <a href="/kurser/dataanalyse-python/datastrukturer/pandas-dataframe-manipulation">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Emne
            </a>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">Pandas DataFrame Quiz</h1>
          <p className="text-muted-foreground">Test din viden om Pandas DataFrame manipulation</p>
        </div>

        {!quizCompleted ? (
          <div className="mx-auto max-w-3xl">
            <div className="mb-6">
              <div className="mb-2 flex items-center justify-between">
                <div className="text-sm">
                  Spørgsmål {currentQuestionIndex + 1} af {quizQuestions.length}
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">Sværhedsgrad:</span>
                  <span className={`text-sm font-medium ${getDifficultyColor()}`}>
                    {difficulty < 30 ? "Let" : difficulty < 70 ? "Mellem" : "Svær"}
                  </span>
                </div>
              </div>
              <Progress value={progress} className="h-2" />
            </div>

            <Card className="mb-6">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <CardTitle className="text-xl">{currentQuestion.question}</CardTitle>
                  <Badge variant="outline" className="ml-2">
                    {difficulty < 30 ? "1" : difficulty < 70 ? "2" : "3"} point
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <RadioGroup value={selectedAnswer} className="space-y-3">
                  {currentQuestion.options.map((option, index) => (
                    <div
                      key={index}
                      className={`flex cursor-pointer items-center space-x-2 rounded-lg border p-4 transition-colors ${
                        isAnswerSubmitted && option === currentQuestion.correctAnswer
                          ? "border-green-500 bg-green-50 dark:border-green-700 dark:bg-green-900/20"
                          : isAnswerSubmitted && option === selectedAnswer && option !== currentQuestion.correctAnswer
                            ? "border-red-500 bg-red-50 dark:border-red-700 dark:bg-red-900/20"
                            : selectedAnswer === option
                              ? "border-purple-200 bg-purple-50 dark:border-purple-700 dark:bg-purple-900/20"
                              : ""
                      }`}
                      onClick={() => handleAnswerSelect(option)}
                    >
                      <RadioGroupItem value={option} id={`option-${index}`} disabled={isAnswerSubmitted} />
                      <label
                        htmlFor={`option-${index}`}
                        className="flex flex-1 cursor-pointer items-center justify-between"
                      >
                        {option}
                        {isAnswerSubmitted && option === currentQuestion.correctAnswer && (
                          <CheckCircle className="h-5 w-5 text-green-500" />
                        )}
                        {isAnswerSubmitted && option === selectedAnswer && option !== currentQuestion.correctAnswer && (
                          <XCircle className="h-5 w-5 text-red-500" />
                        )}
                      </label>
                    </div>
                  ))}
                </RadioGroup>

                {isAnswerSubmitted && (
                  <div
                    className={`mt-4 rounded-lg p-4 ${
                      selectedAnswer === currentQuestion.correctAnswer
                        ? "bg-green-50 text-green-800 dark:bg-green-900/20 dark:text-green-300"
                        : "bg-red-50 text-red-800 dark:bg-red-900/20 dark:text-red-300"
                    }`}
                  >
                    <div className="flex items-start gap-2">
                      {selectedAnswer === currentQuestion.correctAnswer ? (
                        <CheckCircle className="mt-0.5 h-5 w-5 flex-shrink-0" />
                      ) : (
                        <XCircle className="mt-0.5 h-5 w-5 flex-shrink-0" />
                      )}
                      <div>
                        <p className="font-medium">
                          {selectedAnswer === currentQuestion.correctAnswer ? "Korrekt!" : "Ikke korrekt"}
                        </p>
                        <p className="mt-1 text-sm">
                          {selectedAnswer === currentQuestion.correctAnswer
                            ? "Godt klaret! Du har forstået konceptet."
                            : `Det korrekte svar er: ${currentQuestion.correctAnswer}`}
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button
                  variant="outline"
                  onClick={() => {
                    if (currentQuestionIndex > 0) {
                      setCurrentQuestionIndex(currentQuestionIndex - 1)
                      setSelectedAnswer("")
                      setIsAnswerSubmitted(false)
                      setShowAIExplain(false)
                    }
                  }}
                  disabled={currentQuestionIndex === 0 || isAnswerSubmitted}
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Forrige
                </Button>
                <Button onClick={handleSubmitAnswer} disabled={!selectedAnswer && !isAnswerSubmitted}>
                  {isAnswerSubmitted ? (
                    <>
                      Næste
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </>
                  ) : (
                    "Svar"
                  )}
                </Button>
              </CardFooter>
            </Card>

            <div className="flex items-center justify-between rounded-lg border bg-card p-4 shadow-sm">
              <div className="flex items-center gap-2">
                <HelpCircle className="h-5 w-5 text-purple-500" />
                <span className="text-sm font-medium">Brug for hjælp?</span>
              </div>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <BookOpen className="mr-2 h-4 w-4" />
                  Se Materiale
                </Button>
                <Button size="sm">
                  <Lightbulb className="mr-2 h-4 w-4" />
                  Få Hint
                </Button>
              </div>
            </div>

            {showAIExplain && (
              <AIExplainOverlay explanation={currentQuestion.explanation} onClose={() => setShowAIExplain(false)} />
            )}
          </div>
        ) : (
          <div className="mx-auto max-w-3xl">
            <Card>
              <CardHeader>
                <CardTitle className="text-center text-2xl">Quiz Fuldført!</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex flex-col items-center justify-center">
                  <div className="mb-4 flex h-32 w-32 items-center justify-center rounded-full bg-purple-100 text-4xl font-bold text-purple-700 dark:bg-purple-900/50 dark:text-purple-300">
                    {score}/{quizQuestions.length}
                  </div>
                  <h3 className="text-xl font-semibold">
                    {score === quizQuestions.length
                      ? "Perfekt Score!"
                      : score >= quizQuestions.length * 0.7
                        ? "Godt Klaret!"
                        : "Fortsæt Det Gode Arbejde!"}
                  </h3>
                  <p className="mt-1 text-center text-muted-foreground">
                    {score === quizQuestions.length
                      ? "Du har mestret Pandas DataFrame koncepterne!"
                      : score >= quizQuestions.length * 0.7
                        ? "Du har en god forståelse af Pandas DataFrames."
                        : "Med mere øvelse vil du mestre Pandas DataFrames."}
                  </p>
                </div>

                <Separator />

                <div>
                  <h3 className="mb-3 font-semibold">AI Anbefaling</h3>
                  <div className="rounded-lg bg-purple-50 p-4 dark:bg-purple-900/20">
                    <div className="flex items-start gap-3">
                      <div className="flex h-8 w-8 items-center justify-center rounded-full bg-purple-100 dark:bg-purple-800">
                        <span className="text-xs font-bold text-purple-700 dark:text-purple-300">AI</span>
                      </div>
                      <div>
                        <p className="text-sm text-muted-foreground">
                          {score === quizQuestions.length
                            ? "Fantastisk arbejde! Du er klar til at udforske mere avancerede Pandas funktioner som pivot tables og multi-indexing."
                            : score >= quizQuestions.length * 0.7
                              ? "Du klarer dig godt! Fokuser på at øve filtrering og gruppering af data for at styrke din forståelse yderligere."
                              : "Jeg anbefaler at gennemgå grundlæggende DataFrame operationer igen, især hvordan man vælger og filtrerer data."}
                        </p>
                        <div className="mt-3">
                          <Button size="sm">
                            {score === quizQuestions.length
                              ? "Gå til Avancerede Emner"
                              : score >= quizQuestions.length * 0.7
                                ? "Øv med Praktiske Opgaver"
                                : "Gennemgå Materialet Igen"}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="rounded-lg border p-4">
                    <h3 className="mb-2 font-medium">Du har optjent</h3>
                    <div className="flex items-center gap-2">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-purple-400 to-purple-600 text-white">
                        <span className="font-bold">{score * 25}</span>
                      </div>
                      <div>
                        <p className="font-medium">XP Points</p>
                        <p className="text-xs text-muted-foreground">+{score * 5} streak bonus</p>
                      </div>
                    </div>
                  </div>
                  <div className="rounded-lg border p-4">
                    <h3 className="mb-2 font-medium">Næste Badge</h3>
                    <div className="flex items-center gap-2">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full bg-gradient-to-br from-amber-400 to-amber-600 p-2 text-white">
                        <BookOpen className="h-5 w-5" />
                      </div>
                      <div>
                        <p className="font-medium">Data Analyst</p>
                        <p className="text-xs text-muted-foreground">2 af 3 quizzer fuldført</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline">Se Dine Svar</Button>
                <Button>Fortsæt Læring</Button>
              </CardFooter>
            </Card>
          </div>
        )}
      </main>
    </div>
  )
}
</file>

<file path="app/quiz-system/page.tsx">
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Trophy, Clock, BarChart2, BookOpen } from "lucide-react"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"

// Mock data for quizzes
const quizTypes = [
  { id: "vocabulary", name: "Ordforråd", icon: <BookOpen className="h-4 w-4" /> },
  { id: "grammar", name: "Grammatik", icon: <BookOpen className="h-4 w-4" /> },
  { id: "comprehension", name: "Forståelse", icon: <BookOpen className="h-4 w-4" /> },
  { id: "translation", name: "Oversættelse", icon: <BookOpen className="h-4 w-4" /> },
]

const mockQuizzes = {
  vocabulary: [
    {
      id: 1,
      question: "Hvad betyder كِتَاب?",
      options: ["Bog", "Pen", "Papir", "Bord"],
      correctAnswer: "Bog",
      type: "multiple-choice",
    },
    {
      id: 2,
      question: "Match det arabiske ord med dets betydning:",
      pairs: [
        { arabic: "قَلَم", meaning: "Pen" },
        { arabic: "مَدْرَسَة", meaning: "Skole" },
        { arabic: "بَيْت", meaning: "Hus" },
        { arabic: "مَاء", meaning: "Vand" },
      ],
      type: "matching",
    },
    {
      id: 3,
      question: 'Skriv det arabiske ord for "Dør"',
      correctAnswer: "باب",
      type: "text-input",
    },
  ],
  grammar: [
    {
      id: 1,
      question: "Hvilken type ord er هُوَ?",
      options: ["Pronomen", "Verbum", "Substantiv", "Adjektiv"],
      correctAnswer: "Pronomen",
      type: "multiple-choice",
    },
    {
      id: 2,
      question: 'Udfyld den korrekte form af verbet "at skrive" (كَتَبَ) i sætningen: أنا ____ رِسَالَة',
      options: ["كَتَبَ", "كَتَبْتُ", "يَكْتُبُ", "تَكْتُبُ"],
      correctAnswer: "كَتَبْتُ",
      type: "multiple-choice",
    },
  ],
  comprehension: [
    {
      id: 1,
      question:
        "Læs følgende passage og besvar spørgsmålet: ذَهَبَ مُحَمَّد إِلَى الْمَدْرَسَة. هُوَ طَالِب مُجْتَهِد. يَدْرُسُ كُلَّ يَوْم. Hvor gik Muhammad hen?",
      options: ["Til skolen", "Til markedet", "Til moskeen", "Til huset"],
      correctAnswer: "Til skolen",
      type: "multiple-choice",
    },
  ],
  translation: [
    {
      id: 1,
      question: "Oversæt følgende sætning til dansk: أَنَا أَسْكُنُ فِي الدَنْمَارْك",
      correctAnswer: "Jeg bor i Danmark",
      type: "text-input",
    },
  ],
}

// Quiz component
export default function QuizSystem() {
  const [activeTab, setActiveTab] = useState("vocabulary")
  const [currentQuizIndex, setCurrentQuizIndex] = useState(0)
  const [userAnswers, setUserAnswers] = useState<any>({})
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [score, setScore] = useState(0)
  const [timer, setTimer] = useState(0)
  const [isTimerRunning, setIsTimerRunning] = useState(false)
  const [matchingPairs, setMatchingPairs] = useState<{ [key: string]: string }>({})
  const [textInput, setTextInput] = useState("")

  const currentQuizzes = mockQuizzes[activeTab as keyof typeof mockQuizzes]
  const currentQuiz = currentQuizzes[currentQuizIndex]

  useEffect(() => {
    let interval: NodeJS.Timeout | null = null

    if (isTimerRunning) {
      interval = setInterval(() => {
        setTimer((prev) => prev + 1)
      }, 1000)
    }

    return () => {
      if (interval) clearInterval(interval)
    }
  }, [isTimerRunning])

  useEffect(() => {
    // Reset state when changing quiz type
    setCurrentQuizIndex(0)
    setUserAnswers({})
    setQuizCompleted(false)
    setScore(0)
    setTimer(0)
    setIsTimerRunning(false)
    setMatchingPairs({})
    setTextInput("")
  }, [activeTab])

  const handleStartQuiz = () => {
    setIsTimerRunning(true)
  }

  const handleMultipleChoiceAnswer = (answer: string) => {
    setUserAnswers({
      ...userAnswers,
      [currentQuiz.id]: answer,
    })
  }

  const handleMatchingPair = (arabic: string, meaning: string) => {
    setMatchingPairs({
      ...matchingPairs,
      [arabic]: meaning,
    })
  }

  const handleTextInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setTextInput(e.target.value)
  }

  const handleNextQuestion = () => {
    if (currentQuiz.type === "matching") {
      setUserAnswers({
        ...userAnswers,
        [currentQuiz.id]: matchingPairs,
      })
      setMatchingPairs({})
    } else if (currentQuiz.type === "text-input") {
      setUserAnswers({
        ...userAnswers,
        [currentQuiz.id]: textInput,
      })
      setTextInput("")
    }

    if (currentQuizIndex < currentQuizzes.length - 1) {
      setCurrentQuizIndex(currentQuizIndex + 1)
    } else {
      // Calculate score
      let correctAnswers = 0

      currentQuizzes.forEach((quiz) => {
        if (quiz.type === "multiple-choice" && userAnswers[quiz.id] === quiz.correctAnswer) {
          correctAnswers++
        } else if (quiz.type === "matching") {
          const userPairs = userAnswers[quiz.id] || {}
          const correctPairs = quiz.pairs.filter((pair) => userPairs[pair.arabic] === pair.meaning).length

          if (correctPairs === quiz.pairs.length) {
            correctAnswers++
          }
        } else if (quiz.type === "text-input") {
          // Case insensitive comparison for text input
          const userAnswer = userAnswers[quiz.id] || ""
          if (userAnswer.toLowerCase().trim() === quiz.correctAnswer.toLowerCase().trim()) {
            correctAnswers++
          }
        }
      })

      setScore(correctAnswers)
      setQuizCompleted(true)
      setIsTimerRunning(false)
    }
  }

  const handleRestartQuiz = () => {
    setCurrentQuizIndex(0)
    setUserAnswers({})
    setQuizCompleted(false)
    setScore(0)
    setTimer(0)
    setIsTimerRunning(true)
    setMatchingPairs({})
    setTextInput("")
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  const renderQuizContent = () => {
    if (!isTimerRunning && !quizCompleted) {
      return (
        <div className="flex flex-col items-center justify-center p-8 space-y-6">
          <h2 className="text-2xl font-bold text-center">
            {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Quiz
          </h2>
          <p className="text-center text-gray-600">
            Test din viden om arabisk {activeTab.toLowerCase()} med denne quiz.
          </p>
          <p className="text-center text-gray-600">Quizzen indeholder {currentQuizzes.length} spørgsmål.</p>
          <Button onClick={handleStartQuiz} size="lg">
            Start Quiz
          </Button>
        </div>
      )
    }

    if (quizCompleted) {
      const percentage = Math.round((score / currentQuizzes.length) * 100)

      return (
        <div className="flex flex-col items-center justify-center p-8 space-y-6">
          <div className="flex items-center justify-center w-24 h-24 rounded-full bg-primary/10">
            <Trophy className="w-12 h-12 text-primary" />
          </div>
          <h2 className="text-2xl font-bold text-center">Quiz Afsluttet!</h2>
          <div className="w-full max-w-md">
            <Progress value={percentage} className="h-3" />
            <div className="flex justify-between mt-2 text-sm">
              <span>0%</span>
              <span>{percentage}%</span>
              <span>100%</span>
            </div>
          </div>
          <div className="grid grid-cols-2 gap-4 w-full max-w-md">
            <Card>
              <CardContent className="p-4 flex flex-col items-center">
                <BarChart2 className="w-8 h-8 text-primary mb-2" />
                <p className="text-sm text-gray-500">Score</p>
                <p className="text-xl font-bold">
                  {score}/{currentQuizzes.length}
                </p>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4 flex flex-col items-center">
                <Clock className="w-8 h-8 text-primary mb-2" />
                <p className="text-sm text-gray-500">Tid</p>
                <p className="text-xl font-bold">{formatTime(timer)}</p>
              </CardContent>
            </Card>
          </div>
          <Button onClick={handleRestartQuiz} size="lg">
            Tag Quizzen Igen
          </Button>
        </div>
      )
    }

    return (
      <div className="p-4 space-y-6">
        <div className="flex justify-between items-center">
          <Badge variant="outline" className="px-3 py-1">
            Spørgsmål {currentQuizIndex + 1}/{currentQuizzes.length}
          </Badge>
          <Badge variant="outline" className="px-3 py-1 flex items-center">
            <Clock className="w-4 h-4 mr-1" />
            {formatTime(timer)}
          </Badge>
        </div>

        <div className="space-y-4">
          <h3 className="text-xl font-semibold">{currentQuiz.question}</h3>

          {currentQuiz.type === "multiple-choice" && (
            <RadioGroup
              value={userAnswers[currentQuiz.id] || ""}
              onValueChange={handleMultipleChoiceAnswer}
              className="space-y-3"
            >
              {currentQuiz.options.map((option, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <RadioGroupItem value={option} id={`option-${index}`} />
                  <Label htmlFor={`option-${index}`} className="flex-1 cursor-pointer p-2 hover:bg-gray-100 rounded">
                    {option}
                  </Label>
                </div>
              ))}
            </RadioGroup>
          )}

          {currentQuiz.type === "matching" && (
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <h4 className="font-medium">Arabisk</h4>
                {currentQuiz.pairs.map((pair, index) => (
                  <Card key={index} className="p-2">
                    <div className="text-center text-xl">{pair.arabic}</div>
                  </Card>
                ))}
              </div>
              <div className="space-y-2">
                <h4 className="font-medium">Betydning</h4>
                {currentQuiz.pairs.map((pair, index) => (
                  <div key={index} className="space-y-1">
                    <select
                      className="w-full p-2 border rounded"
                      value={Object.entries(matchingPairs).find(([k]) => k === pair.arabic)?.[1] || ""}
                      onChange={(e) => handleMatchingPair(pair.arabic, e.target.value)}
                    >
                      <option value="">Vælg betydning</option>
                      {currentQuiz.pairs.map((p, i) => (
                        <option key={i} value={p.meaning}>
                          {p.meaning}
                        </option>
                      ))}
                    </select>
                  </div>
                ))}
              </div>
            </div>
          )}

          {currentQuiz.type === "text-input" && (
            <div className="space-y-2">
              <Input
                type="text"
                placeholder="Skriv dit svar her..."
                value={textInput}
                onChange={handleTextInputChange}
                dir={currentQuiz.correctAnswer.match(/[\u0600-\u06FF]/) ? "rtl" : "ltr"}
              />
            </div>
          )}
        </div>

        <Button
          onClick={handleNextQuestion}
          className="w-full"
          disabled={
            (currentQuiz.type === "multiple-choice" && !userAnswers[currentQuiz.id]) ||
            (currentQuiz.type === "matching" && Object.keys(matchingPairs).length !== currentQuiz.pairs.length) ||
            (currentQuiz.type === "text-input" && !textInput)
          }
        >
          {currentQuizIndex < currentQuizzes.length - 1 ? "Næste Spørgsmål" : "Afslut Quiz"}
        </Button>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title="Quiz System"
        description="Test din viden om arabisk med interaktive quizzer"
        imageUrl="/placeholder.svg?height=100&width=100"
      />

      <Tabs defaultValue="vocabulary" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-4 mb-8">
          {quizTypes.map((type) => (
            <TabsTrigger
              key={type.id}
              value={type.id}
              className="flex items-center gap-2"
              disabled={isTimerRunning && !quizCompleted}
            >
              {type.icon}
              <span>{type.name}</span>
            </TabsTrigger>
          ))}
        </TabsList>

        {quizTypes.map((type) => (
          <TabsContent key={type.id} value={type.id} className="mt-0">
            <Card>
              <CardContent className="p-0">{renderQuizContent()}</CardContent>
            </Card>
          </TabsContent>
        ))}
      </Tabs>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Quiz Statistik</CardTitle>
            <CardDescription>Din præstation i quizzer</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex justify-between">
                <span>Gennemførte quizzer</span>
                <span className="font-medium">12</span>
              </div>
              <div className="flex justify-between">
                <span>Gennemsnitlig score</span>
                <span className="font-medium">78%</span>
              </div>
              <div className="flex justify-between">
                <span>Bedste kategori</span>
                <span className="font-medium">Ordforråd</span>
              </div>
              <div className="flex justify-between">
                <span>Område til forbedring</span>
                <span className="font-medium">Grammatik</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Anbefalede Quizzer</CardTitle>
            <CardDescription>Baseret på din læringssti</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex items-center gap-3">
                <div className="bg-primary/10 p-2 rounded">
                  <BookOpen className="h-4 w-4 text-primary" />
                </div>
                <div>
                  <p className="font-medium">Grundlæggende Grammatik</p>
                  <p className="text-sm text-gray-500">10 spørgsmål · 5 min</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <div className="bg-primary/10 p-2 rounded">
                  <BookOpen className="h-4 w-4 text-primary" />
                </div>
                <div>
                  <p className="font-medium">Quran Ordforråd</p>
                  <p className="text-sm text-gray-500">15 spørgsmål · 8 min</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <div className="bg-primary/10 p-2 rounded">
                  <BookOpen className="h-4 w-4 text-primary" />
                </div>
                <div>
                  <p className="font-medium">Daglige Udtryk</p>
                  <p className="text-sm text-gray-500">8 spørgsmål · 4 min</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Præstationsoversigt</CardTitle>
            <CardDescription>Dine styrker og svagheder</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Ordforråd</span>
                  <span className="text-sm font-medium">85%</span>
                </div>
                <Progress value={85} className="h-2" />
              </div>
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Grammatik</span>
                  <span className="text-sm font-medium">65%</span>
                </div>
                <Progress value={65} className="h-2" />
              </div>
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Forståelse</span>
                  <span className="text-sm font-medium">78%</span>
                </div>
                <Progress value={78} className="h-2" />
              </div>
              <div>
                <div className="flex justify-between mb-1">
                  <span className="text-sm">Oversættelse</span>
                  <span className="text-sm font-medium">72%</span>
                </div>
                <Progress value={72} className="h-2" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="app/quran/advanced-study/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/quran/advanced-study/page.tsx">
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Search, BookMarked } from "lucide-react"
import GlassmorphismHeader from "@/components/glassmorphism-header"
import QuranWordAnalysis from "@/components/quran-word-analysis"
import TafsirSection from "@/components/tafsir-section"
import ComparativeStudySection from "@/components/comparative-study-section"
import ThematicExplorationSection from "@/components/thematic-exploration-section"

export default function AdvancedQuranStudyPage() {
  return (
    <div className="container mx-auto py-6">
      <GlassmorphismHeader
        title="Avanceret Quran Studie"
        subtitle="Dybdegående værktøjer til at studere og forstå Quranens tekst"
        icon={<BookMarked className="h-8 w-8 text-primary" />}
      />

      <div className="mt-8">
        <Tabs defaultValue="word-analysis" className="w-full">
          <TabsList className="grid grid-cols-4 mb-8">
            <TabsTrigger value="word-analysis">Ordanalyse</TabsTrigger>
            <TabsTrigger value="tafsir">Tafsir</TabsTrigger>
            <TabsTrigger value="comparative">Sammenlignende Studie</TabsTrigger>
            <TabsTrigger value="themes">Tematisk Udforskning</TabsTrigger>
          </TabsList>

          <TabsContent value="word-analysis" className="space-y-6">
            <WordAnalysisSection />
          </TabsContent>

          <TabsContent value="tafsir" className="space-y-6">
            <TafsirSection />
          </TabsContent>

          <TabsContent value="comparative" className="space-y-6">
            <ComparativeStudySection />
          </TabsContent>

          <TabsContent value="themes" className="space-y-6">
            <ThematicExplorationSection />
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

function WordAnalysisSection() {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Quran Ordanalyse</CardTitle>
          <CardDescription>Udforsk detaljeret morfologisk og grammatisk analyse af ord i Quran</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="flex-1">
              <Select defaultValue="1">
                <SelectTrigger>
                  <SelectValue placeholder="Vælg Surah" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">1. Al-Fatihah</SelectItem>
                  <SelectItem value="2">2. Al-Baqarah</SelectItem>
                  <SelectItem value="3">3. Aal-Imran</SelectItem>
                  <SelectItem value="4">4. An-Nisa</SelectItem>
                  <SelectItem value="5">5. Al-Ma'idah</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex-1">
              <Select defaultValue="1">
                <SelectTrigger>
                  <SelectValue placeholder="Vælg Vers" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">Vers 1</SelectItem>
                  <SelectItem value="2">Vers 2</SelectItem>
                  <SelectItem value="3">Vers 3</SelectItem>
                  <SelectItem value="4">Vers 4</SelectItem>
                  <SelectItem value="5">Vers 5</SelectItem>
                  <SelectItem value="6">Vers 6</SelectItem>
                  <SelectItem value="7">Vers 7</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input placeholder="Søg efter ord..." className="pl-8" />
              </div>
            </div>
          </div>

          <div className="bg-muted p-4 rounded-md mb-6">
            <p className="font-arabic text-right text-2xl mb-2">بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ</p>
            <p className="text-sm text-muted-foreground">Bismillāhi r-raḥmāni r-raḥīm</p>
            <p className="text-sm">I Allahs navn, den Nådige, den Barmhjertige</p>
          </div>

          <div className="space-y-6">
            <h3 className="text-lg font-medium">Ordanalyse</h3>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <QuranWordAnalysis
                word="بِسْمِ"
                transliteration="Bismi"
                translation="I navn"
                rootLetters="س م و"
                grammaticalForm="Substantiv i genitiv"
                analysis="Består af præpositionen بِ (i) + substantivet اسم (navn) i genitiv form. Præpositionen بِ styrer genitiv."
              />

              <QuranWordAnalysis
                word="اللَّهِ"
                transliteration="Allāhi"
                translation="Allah"
                rootLetters="ا ل ه"
                grammaticalForm="Substantiv i genitiv"
                analysis="Egennavnet Allah i genitiv form på grund af den foregående konstruktion (idafa). Den bestemte artikel الـ er assimileret med det første bogstav i ordet."
              />

              <QuranWordAnalysis
                word="الرَّحْمَٰنِ"
                transliteration="ar-Raḥmāni"
                translation="den Nådige"
                rootLetters="ر ح م"
                grammaticalForm="Adjektiv i genitiv"
                analysis="Et attribut (sifa) til Allah i genitiv form. Afledt af roden ر ح م, som indikerer barmhjertighed og nåde."
              />

              <QuranWordAnalysis
                word="الرَّحِيمِ"
                transliteration="ar-Raḥīmi"
                translation="den Barmhjertige"
                rootLetters="ر ح م"
                grammaticalForm="Adjektiv i genitiv"
                analysis="Et andet attribut til Allah i genitiv form. Fra samme rod som الرَّحْمَٰنِ, men med en anden intensitet og betydningsnuance."
              />
            </div>
          </div>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button variant="outline">Forrige Vers</Button>
          <Button>Næste Vers</Button>
        </CardFooter>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Rodordsanalyse</CardTitle>
          <CardDescription>Udforsk betydningen og anvendelsen af rødder i Quran</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                <Input placeholder="Søg efter ord..." className="pl-8" />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/quran/study/[surahId]/error.tsx">
"use client"

import { useEffect } from "react"
import Link from "next/link"
import { AlertTriangle, RefreshCw } from "lucide-react"

import { Button } from "@/components/ui/button"

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log fejlen til en fejlrapporteringstjeneste
    console.error(error)
  }, [error])

  return (
    <div className="flex min-h-screen flex-col items-center justify-center p-4">
      <AlertTriangle className="mb-4 h-16 w-16 text-emerald-600 dark:text-emerald-400" />
      <h2 className="mb-2 text-2xl font-bold">Quran Studie Utilgængeligt</h2>
      <p className="mb-6 max-w-md text-center text-muted-foreground">
        Der opstod en fejl ved indlæsning af Quran studiet. Dette kan skyldes et midlertidigt problem med serveren eller
        din forbindelse.
      </p>
      <div className="flex flex-col gap-2 sm:flex-row">
        <Button onClick={reset} className="gap-2">
          <RefreshCw className="h-4 w-4" />
          Prøv Igen
        </Button>
        <Button variant="outline" asChild>
          <Link href="/quran">Tilbage til Quran Oversigt</Link>
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="app/quran/study/[surahId]/loading.tsx">
import { Loader2 } from "lucide-react"

export default function Loading() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center">
      <Loader2 className="h-10 w-10 animate-spin text-emerald-600 dark:text-emerald-400" />
      <p className="mt-4 text-lg font-medium">Indlæser Quran studie...</p>
    </div>
  )
}
</file>

<file path="app/quran/study/[surahId]/page.tsx">
import type { Metadata } from "next"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"
import { QuranWordAnalysis } from "@/components/quran-word-analysis"

export const metadata: Metadata = {
  title: "Quran Studie | Quranic Arabic Trainer",
  description: "Dybdegående studie af Quran med grammatisk analyse og oversættelse",
}

// Dette er en mock-funktion, der ville blive erstattet af faktisk data fra en API eller database
function getSurahData(surahId: string) {
  const surahs = {
    "1": {
      name: "Al-Fatiha",
      arabicName: "الفاتحة",
      verses: 7,
      translation: "Åbningen",
      revelation: "Mekka",
      description:
        "Den første sura i Koranen, også kendt som 'Åbningen'. Den består af syv vers og er en af de mest reciterede suraer i daglige bønner.",
    },
    "2": {
      name: "Al-Baqarah",
      arabicName: "البقرة",
      verses: 286,
      translation: "Koen",
      revelation: "Medina",
      description: "Den længste sura i Koranen, der dækker mange aspekter af islamisk lov, historie og moral.",
    },
  }

  return (
    surahs[surahId as keyof typeof surahs] || {
      name: "Ukendt Sura",
      arabicName: "سورة",
      verses: 0,
      translation: "",
      revelation: "",
      description: "Ingen beskrivelse tilgængelig",
    }
  )
}

// Mock-data for vers
const verseData = [
  {
    number: 1,
    arabic: "بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ",
    transliteration: "Bismi Allahi alrrahmani alrraheemi",
    translation: "I Allahs navn, den Nådige, den Barmhjertige",
    words: [
      { arabic: "بِسْمِ", transliteration: "Bismi", translation: "I navn", type: "Substantiv", root: "س م و" },
      { arabic: "اللَّهِ", transliteration: "Allahi", translation: "Allah", type: "Egennavn", root: "ا ل ه" },
      { arabic: "الرَّحْمَٰنِ", transliteration: "alrrahmani", translation: "den Nådige", type: "Adjektiv", root: "ر ح م" },
      {
        arabic: "الرَّحِيمِ",
        transliteration: "alrraheemi",
        translation: "den Barmhjertige",
        type: "Adjektiv",
        root: "ر ح م",
      },
    ],
  },
  {
    number: 2,
    arabic: "الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ",
    transliteration: "Alhamdu lillahi rabbi alAAalameena",
    translation: "Al pris tilkommer Allah, verdenernes Herre",
    words: [
      { arabic: "الْحَمْدُ", transliteration: "Alhamdu", translation: "Al pris", type: "Substantiv", root: "ح م د" },
      {
        arabic: "لِلَّهِ",
        transliteration: "lillahi",
        translation: "tilkommer Allah",
        type: "Præposition + Egennavn",
        root: "ا ل ه",
      },
      { arabic: "رَبِّ", transliteration: "rabbi", translation: "Herre", type: "Substantiv", root: "ر ب ب" },
      {
        arabic: "الْعَالَمِينَ",
        transliteration: "alAAalameena",
        translation: "verdenernes",
        type: "Substantiv",
        root: "ع ل م",
      },
    ],
  },
  {
    number: 3,
    arabic: "الرَّحْمَٰنِ الرَّحِيمِ",
    transliteration: "Alrrahmani alrraheemi",
    translation: "Den Nådige, den Barmhjertige",
    words: [
      { arabic: "الرَّحْمَٰنِ", transliteration: "Alrrahmani", translation: "Den Nådige", type: "Adjektiv", root: "ر ح م" },
      {
        arabic: "الرَّحِيمِ",
        transliteration: "alrraheemi",
        translation: "den Barmhjertige",
        type: "Adjektiv",
        root: "ر ح م",
      },
    ],
  },
]

export default function QuranStudyPage({ params }: { params: { surahId: string } }) {
  const surah = getSurahData(params.surahId)

  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title={`${surah.name} (${surah.arabicName})`}
        description={`${surah.translation} - ${surah.verses} vers - Åbenbaret i ${surah.revelation}`}
        icon="BookOpen"
      />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-3">
          <CardHeader>
            <CardTitle className="flex items-center">
              <span>{surah.name}</span>
              <Badge variant="outline" className="ml-2">
                {surah.revelation}
              </Badge>
            </CardTitle>
            <CardDescription>{surah.description}</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex flex-wrap gap-2">
              <Button variant="outline" size="sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="lucide lucide-play mr-2"
                >
                  <polygon points="5 3 19 12 5 21 5 3" />
                </svg>
                Afspil Recitation
              </Button>
              <Button variant="outline" size="sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="lucide lucide-download mr-2"
                >
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                  <polyline points="7 10 12 15 17 10" />
                  <line x1="12" x2="12" y1="15" y2="3" />
                </svg>
                Download
              </Button>
              <Button variant="outline" size="sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="lucide lucide-bookmark mr-2"
                >
                  <path d="m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" />
                </svg>
                Bogmærk
              </Button>
              <Button variant="outline" size="sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="lucide lucide-share mr-2"
                >
                  <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
                  <polyline points="16 6 12 2 8 6" />
                  <line x1="12" x2="12" y1="2" y2="15" />
                </svg>
                Del
              </Button>
            </div>
          </CardContent>
        </Card>

        <Card className="lg:col-span-2 lg:row-span-2">
          <CardHeader>
            <CardTitle>Vers og Analyse</CardTitle>
            <CardDescription>Udforsk versene med detaljeret grammatisk analyse</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="verse-1" className="w-full">
              <TabsList className="grid grid-cols-3 mb-4">
                {verseData.map((verse) => (
                  <TabsTrigger key={verse.number} value={`verse-${verse.number}`}>
                    Vers {verse.number}
                  </TabsTrigger>
                ))}
              </TabsList>

              {verseData.map((verse) => (
                <TabsContent key={verse.number} value={`verse-${verse.number}`} className="space-y-6">
                  <div className="space-y-4">
                    <div className="text-right">
                      <p className="text-2xl font-arabic leading-loose">{verse.arabic}</p>
                    </div>
                    <div>
                      <p className="text-sm text-muted-foreground italic">{verse.transliteration}</p>
                      <p className="text-base mt-1">{verse.translation}</p>
                    </div>

                    <Separator />

                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold">Ordanalyse</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {verse.words.map((word, index) => (
                          <QuranWordAnalysis
                            key={index}
                            arabic={word.arabic}
                            transliteration={word.transliteration}
                            translation={word.translation}
                            type={word.type}
                            root={word.root}
                          />
                        ))}
                      </div>
                    </div>
                  </div>
                </TabsContent>
              ))}
            </Tabs>
          </CardContent>
        </Card>

        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Grammatiske Fokuspunkter</CardTitle>
              <CardDescription>Vigtige grammatiske koncepter i denne sura</CardDescription>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {[
                  "Brug af præpositioner",
                  "Adjektivers bøjning",
                  "Genitiv konstruktioner",
                  "Definitte og indefinitte substantiver",
                ].map((point, index) => (
                  <li key={index} className="flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="lucide lucide-check text-green-600 mr-2"
                    >
                      <polyline points="20 6 9 17 4 12" />
                    </svg>
                    {point}
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Relaterede Ressourcer</CardTitle>
              <CardDescription>Supplerende materiale til at forstå denne sura</CardDescription>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {[
                  { title: "Tafsir Ibn Kathir", type: "Fortolkning" },
                  { title: "Grammatiklektion: Præpositioner", type: "Grammatik" },
                  { title: "Ordforråd fra Al-Fatiha", type: "Ordforråd" },
                  { title: "Recitation af Sheikh Mishary", type: "Audio" },
                ].map((resource, index) => (
                  <li key={index} className="flex items-center justify-between">
                    <span className="text-sm">{resource.title}</span>
                    <Badge variant="outline">{resource.type}</Badge>
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Læringsmål</CardTitle>
              <CardDescription>Hvad du bør kunne efter at have studeret denne sura</CardDescription>
            </CardHeader>
            <CardContent>
              <ul className="space-y-2">
                {[
                  "Recitere suraen med korrekt tajwid",
                  "Forstå betydningen af hvert vers",
                  "Identificere de grammatiske strukturer",
                  "Genkende og forstå nøgleordene",
                ].map((goal, index) => (
                  <li key={index} className="flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="lucide lucide-target text-primary mr-2"
                    >
                      <circle cx="12" cy="12" r="10" />
                      <circle cx="12" cy="12" r="6" />
                      <circle cx="12" cy="12" r="2" />
                    </svg>
                    {goal}
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/quran/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/quran/page.tsx">
import Link from "next/link"
import { ArrowLeft, BookOpen, ChevronRight, Play, Search, Volume2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MainNav } from "@/components/main-nav"
import { UserNav } from "@/components/user-nav"

export default function QuranPage() {
  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <header className="sticky top-0 z-40 border-b bg-white/80 backdrop-blur-sm dark:bg-gray-950/80">
        <div className="container flex h-16 items-center justify-between py-4">
          <div className="flex items-center gap-6">
            <Link href="/" className="flex items-center gap-2">
              <BookOpen className="h-6 w-6 text-emerald-600 dark:text-emerald-400" />
              <span className="text-lg font-bold">أتعلم العربية</span>
              <span className="text-lg font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
            </Link>
            <MainNav />
          </div>
          <UserNav />
        </div>
      </header>

      <main className="container flex-1 py-10">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2">
            <Link href="/">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Dashboard
            </Link>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">القرآن الكريم / Quran Studie</h1>
          <p className="text-muted-foreground">Udforsk, lær og forstå Quran med interaktive værktøjer</p>
        </div>

        <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <input
              type="search"
              placeholder="Søg i Quran..."
              className="h-10 w-full rounded-md border border-input bg-white pl-9 pr-3 text-sm shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring dark:bg-gray-950"
            />
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="sm">
              <Play className="mr-2 h-4 w-4" />
              Fortsæt Læsning
            </Button>
            <Button size="sm">
              <Play className="mr-2 h-4 w-4" />
              Start Ny Surah
            </Button>
          </div>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          <div className="md:col-span-2">
            <Card className="mb-6">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>سورة الفاتحة / Surah Al-Fatiha</span>
                  <Button variant="ghost" size="sm" className="gap-1">
                    <Volume2 className="h-4 w-4" />
                    <span className="text-xs">Lyt til Recitation</span>
                  </Button>
                </CardTitle>
                <CardDescription>Åbningen • 7 Vers • Mekka</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="arabic">
                  <TabsList className="mb-4">
                    <TabsTrigger value="arabic">Arabisk</TabsTrigger>
                    <TabsTrigger value="translation">Oversættelse</TabsTrigger>
                    <TabsTrigger value="both">Side om Side</TabsTrigger>
                  </TabsList>
                  <TabsContent value="arabic">
                    <div className="space-y-6 text-right">
                      <div className="border-b border-gray-200 pb-4">
                        <p className="mb-2 text-center text-sm text-muted-foreground">بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ</p>
                        <p className="font-arabic text-2xl leading-loose" dir="rtl">
                          ﭑﭒﭓﭔﭕ
                        </p>
                      </div>
                      <div className="space-y-4">
                        <div className="flex items-start justify-end gap-4">
                          <div className="text-right">
                            <p className="font-arabic text-2xl leading-loose" dir="rtl">
                              ٱلْحَمْدُ لِلَّهِ رَبِّ ٱلْعَٰلَمِينَ
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 1</p>
                          </div>
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            ١
                          </div>
                        </div>
                        <div className="flex items-start justify-end gap-4">
                          <div className="text-right">
                            <p className="font-arabic text-2xl leading-loose" dir="rtl">
                              ٱلرَّحْمَٰنِ ٱلرَّحِيمِ
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 2</p>
                          </div>
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            ٢
                          </div>
                        </div>
                        <div className="flex items-start justify-end gap-4">
                          <div className="text-right">
                            <p className="font-arabic text-2xl leading-loose" dir="rtl">
                              مَٰلِكِ يَوْمِ ٱلدِّينِ
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 3</p>
                          </div>
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            ٣
                          </div>
                        </div>
                        <div className="flex items-start justify-end gap-4">
                          <div className="text-right">
                            <p className="font-arabic text-2xl leading-loose" dir="rtl">
                              إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 4</p>
                          </div>
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            ٤
                          </div>
                        </div>
                        <div className="flex items-start justify-end gap-4">
                          <div className="text-right">
                            <p className="font-arabic text-2xl leading-loose" dir="rtl">
                              ٱهْدِنَا ٱلصِّرَٰطَ ٱلْمُسْتَقِيمَ
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 5</p>
                          </div>
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            ٥
                          </div>
                        </div>
                        <div className="flex items-start justify-end gap-4">
                          <div className="text-right">
                            <p className="font-arabic text-2xl leading-loose" dir="rtl">
                              صِرَٰطَ ٱلَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ ٱلْمَغْضُوبِ عَلَيْهِمْ وَلَا ٱلضَّآلِّينَ
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 6-7</p>
                          </div>
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            ٦-٧
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                  <TabsContent value="translation">
                    <div className="space-y-6">
                      <div className="border-b border-gray-200 pb-4">
                        <p className="mb-2 text-center text-sm text-muted-foreground">
                          I Allahs navn, den Nådige, den Barmhjertige
                        </p>
                      </div>
                      <div className="space-y-4">
                        <div className="flex items-start gap-4">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            1
                          </div>
                          <div>
                            <p className="text-lg">Al pris tilkommer Allah, verdenernes Herre</p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 1</p>
                          </div>
                        </div>
                        <div className="flex items-start gap-4">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            2
                          </div>
                          <div>
                            <p className="text-lg">Den Nådige, den Barmhjertige</p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 2</p>
                          </div>
                        </div>
                        <div className="flex items-start gap-4">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            3
                          </div>
                          <div>
                            <p className="text-lg">Herre over Dommens Dag</p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 3</p>
                          </div>
                        </div>
                        <div className="flex items-start gap-4">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            4
                          </div>
                          <div>
                            <p className="text-lg">Dig alene tilbeder vi, og Dig alene beder vi om hjælp</p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 4</p>
                          </div>
                        </div>
                        <div className="flex items-start gap-4">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            5
                          </div>
                          <div>
                            <p className="text-lg">Led os på den rette vej</p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 5</p>
                          </div>
                        </div>
                        <div className="flex items-start gap-4">
                          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                            6-7
                          </div>
                          <div>
                            <p className="text-lg">
                              Vejen for dem, Du har skænket Din nåde, ikke for dem, der har vakt Din vrede, ej heller
                              for de vildfarne
                            </p>
                            <p className="mt-1 text-sm text-muted-foreground">Vers 6-7</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                  <TabsContent value="both">
                    <div className="space-y-6">
                      <div className="border-b border-gray-200 pb-4">
                        <div className="grid grid-cols-1 gap-2 md:grid-cols-2">
                          <p className="text-center text-sm text-muted-foreground">
                            I Allahs navn, den Nådige, den Barmhjertige
                          </p>
                          <p className="text-center text-sm text-muted-foreground" dir="rtl">
                            بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ
                          </p>
                        </div>
                      </div>
                      <div className="space-y-6">
                        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                          <div className="flex items-start gap-4">
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                              1
                            </div>
                            <div>
                              <p className="text-lg">Al pris tilkommer Allah, verdenernes Herre</p>
                            </div>
                          </div>
                          <div className="flex items-start justify-end gap-4">
                            <div className="text-right">
                              <p className="font-arabic text-xl" dir="rtl">
                                ٱلْحَمْدُ لِلَّهِ رَبِّ ٱلْعَٰلَمِينَ
                              </p>
                            </div>
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                              ١
                            </div>
                          </div>
                        </div>
                        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                          <div className="flex items-start gap-4">
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                              2
                            </div>
                            <div>
                              <p className="text-lg">Den Nådige, den Barmhjertige</p>
                            </div>
                          </div>
                          <div className="flex items-start justify-end gap-4">
                            <div className="text-right">
                              <p className="font-arabic text-xl" dir="rtl">
                                ٱلرَّحْمَٰنِ ٱلرَّحِيمِ
                              </p>
                            </div>
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                              ٢
                            </div>
                          </div>
                        </div>
                        <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                          <div className="flex items-start gap-4">
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                              3
                            </div>
                            <div>
                              <p className="text-lg">Herre over Dommens Dag</p>
                            </div>
                          </div>
                          <div className="flex items-start justify-end gap-4">
                            <div className="text-right">
                              <p className="font-arabic text-xl" dir="rtl">
                                مَٰلِكِ يَوْمِ ٱلدِّينِ
                              </p>
                            </div>
                            <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-800">
                              ٣
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button variant="outline">Forrige Surah</Button>
                <Button variant="outline">Næste Surah</Button>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Ordanalyse</CardTitle>
                <CardDescription>Udforsk betydningen af nøgleord i Surah Al-Fatiha</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
                  <div className="rounded-lg border p-4">
                    <div className="mb-2 text-center font-arabic text-2xl" dir="rtl">
                      الْحَمْدُ
                    </div>
                    <div className="text-center text-sm font-medium">al-hamdu</div>
                    <div className="mt-2 text-center text-sm">lovprisning</div>
                    <div className="mt-2 text-xs text-muted-foreground">
                      <p>Rod: ح م د (H-M-D)</p>
                      <p>Type: Navneord</p>
                      <p>Form: Bestemt med "al-"</p>
                    </div>
                  </div>
                  <div className="rounded-lg border p-4">
                    <div className="mb-2 text-center font-arabic text-2xl" dir="rtl">
                      لِلَّهِ
                    </div>
                    <div className="text-center text-sm font-medium">lillahi</div>
                    <div className="mt-2 text-center text-sm">til Allah / for Allah</div>
                    <div className="mt-2 text-xs text-muted-foreground">
                      <p>Rod: ا ل ه (A-L-H)</p>
                      <p>Type: Navneord med præposition</p>
                      <p>Præposition: li (til/for)</p>
                    </div>
                  </div>
                  <div className="rounded-lg border p-4">
                    <div className="mb-2 text-center font-arabic text-2xl" dir="rtl">
                      رَبِّ
                    </div>
                    <div className="text-center text-sm font-medium">rabbi</div>
                    <div className="mt-2 text-center text-sm">Herre</div>
                    <div className="mt-2 text-xs text-muted-foreground">
                      <p>Rod: ر ب ب (R-B-B)</p>
                      <p>Type: Navneord i konstruktform</p>
                      <p>Form: Possessiv (Herre over)</p>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter>
                <Button className="w-full">Se Alle Ord</Button>
              </CardFooter>
            </Card>
          </div>

          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Surahs</CardTitle>
                <CardDescription>Udforsk kapitlerne i Quran</CardDescription>
              </CardHeader>
              <CardContent className="max-h-[300px] overflow-y-auto">
                <div className="space-y-2">
                  {[
                    { number: 1, name: "Al-Fatiha", arabic: "الفاتحة", verses: 7, type: "Mekka" },
                    { number: 2, name: "Al-Baqarah", arabic: "البقرة", verses: 286, type: "Medina" },
                    { number: 3, name: "Aal-Imran", arabic: "آل عمران", verses: 200, type: "Medina" },
                    { number: 4, name: "An-Nisa", arabic: "النساء", verses: 176, type: "Medina" },
                    { number: 5, name: "Al-Ma'idah", arabic: "المائدة", verses: 120, type: "Medina" },
                    { number: 6, name: "Al-An'am", arabic: "الأنعام", verses: 165, type: "Mekka" },
                    { number: 7, name: "Al-A'raf", arabic: "الأعراف", verses: 206, type: "Mekka" },
                    { number: 8, name: "Al-Anfal", arabic: "الأنفال", verses: 75, type: "Medina" },
                    { number: 9, name: "At-Tawbah", arabic: "التوبة", verses: 129, type: "Medina" },
                    { number: 10, name: "Yunus", arabic: "يونس", verses: 109, type: "Mekka" },
                  ].map((surah) => (
                    <div
                      key={surah.number}
                      className={`flex items-center justify-between rounded-lg p-2 hover:bg-muted ${
                        surah.number === 1 ? "bg-emerald-50 dark:bg-emerald-950/20" : ""
                      }`}
                    >
                      <div className="flex items-center gap-3">
                        <div
                          className={`flex h-8 w-8 items-center justify-center rounded-full ${
                            surah.number === 1
                              ? "bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200"
                              : "bg-muted text-muted-foreground"
                          }`}
                        >
                          {surah.number}
                        </div>
                        <div>
                          <div className="flex items-center gap-2">
                            <span className="font-medium">{surah.name}</span>
                            <span className="font-arabic text-sm text-muted-foreground">{surah.arabic}</span>
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {surah.verses} vers • {surah.type}
                          </div>
                        </div>
                      </div>
                      <ChevronRight className="h-4 w-4 text-muted-foreground" />
                    </div>
                  ))}
                </div>
              </CardContent>
              <CardFooter>
                <Button variant="outline" className="w-full">
                  Se Alle Surahs
                </Button>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Læringsværktøjer</CardTitle>
                <CardDescription>Værktøjer til at forbedre din Quran-forståelse</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="rounded-lg border p-3">
                    <h3 className="mb-1 font-medium">Ordforråd Flashcards</h3>
                    <p className="mb-2 text-sm text-muted-foreground">Lær nøgleord fra Quran med spaced repetition</p>
                    <Button variant="outline" size="sm" className="w-full">
                      Start Læring
                    </Button>
                  </div>
                  <div className="rounded-lg border p-3">
                    <h3 className="mb-1 font-medium">Tajweed Regler</h3>
                    <p className="mb-2 text-sm text-muted-foreground">Lær reglerne for korrekt Quran-recitation</p>
                    <Button variant="outline" size="sm" className="w-full">
                      Udforsk Regler
                    </Button>
                  </div>
                  <div className="rounded-lg border p-3">
                    <h3 className="mb-1 font-medium">Tafsir (Fortolkning)</h3>
                    <p className="mb-2 text-sm text-muted-foreground">Udforsk dybdegående fortolkninger af Quran</p>
                    <Button variant="outline" size="sm" className="w-full">
                      Læs Tafsir
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Din Fremgang</CardTitle>
                <CardDescription>Spor din rejse gennem Quran</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="mb-1 flex items-center justify-between text-sm">
                      <span>Læste Surahs</span>
                      <span className="text-muted-foreground">2/114</span>
                    </div>
                    <div className="h-2 rounded-full bg-muted">
                      <div className="h-2 w-[1.8%] rounded-full bg-emerald-500"></div>
                    </div>
                  </div>
                  <div>
                    <div className="mb-1 flex items-center justify-between text-sm">
                      <span>Lærte Vers</span>
                      <span className="text-muted-foreground">15/6236</span>
                    </div>
                    <div className="h-2 rounded-full bg-muted">
                      <div className="h-2 w-[0.24%] rounded-full bg-emerald-500"></div>
                    </div>
                  </div>
                  <div>
                    <div className="mb-1 flex items-center justify-between text-sm">
                      <span>Mestrede Ord</span>
                      <span className="text-muted-foreground">45/1722</span>
                    </div>
                    <div className="h-2 rounded-full bg-muted">
                      <div className="h-2 w-[2.6%] rounded-full bg-emerald-500"></div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; 2025 أتعلم العربية (Ata'allam al-Arabiya). Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">
              Om os
            </Link>
            <Link href="/contact" className="hover:underline">
              Kontakt
            </Link>
            <Link href="/privacy" className="hover:underline">
              Privatlivspolitik
            </Link>
            <Link href="/terms" className="hover:underline">
              Vilkår
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/settings/error.tsx">
"use client"

import { useEffect } from "react"
import Link from "next/link"
import { AlertTriangle, RefreshCw } from "lucide-react"

import { Button } from "@/components/ui/button"

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    // Log fejlen til en fejlrapporteringstjeneste
    console.error(error)
  }, [error])

  return (
    <div className="flex min-h-screen flex-col items-center justify-center p-4">
      <AlertTriangle className="mb-4 h-16 w-16 text-emerald-600 dark:text-emerald-400" />
      <h2 className="mb-2 text-2xl font-bold">Indstillinger Utilgængelige</h2>
      <p className="mb-6 max-w-md text-center text-muted-foreground">
        Der opstod en fejl ved indlæsning af indstillingerne. Dette kan skyldes et midlertidigt problem med serveren
        eller din forbindelse.
      </p>
      <div className="flex flex-col gap-2 sm:flex-row">
        <Button onClick={reset} className="gap-2">
          <RefreshCw className="h-4 w-4" />
          Prøv Igen
        </Button>
        <Button variant="outline" asChild>
          <Link href="/">Gå til Forsiden</Link>
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="app/settings/loading.tsx">
import { Loader2 } from "lucide-react"

export default function Loading() {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center">
      <Loader2 className="h-10 w-10 animate-spin text-emerald-600 dark:text-emerald-400" />
      <p className="mt-4 text-lg font-medium">Indlæser indstillinger...</p>
    </div>
  )
}
</file>

<file path="app/settings/page.tsx">
import type { Metadata } from "next"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Slider } from "@/components/ui/slider"
import { Separator } from "@/components/ui/separator"
import { GlassmorphismHeader } from "@/components/glassmorphism-header"

export const metadata: Metadata = {
  title: "Indstillinger | Quranic Arabic Trainer",
  description: "Tilpas din læringsoplevelse med personlige indstillinger",
}

export default function SettingsPage() {
  return (
    <div className="container mx-auto py-6 space-y-8">
      <GlassmorphismHeader
        title="Indstillinger"
        description="Tilpas din læringsoplevelse med personlige indstillinger"
        icon="Settings"
      />

      <Tabs defaultValue="general" className="w-full">
        <TabsList className="grid w-full md:w-auto grid-cols-3 md:grid-cols-5">
          <TabsTrigger value="general">Generelt</TabsTrigger>
          <TabsTrigger value="appearance">Udseende</TabsTrigger>
          <TabsTrigger value="learning">Læring</TabsTrigger>
          <TabsTrigger value="notifications">Notifikationer</TabsTrigger>
          <TabsTrigger value="offline">Offline</TabsTrigger>
        </TabsList>

        <TabsContent value="general" className="space-y-4 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Generelle Indstillinger</CardTitle>
              <CardDescription>Administrer dine grundlæggende kontoindstillinger</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="language">Sprog</Label>
                <Select defaultValue="danish">
                  <SelectTrigger id="language">
                    <SelectValue placeholder="Vælg sprog" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="danish">Dansk</SelectItem>
                    <SelectItem value="english">Engelsk</SelectItem>
                    <SelectItem value="arabic">Arabisk</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="analytics">Analysedata</Label>
                  <p className="text-sm text-muted-foreground">
                    Hjælp os med at forbedre platformen ved at dele anonyme brugsdata
                  </p>
                </div>
                <Switch id="analytics" defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="cookies">Cookies</Label>
                  <p className="text-sm text-muted-foreground">Tillad cookies for en bedre brugeroplevelse</p>
                </div>
                <Switch id="cookies" defaultChecked />
              </div>
            </CardContent>
            <CardFooter>
              <Button>Gem ændringer</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="appearance" className="space-y-4 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Udseende</CardTitle>
              <CardDescription>Tilpas platformens udseende efter dine præferencer</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label>Tema</Label>
                <RadioGroup defaultValue="system" className="grid grid-cols-3 gap-4">
                  <div>
                    <RadioGroupItem value="light" id="light" className="peer sr-only" />
                    <Label
                      htmlFor="light"
                      className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="lucide lucide-sun"
                      >
                        <circle cx="12" cy="12" r="4" />
                        <path d="M12 2v2" />
                        <path d="M12 20v2" />
                        <path d="m4.93 4.93 1.41 1.41" />
                        <path d="m17.66 17.66 1.41 1.41" />
                        <path d="M2 12h2" />
                        <path d="M20 12h2" />
                        <path d="m6.34 17.66-1.41 1.41" />
                        <path d="m19.07 4.93-1.41 1.41" />
                      </svg>
                      <span className="mt-2">Lys</span>
                    </Label>
                  </div>
                  <div>
                    <RadioGroupItem value="dark" id="dark" className="peer sr-only" />
                    <Label
                      htmlFor="dark"
                      className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="lucide lucide-moon"
                      >
                        <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z" />
                      </svg>
                      <span className="mt-2">Mørk</span>
                    </Label>
                  </div>
                  <div>
                    <RadioGroupItem value="system" id="system" className="peer sr-only" />
                    <Label
                      htmlFor="system"
                      className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        className="lucide lucide-laptop"
                      >
                        <path d="M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16" />
                      </svg>
                      <span className="mt-2">System</span>
                    </Label>
                  </div>
                </RadioGroup>
              </div>

              <div className="space-y-2">
                <Label>Skriftstørrelse</Label>
                <div className="flex items-center space-x-2">
                  <span className="text-xs">A</span>
                  <Slider defaultValue={[16]} max={24} min={12} step={1} />
                  <span className="text-lg">A</span>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="font">Skrifttype</Label>
                <Select defaultValue="system">
                  <SelectTrigger id="font">
                    <SelectValue placeholder="Vælg skrifttype" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="system">System</SelectItem>
                    <SelectItem value="serif">Serif</SelectItem>
                    <SelectItem value="sans">Sans-serif</SelectItem>
                    <SelectItem value="mono">Monospace</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
            <CardFooter>
              <Button>Gem ændringer</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="learning" className="space-y-4 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Læringsindstillinger</CardTitle>
              <CardDescription>Tilpas din læringsoplevelse for at maksimere din fremgang</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="difficulty">Sværhedsgrad</Label>
                <Select defaultValue="medium">
                  <SelectTrigger id="difficulty">
                    <SelectValue placeholder="Vælg sværhedsgrad" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="easy">Let</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="hard">Svær</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>Dagligt læringsmål</Label>
                <div className="flex items-center space-x-2">
                  <span>5 min</span>
                  <Slider defaultValue={[20]} max={60} min={5} step={5} />
                  <span>60 min</span>
                </div>
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="spaced-repetition">Spaced Repetition</Label>
                  <p className="text-sm text-muted-foreground">
                    Optimér din læring med avancerede gentagelsesalgoritmer
                  </p>
                </div>
                <Switch id="spaced-repetition" defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="audio-feedback">Lydfeedback</Label>
                  <p className="text-sm text-muted-foreground">Få lydfeedback ved korrekte og forkerte svar</p>
                </div>
                <Switch id="audio-feedback" defaultChecked />
              </div>
            </CardContent>
            <CardFooter>
              <Button>Gem ændringer</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="notifications" className="space-y-4 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Notifikationsindstillinger</CardTitle>
              <CardDescription>Administrer hvordan og hvornår du modtager notifikationer</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="daily-reminder">Daglig påmindelse</Label>
                  <p className="text-sm text-muted-foreground">Få en daglig påmindelse om at øve</p>
                </div>
                <Switch id="daily-reminder" defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="achievement">Præstationsnotifikationer</Label>
                  <p className="text-sm text-muted-foreground">Få besked når du opnår nye præstationer</p>
                </div>
                <Switch id="achievement" defaultChecked />
              </div>

              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="community">Fællesskabsnotifikationer</Label>
                  <p className="text-sm text-muted-foreground">Få besked om aktivitet i fællesskabet</p>
                </div>
                <Switch id="community" defaultChecked />
              </div>

              <div className="space-y-2">
                <Label htmlFor="reminder-time">Påmindelsestidspunkt</Label>
                <Select defaultValue="18">
                  <SelectTrigger id="reminder-time">
                    <SelectValue placeholder="Vælg tidspunkt" />
                  </SelectTrigger>
                  <SelectContent>
                    {Array.from({ length: 24 }, (_, i) => (
                      <SelectItem key={i} value={i.toString()}>
                        {i.toString().padStart(2, "0")}:00
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
            <CardFooter>
              <Button>Gem ændringer</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="offline" className="space-y-4 mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Offline-indstillinger</CardTitle>
              <CardDescription>Administrer hvordan appen fungerer, når du er offline</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex items-center justify-between">
                <div className="space-y-0.5">
                  <Label htmlFor="offline-mode">Offline-tilstand</Label>
                  <p className="text-sm text-muted-foreground">
                    Aktivér offline-funktionalitet for at bruge appen uden internetforbindelse
                  </p>
                </div>
                <Switch id="offline-mode" defaultChecked />
              </div>

              <div className="space-y-2">
                <Label htmlFor="storage-limit">Lagerplads til offline-indhold</Label>
                <div className="flex items-center space-x-2">
                  <span>100 MB</span>
                  <Slider defaultValue={[500]} max={1000} min={100} step={100} />
                  <span>1 GB</span>
                </div>
                <p className="text-sm text-muted-foreground mt-1">Nuværende forbrug: 235 MB / 500 MB</p>
              </div>

              <div className="space-y-2">
                <Label>Offline-indhold</Label>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <span className="text-sm font-medium">Kurser</span>
                      <p className="text-xs text-muted-foreground">Download kurser til offline-brug</p>
                    </div>
                    <Switch id="offline-courses" defaultChecked />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <span className="text-sm font-medium">Quran-tekst</span>
                      <p className="text-xs text-muted-foreground">Download Quran-tekst til offline-brug</p>
                    </div>
                    <Switch id="offline-quran-text" defaultChecked />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <span className="text-sm font-medium">Quran-lydoptagelser</span>
                      <p className="text-xs text-muted-foreground">Download Quran-recitationer til offline-brug</p>
                    </div>
                    <Switch id="offline-quran-audio" defaultChecked />
                  </div>
                  <Separator />
                  <div className="flex items-center justify-between">
                    <div className="space-y-0.5">
                      <span className="text-sm font-medium">Flashcards</span>
                      <p className="text-xs text-muted-foreground">Download flashcards til offline-brug</p>
                    </div>
                    <Switch id="offline-flashcards" defaultChecked />
                  </div>
                </div>
              </div>

              <Button variant="outline" className="w-full">
                Synkroniser offline-data nu
              </Button>
            </CardContent>
            <CardFooter>
              <Button>Gem ændringer</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="app/vocabulary/flashcards/page.tsx">
"use client"

import { useState } from "react"
import Link from "next/link"
import { ArrowLeft, BookOpen, Check, ChevronLeft, ChevronRight, Loader2, Repeat, Volume2, X } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { MainNav } from "@/components/main-nav"
import { UserNav } from "@/components/user-nav"
import { FlashcardStats } from "@/components/flashcard-stats"

// Simuleret flashcard data
const flashcardData = [
  {
    id: 1,
    arabic: "كِتَاب",
    transliteration: "kitāb",
    translation: "bog",
    example: "هَذَا كِتَابٌ جَمِيلٌ",
    exampleTranslation: "Dette er en smuk bog",
    difficulty: 1,
    lastReviewed: null,
    nextReview: null,
  },
  {
    id: 2,
    arabic: "قَلَم",
    transliteration: "qalam",
    translation: "pen",
    example: "هَذَا قَلَمٌ أَزْرَق",
    exampleTranslation: "Dette er en blå pen",
    difficulty: 1,
    lastReviewed: null,
    nextReview: null,
  },
  {
    id: 3,
    arabic: "بَيْت",
    transliteration: "bayt",
    translation: "hus",
    example: "بَيْتِي كَبِير",
    exampleTranslation: "Mit hus er stort",
    difficulty: 2,
    lastReviewed: null,
    nextReview: null,
  },
  {
    id: 4,
    arabic: "مَدْرَسَة",
    transliteration: "madrasa",
    translation: "skole",
    example: "أَذْهَبُ إِلَى المَدْرَسَةِ",
    exampleTranslation: "Jeg går i skole",
    difficulty: 2,
    lastReviewed: null,
    nextReview: null,
  },
  {
    id: 5,
    arabic: "مَاء",
    transliteration: "mā'",
    translation: "vand",
    example: "أَشْرَبُ المَاءَ",
    exampleTranslation: "Jeg drikker vand",
    difficulty: 1,
    lastReviewed: null,
    nextReview: null,
  },
]

// Spaced repetition algoritme (forenklet SM-2)
const calculateNextReview = (difficulty: number, previousInterval: number | null) => {
  // Første gang kortet vises
  if (previousInterval === null) {
    return difficulty === 1 ? 1 : 0.5 // Dage
  }

  // Baseret på sværhedsgrad
  const factor = difficulty === 1 ? 2.5 : difficulty === 2 ? 2.0 : 1.5
  return previousInterval * factor // Dage
}

export default function FlashcardsPage() {
  const [cards, setCards] = useState(flashcardData)
  const [currentCardIndex, setCurrentCardIndex] = useState(0)
  const [isFlipped, setIsFlipped] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [sessionStats, setSessionStats] = useState({
    total: flashcardData.length,
    reviewed: 0,
    easy: 0,
    medium: 0,
    hard: 0,
  })

  const currentCard = cards[currentCardIndex]

  // Simuler lydafspilning
  const playAudio = () => {
    // I en rigtig app ville dette afspille en lydfil
    console.log(`Afspiller lyd for: ${currentCard.arabic}`)
  }

  const handleFlipCard = () => {
    setIsFlipped(!isFlipped)
  }

  const handleCardResponse = async (difficulty: number) => {
    setIsLoading(true)

    // Opdater statistik
    setSessionStats((prev) => ({
      ...prev,
      reviewed: prev.reviewed + 1,
      easy: difficulty === 1 ? prev.easy + 1 : prev.easy,
      medium: difficulty === 2 ? prev.medium + 1 : prev.medium,
      hard: difficulty === 3 ? prev.hard + 1 : prev.hard,
    }))

    // Beregn næste gennemgangstidspunkt baseret på sværhedsgrad
    const now = new Date()
    const lastReviewed = now.toISOString()

    const intervalInDays = calculateNextReview(difficulty, currentCard.nextReview ? 1 : null)
    const nextReview = new Date(now.getTime() + intervalInDays * 24 * 60 * 60 * 1000).toISOString()

    // Opdater kort med ny information
    const updatedCards = [...cards]
    updatedCards[currentCardIndex] = {
      ...currentCard,
      difficulty,
      lastReviewed,
      nextReview,
    }
    setCards(updatedCards)

    // Simuler netværksforsinkelse
    await new Promise((resolve) => setTimeout(resolve, 300))

    // Gå til næste kort
    if (currentCardIndex < cards.length - 1) {
      setCurrentCardIndex(currentCardIndex + 1)
    } else {
      // Sessionen er færdig, vis resultater
      // I en rigtig app ville vi gemme resultaterne i databasen
    }

    setIsFlipped(false)
    setIsLoading(false)
  }

  const resetSession = () => {
    setCurrentCardIndex(0)
    setIsFlipped(false)
    setSessionStats({
      total: flashcardData.length,
      reviewed: 0,
      easy: 0,
      medium: 0,
      hard: 0,
    })
  }

  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <header className="sticky top-0 z-40 border-b bg-white/80 backdrop-blur-sm dark:bg-gray-950/80">
        <div className="container flex h-16 items-center justify-between py-4">
          <div className="flex items-center gap-6">
            <Link href="/" className="flex items-center gap-2">
              <BookOpen className="h-6 w-6 text-emerald-600 dark:text-emerald-400" />
              <span className="text-lg font-bold">أتعلم العربية</span>
              <span className="text-lg font-bold text-muted-foreground">(Ata'allam al-Arabiya)</span>
            </Link>
            <MainNav />
          </div>
          <UserNav />
        </div>
      </header>

      <main className="container flex-1 py-10">
        <div className="mb-8">
          <Button variant="ghost" size="sm" asChild className="mb-2">
            <Link href="/vocabulary">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Tilbage til Ordforråd
            </Link>
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">Flashcards - Grundlæggende Ordforråd</h1>
          <p className="text-muted-foreground">Lær og øv arabiske ord med spaced repetition</p>
        </div>

        <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <div className="flex-1">
            <div className="mb-2 flex items-center justify-between text-sm">
              <span>Session fremgang</span>
              <span className="text-muted-foreground">
                {sessionStats.reviewed} af {sessionStats.total} kort gennemgået
              </span>
            </div>
            <Progress value={(sessionStats.reviewed / sessionStats.total) * 100} className="h-2 bg-emerald-100" />
          </div>
          <div className="flex gap-2">
            <Button variant="outline" size="sm" onClick={resetSession}>
              <Repeat className="mr-2 h-4 w-4" />
              Nulstil Session
            </Button>
          </div>
        </div>

        <div className="grid gap-6 md:grid-cols-3">
          <div className="md:col-span-2">
            <Card className="mb-6">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>
                    Flashcard {currentCardIndex + 1}/{cards.length}
                  </span>
                  <Button variant="ghost" size="sm" onClick={playAudio} className="gap-1">
                    <Volume2 className="h-4 w-4" />
                    <span className="text-xs">Lyt</span>
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div
                  className={`flex min-h-[300px] cursor-pointer flex-col items-center justify-center rounded-lg bg-emerald-50/50 p-6 text-center transition-all duration-300 dark:bg-emerald-950/20 ${
                    isLoading ? "opacity-50" : ""
                  }`}
                  onClick={handleFlipCard}
                  style={{ perspective: "1000px" }}
                >
                  <div
                    className={`relative h-full w-full transition-transform duration-500 ${
                      isFlipped ? "rotate-y-180" : ""
                    }`}
                    style={{
                      transformStyle: "preserve-3d",
                    }}
                  >
                    <div
                      className={`absolute inset-0 flex flex-col items-center justify-center backface-hidden ${
                        isFlipped ? "invisible" : ""
                      }`}
                    >
                      <p className="font-arabic text-5xl" dir="rtl">
                        {currentCard.arabic}
                      </p>
                      <p className="mt-4 text-sm text-muted-foreground">Klik for at vende kortet</p>
                    </div>
                    <div
                      className={`absolute inset-0 flex flex-col items-center justify-center backface-hidden ${
                        isFlipped ? "" : "invisible"
                      }`}
                      style={{
                        transform: "rotateY(180deg)",
                      }}
                    >
                      <div className="space-y-4">
                        <p className="text-xl font-medium">{currentCard.translation}</p>
                        <p className="text-md font-medium text-muted-foreground">{currentCard.transliteration}</p>
                        <div className="mt-4 rounded-lg bg-white p-4 dark:bg-gray-800">
                          <p className="mb-2 font-arabic text-lg" dir="rtl">
                            {currentCard.example}
                          </p>
                          <p className="text-sm text-muted-foreground">{currentCard.exampleTranslation}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={() => {
                      if (currentCardIndex > 0) {
                        setCurrentCardIndex(currentCardIndex - 1)
                        setIsFlipped(false)
                      }
                    }}
                    disabled={currentCardIndex === 0 || isLoading}
                  >
                    <ChevronLeft className="mr-2 h-4 w-4" />
                    Forrige
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      if (currentCardIndex < cards.length - 1) {
                        setCurrentCardIndex(currentCardIndex + 1)
                        setIsFlipped(false)
                      }
                    }}
                    disabled={currentCardIndex === cards.length - 1 || isLoading}
                  >
                    Næste
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
                <div className="flex gap-2">
                  {isFlipped && (
                    <>
                      <Button
                        variant="outline"
                        className="border-red-200 bg-red-50 text-red-600 hover:bg-red-100 hover:text-red-700 dark:border-red-900 dark:bg-red-950/20 dark:text-red-400 dark:hover:bg-red-900/30"
                        onClick={() => handleCardResponse(3)}
                        disabled={isLoading}
                      >
                        {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <X className="mr-2 h-4 w-4" />}
                        Svært
                      </Button>
                      <Button
                        variant="outline"
                        className="border-yellow-200 bg-yellow-50 text-yellow-600 hover:bg-yellow-100 hover:text-yellow-700 dark:border-yellow-900 dark:bg-yellow-950/20 dark:text-yellow-400 dark:hover:bg-yellow-900/30"
                        onClick={() => handleCardResponse(2)}
                        disabled={isLoading}
                      >
                        {isLoading ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                          <span className="mr-2">•••</span>
                        )}
                        Medium
                      </Button>
                      <Button
                        variant="outline"
                        className="border-green-200 bg-green-50 text-green-600 hover:bg-green-100 hover:text-green-700 dark:border-green-900 dark:bg-green-950/20 dark:text-green-400 dark:hover:bg-green-900/30"
                        onClick={() => handleCardResponse(1)}
                        disabled={isLoading}
                      >
                        {isLoading ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                          <Check className="mr-2 h-4 w-4" />
                        )}
                        Let
                      </Button>
                    </>
                  )}
                </div>
              </CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Studietips</CardTitle>
              </CardHeader>
              <CardContent>
                <ul className="list-inside list-disc space-y-2 text-muted-foreground">
                  <li>Øv disse ord dagligt for bedre hukommelse</li>
                  <li>Prøv at bruge ordene i simple sætninger</li>
                  <li>Vær opmærksom på rodstavelserne for at forstå ordrelationer</li>
                  <li>Lyt omhyggeligt til udtalen og gentag højt</li>
                  <li>Se efter disse ord, når du læser arabisk tekst for at forstærke din læring</li>
                </ul>
              </CardContent>
            </Card>
          </div>

          <div className="space-y-6">
            <FlashcardStats
              stats={{
                totalCards: sessionStats.total,
                reviewedToday: sessionStats.reviewed,
                mastered: Math.floor(sessionStats.total * 0.3), // Simuleret data
                learningProgress: 42, // Simuleret data
                streak: 5, // Simuleret data
              }}
            />

            <Card>
              <CardHeader>
                <CardTitle>Dagens Statistik</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <div className="mb-1 flex items-center justify-between text-sm">
                      <span>Let</span>
                      <span className="text-muted-foreground">{sessionStats.easy}</span>
                    </div>
                    <Progress
                      value={(sessionStats.easy / sessionStats.total) * 100}
                      className="h-2 bg-muted"
                      indicatorClassName="bg-green-500"
                    />
                  </div>
                  <div>
                    <div className="mb-1 flex items-center justify-between text-sm">
                      <span>Medium</span>
                      <span className="text-muted-foreground">{sessionStats.medium}</span>
                    </div>
                    <Progress
                      value={(sessionStats.medium / sessionStats.total) * 100}
                      className="h-2 bg-muted"
                      indicatorClassName="bg-yellow-500"
                    />
                  </div>
                  <div>
                    <div className="mb-1 flex items-center justify-between text-sm">
                      <span>Svært</span>
                      <span className="text-muted-foreground">{sessionStats.hard}</span>
                    </div>
                    <Progress
                      value={(sessionStats.hard / sessionStats.total) * 100}
                      className="h-2 bg-muted"
                      indicatorClassName="bg-red-500"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Kommende Gennemgang</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center justify-between rounded-lg border p-3">
                    <div>
                      <p className="font-medium">I dag</p>
                      <p className="text-sm text-muted-foreground">5 kort</p>
                    </div>
                    <Button variant="outline" size="sm">
                      Gennemgå
                    </Button>
                  </div>
                  <div className="flex items-center justify-between rounded-lg border p-3">
                    <div>
                      <p className="font-medium">I morgen</p>
                      <p className="text-sm text-muted-foreground">3 kort</p>
                    </div>
                    <Button variant="outline" size="sm" disabled>
                      Venter
                    </Button>
                  </div>
                  <div className="flex items-center justify-between rounded-lg border p-3">
                    <div>
                      <p className="font-medium">Om 3 dage</p>
                      <p className="text-sm text-muted-foreground">8 kort</p>
                    </div>
                    <Button variant="outline" size="sm" disabled>
                      Venter
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>

      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; 2025 أتعلم العربية (Ata'allam al-Arabiya). Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">
              Om os
            </Link>
            <Link href="/contact" className="hover:underline">
              Kontakt
            </Link>
            <Link href="/privacy" className="hover:underline">
              Privatlivspolitik
            </Link>
            <Link href="/terms" className="hover:underline">
              Vilkår
            </Link>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 158 64% 32%; /* Emerald-700 lignende */
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 158 64% 96%; /* Lidt lysere Emerald-accent */
    --accent-foreground: 158 64% 32%; /* Matcher primær for kontrast */
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 158 64% 32%; /* Matcher primær */
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 158 64% 32%; /* Bevarer Emerald-700 lignende for mørk tilstand */
    --primary-foreground: 210 40% 98%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 158 64% 14%; /* Mørkere Emerald-accent */
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 158 64% 32%; /* Matcher primær */
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* Arabisk tekst styling */
  .font-arabic {
    font-family: var(--font-arabic); /* Sikrer at den arabiske font anvendes */
  }

  /* RTL tekst container */
  [dir="rtl"] {
    text-align: right;
  }
}
</file>

<file path="app/layout.tsx">
// app/layout.tsx
import type React from "react";
import "@/app/globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import localFont from "next/font/local";
import Script from "next/script";
import { ThemeProvider } from "@/components/theme-provider";

const inter = Inter({
  subsets: ["latin"],
  variable: "--font-sans",
  display: "swap",
});

// Indlæs arabisk font
const scheherazade = localFont({
  src: [
    {
      path: "../public/fonts/ScheherazadeNew-Regular.ttf", // Sti til regular font
      weight: "400",
      style: "normal",
    },
    {
      path: "../public/fonts/ScheherazadeNew-Bold.ttf",   // Sti til bold font
      weight: "700",
      style: "normal",
    },
  ],
  variable: "--font-arabic",
  display: "swap",
});

export const metadata: Metadata = {
  title: "أتعلم العربية | Ata'allam al-Arabiya | Lær Arabisk",
  description: "En avanceret læringsplatform til at lære arabisk og Quran",
  manifest: "/manifest.json", // Sørg for at denne fil findes i /public
  themeColor: "#047857", // Emerald-700 farve
  appleWebApp: {
    capable: true,
    statusBarStyle: "default",
    title: "Quranic Arabic Trainer",
  },
  formatDetection: {
    telephone: false,
  },
  viewport: {
    width: "device-width",
    initialScale: 1,
    maximumScale: 1,
    userScalable: false,
  },
  // generator: "v0.dev", // Kan fjernes hvis ikke relevant
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html
      lang="da"
      dir="ltr"
      suppressHydrationWarning // Nyttig for at undgå hydration fejl med server-renderet indhold og client-side logik som temaer
      className={`${inter.variable} ${scheherazade.variable}`} // Gør font variable tilgængelige globalt
    >
      <body className="font-sans antialiased"> {/* Anvender Inter som standard font */}
        <ThemeProvider
          attribute="class"
          defaultTheme="light" // Sæt standard tema til lys
          enableSystem // Tillad system præference for tema
          disableTransitionOnChange // Undgå overgange ved tema skift for at forhindre flimmer
        >
          {children}
        </ThemeProvider>
        {/* Script til registrering af Service Worker for PWA funktionalitet */}
        <Script id="register-sw" strategy="afterInteractive">
          {`
            if ('serviceWorker' in navigator) {
              window.addEventListener('load', function() {
                navigator.serviceWorker.register('/sw.js').then( // Sørg for at sw.js er i /public
                  function(registration) {
                    console.log('Service Worker registration successful with scope: ', registration.scope);
                  },
                  function(err) {
                    console.log('Service Worker registration failed: ', err);
                  }
                );
              });
            }
          `}
        </Script>
      </body>
    </html>
  );
}
</file>

<file path="app/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/manifest.ts">
import type { MetadataRoute } from "next"

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: "Quranic Arabic Trainer",
    short_name: "QATrainer",
    description: "Lær arabisk med fokus på Quran",
    start_url: "/",
    display: "standalone",
    background_color: "#ffffff",
    theme_color: "#10b981",
    icons: [
      {
        src: "/icons/icon-192x192.png",
        sizes: "192x192",
        type: "image/png",
        purpose: "any maskable",
      },
      {
        src: "/icons/icon-384x384.png",
        sizes: "384x384",
        type: "image/png",
      },
      {
        src: "/icons/icon-512x512.png",
        sizes: "512x512",
        type: "image/png",
      },
    ],
  }
}
</file>

<file path="app/page.tsx">
"use client";

import Link from "next/link";
import { BookOpen, GraduationCap, Languages, MessageSquare, Search, User, ArrowRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { GlassmorphismHeader } from "@/components/glassmorphism-header";
import { calculatePercentage } from "@/lib/utils"; // Importer funktionen her

// Eksempel på data - dette skal erstattes med reel datahentning
const userProgress = {
  alphabet: { mastered: 12, total: 28 },
  grammar: { lessonsCompleted: 3, totalLessons: 20 },
  vocabulary: { wordsLearned: 45, totalWords: 200 },
  conversation: { practiced: 2, total: 10 },
};

// const calculatePercentage = (current: number, total: number) => { // FJERN DENNE LOKALE DEFINITION
//   if (total === 0) return 0;
//   return Math.round((current / total) * 100);
// };

export default function Dashboard() {
  const alphabetProgress = calculatePercentage(userProgress.alphabet.mastered, userProgress.alphabet.total);
  const grammarProgress = calculatePercentage(userProgress.grammar.lessonsCompleted, userProgress.grammar.totalLessons);
  const vocabularyProgress = calculatePercentage(userProgress.vocabulary.wordsLearned, userProgress.vocabulary.totalWords);
  const conversationProgress = calculatePercentage(userProgress.conversation.practiced, userProgress.conversation.total);

  const courses = [
    { id: "begynder", title: "Arabisk for Begyndere", description: "Grundlæggende arabisk for nybegyndere", progress: 35, modules: 7, students: 1245, link: "/kurser/begynder" },
    { id: "quran-intro", title: "Quran Arabisk Introduktion", description: "Forstå det særlige sprog i Quran", progress: 20, modules: 10, students: 2130, link: "/kurser/quran-intro" },
    { id: "kalligrafi", title: "Arabisk Kalligrafi", description: "Lær den smukke kunst at skrive arabisk", progress: 0, modules: 5, students: 875, link: "/kurser/kalligrafi" },
  ];

  const quranStudies = [
    { id: "al-fatiha", title: "Surah Al-Fatiha Studie", description: "Dybdegående analyse af åbningskapitlet", progress: 60, verses: 7, link: "/quran/study/1" },
    { id: "al-ikhlas", title: "Surah Al-Ikhlas Studie", description: "Lær om den rene monoteisme", progress: 25, verses: 4, link: "/quran/study/112" },
  ];

  const practiceModules = [
    { id: "vocab-flashcards", title: "Ordforråds Flashcards", description: "Øv arabiske ord med spaced repetition", status: "45 kort klar", link: "/vocabulary/flashcards" },
    { id: "listening-exercises", title: "Lytteøvelser", description: "Træn din arabiske lytteforståelse", status: "5 nye klip", link: "/practice/listening" },
    { id: "grammar-quiz", title: "Grammatik Quiz", description: "Test din forståelse af arabisk grammatik", status: "3 quizzer klar", link: "/practice/quiz" },
  ];

  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-emerald-50 to-white dark:from-gray-900 dark:to-gray-950">
      <GlassmorphismHeader />
      <main className="container flex-1 py-24">
        <div className="mb-8">
          <h1 className="text-3xl font-bold tracking-tight">مرحبًا بك / Velkommen tilbage</h1>
          <p className="text-muted-foreground">Fortsæt din rejse med at lære arabisk og Quran</p>
        </div>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-8">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-primary">
                <BookOpen className="h-5 w-5" />
                <span>Arabisk Alfabet</span>
              </CardTitle>
              <CardDescription>Lær de arabiske bogstaver og udtale</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary-foreground dark:text-primary">
                {userProgress.alphabet.mastered}/{userProgress.alphabet.total}
              </div>
              <p className="text-sm text-muted-foreground">Bogstaver mestret</p>
              <Progress value={alphabetProgress} className="mt-2 h-2 bg-primary/20" />
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full bg-primary hover:bg-primary/90 text-primary-foreground">
                <Link href="/alphabet">Fortsæt Læring</Link>
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-primary">
                <GraduationCap className="h-5 w-5" />
                <span>Grundlæggende Grammatik</span>
              </CardTitle>
              <CardDescription>Forstå arabisk grammatik og struktur</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary-foreground dark:text-primary">
                {userProgress.grammar.lessonsCompleted}/{userProgress.grammar.totalLessons}
              </div>
              <p className="text-sm text-muted-foreground">Lektioner gennemført</p>
              <Progress value={grammarProgress} className="mt-2 h-2 bg-primary/20" />
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full bg-primary hover:bg-primary/90 text-primary-foreground">
                <Link href="/grammar">Start Næste Lektion</Link>
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-primary">
                <Languages className="h-5 w-5" />
                <span>Quran Ordforråd</span>
              </CardTitle>
              <CardDescription>Lær de mest almindelige ord i Quran</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary-foreground dark:text-primary">
                {userProgress.vocabulary.wordsLearned}/{userProgress.vocabulary.totalWords}
              </div>
              <p className="text-sm text-muted-foreground">Ord lært</p>
              <Progress value={vocabularyProgress} className="mt-2 h-2 bg-primary/20" />
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full bg-primary hover:bg-primary/90 text-primary-foreground">
                <Link href="/vocabulary/flashcards">Øv Ordforråd</Link>
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-primary">
                <MessageSquare className="h-5 w-5" />
                <span>Samtaleøvelser</span>
              </CardTitle>
              <CardDescription>Øv praktiske samtaler på arabisk</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary-foreground dark:text-primary">
                {userProgress.conversation.practiced}/{userProgress.conversation.total}
              </div>
              <p className="text-sm text-muted-foreground">Samtaler øvet</p>
              <Progress value={conversationProgress} className="mt-2 h-2 bg-primary/20" />
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full bg-primary hover:bg-primary/90 text-primary-foreground">
                <Link href="/practice/conversation">Start Samtale</Link>
              </Button>
            </CardFooter>
          </Card>
        </div>
        <div>
          <Tabs defaultValue="courses" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="courses">Kurser</TabsTrigger>
              <TabsTrigger value="quran">Quran Studie</TabsTrigger>
              <TabsTrigger value="practice">Øvelser</TabsTrigger>
            </TabsList>
            <TabsContent value="courses" className="mt-6">
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {courses.map((course) => (
                  <Card key={course.id}>
                    <CardHeader>
                      <CardTitle>{course.title}</CardTitle>
                      <CardDescription>{course.description}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Fremskridt: {course.progress}%</span>
                        <span>{course.modules} moduler</span>
                      </div>
                      <Progress value={course.progress} className="h-2 bg-primary/20" />
                      <div className="mt-3 flex items-center gap-2 text-sm text-muted-foreground">
                        <User className="h-4 w-4" />
                        <span>{course.students.toLocaleString()} studerende</span>
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button asChild variant="outline" className="w-full">
                        <Link href={course.link}>
                          {course.progress > 0 ? "Fortsæt Kursus" : "Start Kursus"}
                          <ArrowRight className="ml-2 h-4 w-4" />
                        </Link>
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>
            <TabsContent value="quran" className="mt-6">
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {quranStudies.map((study) => (
                  <Card key={study.id}>
                    <CardHeader>
                      <CardTitle>{study.title}</CardTitle>
                      <CardDescription>{study.description}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between text-sm mb-1">
                        <span>Fremskridt: {study.progress}%</span>
                        <span>{study.verses} vers</span>
                      </div>
                      <Progress value={study.progress} className="h-2 bg-primary/20" />
                    </CardContent>
                    <CardFooter>
                      <Button asChild variant="outline" className="w-full">
                        <Link href={study.link}>
                          {study.progress > 0 ? "Fortsæt Studie" : "Start Studie"}
                           <ArrowRight className="ml-2 h-4 w-4" />
                        </Link>
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>
            <TabsContent value="practice" className="mt-6">
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {practiceModules.map((practice) => (
                  <Card key={practice.id}>
                    <CardHeader>
                      <CardTitle>{practice.title}</CardTitle>
                      <CardDescription>{practice.description}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="text-center text-sm text-muted-foreground">
                        {practice.status}
                      </div>
                    </CardContent>
                    <CardFooter>
                      <Button asChild variant="outline" className="w-full">
                        <Link href={practice.link}>
                          Start Øvelse
                           <ArrowRight className="ml-2 h-4 w-4" />
                        </Link>
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
        <div className="mt-8 rounded-lg border bg-card p-6 shadow-sm">
          <h2 className="mb-4 text-xl font-semibold">Din Anbefalede Læringssti</h2>
          <div className="space-y-4">
            <div className="flex items-center gap-4 p-3 rounded-md hover:bg-muted transition-colors">
              <div className="flex h-10 w-10 items-center justify-center rounded-full bg-primary/10 text-primary">
                <span className="font-bold">1</span>
              </div>
              <div className="flex-1">
                <h3 className="font-medium">Fuldfør Arabisk Alfabet</h3>
                <p className="text-sm text-muted-foreground">Lær de resterende {userProgress.alphabet.total - userProgress.alphabet.mastered} bogstaver og deres udtale.</p>
              </div>
              <Button size="sm" asChild>
                <Link href="/alphabet">Start</Link>
              </Button>
            </div>
            <div className="flex items-center gap-4 p-3 rounded-md hover:bg-muted transition-colors opacity-70">
              <div className="flex h-10 w-10 items-center justify-center rounded-full bg-muted text-muted-foreground">
                <span className="font-bold">2</span>
              </div>
              <div className="flex-1">
                <h3 className="font-medium">Grundlæggende Ordforråd - Sæt 2</h3>
                <p className="text-sm text-muted-foreground">Lær de næste 20 almindelige arabiske ord.</p>
              </div>
              <Button size="sm" variant="outline" disabled>
                Låst
              </Button>
            </div>
          </div>
        </div>
      </main>
      <footer className="border-t bg-muted/40">
        <div className="container flex flex-col items-center justify-between gap-4 py-6 md:h-16 md:flex-row md:py-0">
          <div className="text-center text-sm text-muted-foreground md:text-left">
            &copy; {new Date().getFullYear()} Ata'allam al-Arabiya. Alle rettigheder forbeholdes.
          </div>
          <div className="flex gap-4 text-sm text-muted-foreground">
            <Link href="/about" className="hover:underline">Om os</Link>
            <Link href="/contact" className="hover:underline">Kontakt</Link>
            <Link href="/privacy" className="hover:underline">Privatlivspolitik</Link>
            <Link href="/terms" className="hover:underline">Vilkår</Link>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="app/sw.ts">
// Forbedret service worker med avancerede caching-strategier
// Denne fil implementerer forskellige caching-strategier for forskellige typer af ressourcer

// Definer cache navne og versioner
const STATIC_CACHE_NAME = "quranic-arabic-trainer-static-v1"
const DYNAMIC_CACHE_NAME = "quranic-arabic-trainer-dynamic-v1"
const QURAN_CACHE_NAME = "quranic-arabic-trainer-quran-v1"
const API_CACHE_NAME = "quranic-arabic-trainer-api-v1"

// Ressourcer, der skal caches ved installation (app shell)
const APP_SHELL_RESOURCES = [
  "/",
  "/offline",
  "/manifest.json",
  "/icons/icon-192x192.png",
  "/icons/icon-512x512.png",
  "/fonts/ScheherazadeNew-Regular.ttf",
  "/fonts/ScheherazadeNew-Bold.ttf",
]

// Quran-relaterede ressourcer, der skal precaches
const QURAN_RESOURCES = [
  // Disse ville være specifikke Quran-sider eller ressourcer
  "/quran/1",
  "/quran/2",
  "/quran/data/surah-1.json",
  "/quran/data/surah-2.json",
]

// Installer service worker og cache app shell
self.addEventListener("install", (event: any) => {
  event.waitUntil(
    Promise.all([
      // Cache app shell
      caches
        .open(STATIC_CACHE_NAME)
        .then((cache) => {
          console.log("[Service Worker] Caching app shell")
          return cache.addAll(APP_SHELL_RESOURCES)
        }),

      // Cache Quran resources
      caches
        .open(QURAN_CACHE_NAME)
        .then((cache) => {
          console.log("[Service Worker] Caching Quran resources")
          return cache.addAll(QURAN_RESOURCES)
        }),
    ]),
  )
})

// Aktivér service worker og ryd gamle caches
self.addEventListener("activate", (event: any) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (
            cacheName !== STATIC_CACHE_NAME &&
            cacheName !== DYNAMIC_CACHE_NAME &&
            cacheName !== QURAN_CACHE_NAME &&
            cacheName !== API_CACHE_NAME
          ) {
            console.log("[Service Worker] Deleting old cache:", cacheName)
            return caches.delete(cacheName)
          }
        }),
      )
    }),
  )

  // Claim clients så service worker overtager kontrol med det samme
  return (self as any).clients.claim()
})

// Hjælpefunktion til at bestemme, om en anmodning er en API-anmodning
const isApiRequest = (request: Request) => {
  const url = new URL(request.url)
  return url.pathname.startsWith("/api/")
}

// Hjælpefunktion til at bestemme, om en anmodning er en Quran-ressource
const isQuranResource = (request: Request) => {
  const url = new URL(request.url)
  return url.pathname.startsWith("/quran/")
}

// Hjælpefunktion til at bestemme, om en anmodning er en statisk ressource
const isStaticResource = (request: Request) => {
  const url = new URL(request.url)
  return (
    url.pathname.match(/\.(js|css|woff2|ttf|woff|eot|svg|png|jpg|jpeg|gif|webp)$/) ||
    APP_SHELL_RESOURCES.includes(url.pathname)
  )
}

// Stale-while-revalidate strategi for API-anmodninger
const staleWhileRevalidate = async (request: Request, cacheName: string) => {
  const cachedResponse = await caches.match(request)

  const fetchPromise = fetch(request)
    .then((response) => {
      // Kontrollér, om responsen er gyldig
      if (!response || response.status !== 200 || response.type !== "basic") {
        return response
      }

      // Klone responsen, da den kun kan bruges én gang
      const responseToCache = response.clone()

      // Åbn cachen og gem den nye respons
      caches.open(cacheName).then((cache) => {
        cache.put(request, responseToCache)
      })

      return response
    })
    .catch((error) => {
      console.error("[Service Worker] Fetch failed:", error)
      // Returner cachedResponse, hvis den findes, ellers null
      return cachedResponse || null
    })

  // Returner cachedResponse med det samme, hvis den findes
  return cachedResponse || fetchPromise
}

// Cache-first strategi for statiske ressourcer
const cacheFirst = async (request: Request, cacheName: string) => {
  const cachedResponse = await caches.match(request)

  if (cachedResponse) {
    return cachedResponse
  }

  try {
    const response = await fetch(request)

    // Kontrollér, om responsen er gyldig
    if (!response || response.status !== 200 || response.type !== "basic") {
      return response
    }

    // Klone responsen, da den kun kan bruges én gang
    const responseToCache = response.clone()

    // Åbn cachen og gem den nye respons
    const cache = await caches.open(cacheName)
    cache.put(request, responseToCache)

    return response
  } catch (error) {
    console.error("[Service Worker] Fetch failed:", error)

    // Hvis det er en navigationsanmodning, returner offline-siden
    if (request.mode === "navigate") {
      const offlineCache = await caches.open(STATIC_CACHE_NAME)
      return offlineCache.match("/offline")
    }

    return null
  }
}

// Network-first strategi for dynamiske ressourcer
const networkFirst = async (request: Request, cacheName: string) => {
  try {
    const response = await fetch(request)

    // Kontrollér, om responsen er gyldig
    if (!response || response.status !== 200) {
      throw new Error("Invalid response")
    }

    // Klone responsen, da den kun kan bruges én gang
    const responseToCache = response.clone()

    // Åbn cachen og gem den nye respons
    const cache = await caches.open(cacheName)
    cache.put(request, responseToCache)

    return response
  } catch (error) {
    console.log("[Service Worker] Falling back to cache for:", request.url)

    const cachedResponse = await caches.match(request)

    if (cachedResponse) {
      return cachedResponse
    }

    // Hvis det er en navigationsanmodning, returner offline-siden
    if (request.mode === "navigate") {
      const offlineCache = await caches.open(STATIC_CACHE_NAME)
      return offlineCache.match("/offline")
    }

    return null
  }
}

// Håndter fetch-anmodninger med forskellige strategier
self.addEventListener("fetch", (event: any) => {
  const request = event.request

  // Skip cross-origin anmodninger
  if (!request.url.startsWith(self.location.origin)) {
    return
  }

  // Vælg caching-strategi baseret på anmodningstype
  if (isApiRequest(request)) {
    // Stale-while-revalidate for API-anmodninger
    event.respondWith(staleWhileRevalidate(request, API_CACHE_NAME))
  } else if (isQuranResource(request)) {
    // Cache-first for Quran-ressourcer
    event.respondWith(cacheFirst(request, QURAN_CACHE_NAME))
  } else if (isStaticResource(request)) {
    // Cache-first for statiske ressourcer
    event.respondWith(cacheFirst(request, STATIC_CACHE_NAME))
  } else {
    // Network-first for alle andre anmodninger
    event.respondWith(networkFirst(request, DYNAMIC_CACHE_NAME))
  }
})

// Håndter synkronisering af offline data
self.addEventListener("sync", (event: any) => {
  if (event.tag === "sync-offline-data") {
    event.waitUntil(syncOfflineData())
  }
})

// Funktion til at synkronisere offline data
async function syncOfflineData() {
  try {
    // Hent offline data fra IndexedDB
    const db = await openDatabase()
    const offlineData = await getAllOfflineData(db)

    // Hvis der ikke er noget offline data, afslut
    if (offlineData.length === 0) {
      return
    }

    console.log("[Service Worker] Syncing offline data:", offlineData.length, "items")

    // Send hver offline data-element til serveren
    const syncPromises = offlineData.map(async (item) => {
      try {
        const response = await fetch(item.url, {
          method: item.method,
          headers: item.headers,
          body: item.body,
        })

        if (response.ok) {
          // Hvis synkroniseringen lykkedes, fjern elementet fra IndexedDB
          await deleteOfflineData(db, item.id)
          return { success: true, id: item.id }
        } else {
          return { success: false, id: item.id, error: "Server returned error" }
        }
      } catch (error) {
        return { success: false, id: item.id, error: error.message }
      }
    })

    // Vent på, at alle synkroniseringer er færdige
    const results = await Promise.all(syncPromises)

    // Log resultater
    const successful = results.filter((r) => r.success).length
    const failed = results.filter((r) => !r.success).length

    console.log("[Service Worker] Sync completed:", successful, "successful,", failed, "failed")

    // Hvis der er fejlede synkroniseringer, planlæg en ny synkronisering
    if (failed > 0) {
      await (self as any).registration.sync.register("sync-offline-data")
    }
  } catch (error) {
    console.error("[Service Worker] Sync error:", error)
  }
}

// Hjælpefunktioner til at arbejde med IndexedDB
function openDatabase() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("offlineData", 1)

    request.onupgradeneeded = (event) => {
      const db = request.result
      if (!db.objectStoreNames.contains("requests")) {
        db.createObjectStore("requests", { keyPath: "id", autoIncrement: true })
      }
    }

    request.onsuccess = () => resolve(request.result)
    request.onerror = () => reject(request.error)
  })
}

function getAllOfflineData(db: any) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction("requests", "readonly")
    const store = transaction.objectStore("requests")
    const request = store.getAll()

    request.onsuccess = () => resolve(request.result)
    request.onerror = () => reject(request.error)
  })
}

function deleteOfflineData(db: any, id: number) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction("requests", "readwrite")
    const store = transaction.objectStore("requests")
    const request = store.delete(id)

    request.onsuccess = () => resolve(request.result)
    request.onerror = () => reject(request.error)
  })
}

// Håndter push-notifikationer
self.addEventListener("push", (event: any) => {
  const data = event.data.json()
  const options = {
    body: data.body,
    icon: "/icons/icon-192x192.png",
    badge: "/icons/badge-72x72.png",
    data: {
      url: data.url,
    },
    actions: data.actions || [],
  }

  event.waitUntil(self.registration.showNotification(data.title, options))
})

// Håndter klik på notifikationer
self.addEventListener("notificationclick", (event: any) => {
  event.notification.close()

  // Hvis der blev klikket på en handling
  if (event.action) {
    // Håndter forskellige handlinger
    switch (event.action) {
      case "open":
        event.waitUntil(clients.openWindow(event.notification.data.url))
        break
      case "dismiss":
        // Gør ingenting, notifikationen er allerede lukket
        break
      default:
        event.waitUntil(clients.openWindow(event.notification.data.url))
    }
  } else {
    // Standard handling, hvis der ikke blev klikket på en specifik handling
    event.waitUntil(clients.openWindow(event.notification.data.url))
  }
})
</file>

<file path="apps/api/prisma/migrations/20250525050949_init_core_entities/migration.sql">
-- CreateTable
CREATE TABLE "User" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "email" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    "name" TEXT,
    "role" TEXT NOT NULL DEFAULT 'user',
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL
);

-- CreateTable
CREATE TABLE "Word" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "arabic" TEXT NOT NULL,
    "root" TEXT,
    "meaning" TEXT NOT NULL,
    "verseId" INTEGER,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Word_verseId_fkey" FOREIGN KEY ("verseId") REFERENCES "Verse" ("id") ON DELETE SET NULL ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Verse" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "surah" INTEGER NOT NULL,
    "ayah" INTEGER NOT NULL,
    "text" TEXT NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL
);

-- CreateTable
CREATE TABLE "Lesson" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "title" TEXT NOT NULL,
    "content" TEXT NOT NULL,
    "userId" INTEGER NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Lesson_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Quiz" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "title" TEXT NOT NULL,
    "lessonId" INTEGER NOT NULL,
    "userId" INTEGER NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Quiz_lessonId_fkey" FOREIGN KEY ("lessonId") REFERENCES "Lesson" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
    CONSTRAINT "Quiz_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
</file>

<file path="apps/api/prisma/migrations/20250526015729_add_missing_modules/migration.sql">
-- CreateTable
CREATE TABLE "Flashcard" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "front" TEXT NOT NULL,
    "back" TEXT NOT NULL,
    "userId" INTEGER NOT NULL,
    "stats" JSONB,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Flashcard_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Grammar" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "rule" TEXT NOT NULL,
    "example" TEXT NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL
);

-- CreateTable
CREATE TABLE "Pronunciation" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "userId" INTEGER NOT NULL,
    "audioUrl" TEXT NOT NULL,
    "feedback" TEXT,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Pronunciation_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Progress" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "userId" INTEGER NOT NULL,
    "data" JSONB NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Progress_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateTable
CREATE TABLE "Settings" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "userId" INTEGER NOT NULL,
    "preferences" JSONB NOT NULL,
    "createdAt" DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" DATETIME NOT NULL,
    CONSTRAINT "Settings_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);

-- CreateIndex
CREATE UNIQUE INDEX "Settings_userId_key" ON "Settings"("userId");
</file>

<file path="apps/api/prisma/migrations/migration_lock.toml">
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "sqlite"
</file>

<file path="apps/api/src/modules/auth/controllers/auth/auth.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { AuthController } from './auth.controller';

describe('AuthController', () => {
  let controller: AuthController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [AuthController],
    }).compile();

    controller = module.get<AuthController>(AuthController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/auth/controllers/auth/auth.controller.ts">
import { Controller, Post, Body, HttpCode, HttpStatus } from '@nestjs/common';
import { AuthService } from '../../services/auth/auth.service';
import { CreateAuthDto } from '../../dtos/create-auth.dto';
import { LoginAuthDto } from '../../dtos/login-auth.dto';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';

@ApiTags('Auth')
@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('register')
  @ApiOperation({ summary: 'Register a new user' })
  @ApiResponse({ status: 201, description: 'User registered successfully' })
  async register(@Body() dto: CreateAuthDto) {
    return this.authService.register(dto);
  }

  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'Login a user' })
  @ApiResponse({ status: 200, description: 'User logged in successfully' })
  async login(@Body() dto: LoginAuthDto) {
    return this.authService.login(dto);
  }
}
</file>

<file path="apps/api/src/modules/auth/dtos/create-auth.dto.ts">
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';

export class CreateAuthDto {
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @MinLength(6)
  password: string;

  @IsNotEmpty()
  name: string;
}
</file>

<file path="apps/api/src/modules/auth/dtos/login-auth.dto.ts">
import { IsEmail, IsNotEmpty, MinLength } from 'class-validator';

export class LoginAuthDto {
  @IsEmail()
  email: string;

  @IsNotEmpty()
  @MinLength(6)
  password: string;
}
</file>

<file path="apps/api/src/modules/auth/services/auth/auth.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [AuthService],
    }).compile();

    service = module.get<AuthService>(AuthService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/auth/services/auth/auth.service.ts">
import { Injectable, UnauthorizedException, ConflictException } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcrypt';
import { CreateAuthDto } from '../../dtos/create-auth.dto';
import { LoginAuthDto } from '../../dtos/login-auth.dto';

@Injectable()
export class AuthService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly jwtService: JwtService,
  ) {}

  async register(dto: CreateAuthDto) {
    const existing = await this.prisma.users.findUnique({ where: { email: dto.email } });
    if (existing) throw new ConflictException('Email already in use');
    const hashed = await bcrypt.hash(dto.password, 10);
    const user = await this.prisma.user.create({
      data: {
        email: dto.email,
        password: hashed,
        name: dto.name,
      },
    });
    const token = this.jwtService.sign({ sub: user.id, email: user.email, role: user.role });
    return { access_token: token, user: { id: user.id, email: user.email, name: user.name, role: user.role } };
  }

  async login(dto: LoginAuthDto) {
    const user = await this.prisma.user.findUnique({ where: { email: dto.email } });
    if (!user) throw new UnauthorizedException('Invalid credentials');
    const valid = await bcrypt.compare(dto.password, user.password);
    if (!valid) throw new UnauthorizedException('Invalid credentials');
    const token = this.jwtService.sign({ sub: user.id, email: user.email, role: user.role });
    return { access_token: token, user: { id: user.id, email: user.email, name: user.name, role: user.role } };
  }
}
</file>

<file path="apps/api/src/modules/auth/auth.module.ts">
import { Module } from '@nestjs/common';
import { AuthService } from './services/auth/auth.service';
import { AuthController } from './controllers/auth/auth.controller';
import { PrismaModule } from '../prisma/prisma.module';
import { JwtModule } from '@nestjs/jwt';

@Module({
  imports: [PrismaModule, JwtModule.register({ secret: process.env.JWT_SECRET || 'dev_secret', signOptions: { expiresIn: '7d' } })],
  providers: [AuthService],
  controllers: [AuthController]
})
export class AuthModule {}
</file>

<file path="apps/api/src/modules/flashcard/flashcard.module.ts">
import { Module } from '@nestjs/common';

@Module({
  controllers: [],
  providers: [],
})
export class FlashcardModule {}
</file>

<file path="apps/api/src/modules/grammar/grammar.module.ts">
import { Module } from '@nestjs/common';

@Module({
  controllers: [],
  providers: [],
})
export class GrammarModule {}
</file>

<file path="apps/api/src/modules/lesson/controllers/lesson/lesson.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { LessonController } from './lesson.controller';

describe('LessonController', () => {
  let controller: LessonController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [LessonController],
    }).compile();

    controller = module.get<LessonController>(LessonController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/lesson/controllers/lesson/lesson.controller.ts">
import { Controller, Get, Post, Body, Patch, Param, Delete, ParseIntPipe, NotFoundException } from '@nestjs/common';
import { LessonService } from '../../services/lesson/lesson.service';
import { CreateLessonDto } from '../../dtos/create-lesson.dto/create-lesson.dto';
import { UpdateLessonDto } from '../../dtos/update-lesson.dto/update-lesson.dto';
import { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';

@ApiTags('lessons')
@Controller('lessons')
export class LessonController {
  constructor(private readonly lessonService: LessonService) {}

  @Post()
  @ApiOperation({ summary: 'Opret en ny lektion' })
  @ApiResponse({ status: 201, description: 'Lektionen er oprettet.' })
  @ApiResponse({ status: 400, description: 'Ugyldig input.' })
  @ApiBody({ type: CreateLessonDto })
  async create(@Body() createLessonDto: CreateLessonDto) {
    return this.lessonService.create(createLessonDto);
  }

  @Get()
  @ApiOperation({ summary: 'Hent alle lektioner' })
  @ApiResponse({ status: 200, description: 'Liste over lektioner.' })
  async findAll() {
    return this.lessonService.findAll();
  }

  @Get(':id')
  @ApiOperation({ summary: 'Hent en lektion ud fra ID' })
  @ApiResponse({ status: 200, description: 'Lektion fundet.' })
  @ApiResponse({ status: 404, description: 'Lektion ikke fundet.' })
  @ApiParam({ name: 'id', description: 'ID på lektionen', type: Number })
  async findOne(@Param('id', ParseIntPipe) id: number) {
    const lesson = await this.lessonService.findOne(id);
    if (!lesson) {
      throw new NotFoundException(`Lektion med ID ${id} ikke fundet`);
    }
    return lesson;
  }

  @Patch(':id')
  @ApiOperation({ summary: 'Opdater en lektion ud fra ID' })
  @ApiResponse({ status: 200, description: 'Lektionen er opdateret.' })
  @ApiResponse({ status: 400, description: 'Ugyldig input.' })
  @ApiResponse({ status: 404, description: 'Lektion ikke fundet.' })
  @ApiParam({ name: 'id', description: 'ID på lektionen', type: Number })
  @ApiBody({ type: UpdateLessonDto })
  async update(@Param('id', ParseIntPipe) id: number, @Body() updateLessonDto: UpdateLessonDto) {
    const lesson = await this.lessonService.update(id, updateLessonDto);
    if (!lesson) {
      throw new NotFoundException(`Lektion med ID ${id} ikke fundet`);
    }
    return lesson;
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Slet en lektion ud fra ID' })
  @ApiResponse({ status: 200, description: 'Lektionen er slettet.' })
  @ApiResponse({ status: 404, description: 'Lektion ikke fundet.' })
  @ApiParam({ name: 'id', description: 'ID på lektionen', type: Number })
  async remove(@Param('id', ParseIntPipe) id: number) {
    const lesson = await this.lessonService.remove(id);
    if (!lesson) {
      throw new NotFoundException(`Lektion med ID ${id} ikke fundet`);
    }
    return lesson;
  }
}
</file>

<file path="apps/api/src/modules/lesson/dtos/create-lesson.dto/create-lesson.dto.ts">
import { IsString, IsNotEmpty, IsInt } from 'class-validator';

export class CreateLessonDto {
  @IsString()
  @IsNotEmpty()
  title: string;

  @IsString()
  @IsNotEmpty()
  content: string;

  @IsInt()
  @IsNotEmpty()
  userId: number;
}
</file>

<file path="apps/api/src/modules/lesson/dtos/update-lesson.dto/update-lesson.dto.ts">
import { IsString, IsOptional, IsInt } from 'class-validator';

export class UpdateLessonDto {
  @IsString()
  @IsOptional()
  title?: string;

  @IsString()
  @IsOptional()
  content?: string;

  @IsInt()
  @IsOptional()
  userId?: number;
}
</file>

<file path="apps/api/src/modules/lesson/services/lesson/lesson.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { LessonService } from './lesson.service';

describe('LessonService', () => {
  let service: LessonService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [LessonService],
    }).compile();

    service = module.get<LessonService>(LessonService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/lesson/services/lesson/lesson.service.ts">
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { CreateLessonDto } from '../../dtos/create-lesson.dto/create-lesson.dto';
import { UpdateLessonDto } from '../../dtos/update-lesson.dto/update-lesson.dto';

@Injectable()
export class LessonService {
  constructor(private prisma: PrismaService) {}

  async create(createLessonDto: CreateLessonDto) {
    return this.prisma.lesson.create({
      data: createLessonDto,
    });
  }

  async findAll() {
    return this.prisma.lesson.findMany();
  }

  async findOne(id: number) {
    return this.prisma.lesson.findUnique({
      where: { id },
    });
  }

  async update(id: number, updateLessonDto: UpdateLessonDto) {
    return this.prisma.lesson.update({
      where: { id },
      data: updateLessonDto,
    });
  }

  async remove(id: number) {
    return this.prisma.lesson.delete({
      where: { id },
    });
  }
}
</file>

<file path="apps/api/src/modules/lesson/lesson.module.ts">
import { Module } from '@nestjs/common';
import { LessonController } from './controllers/lesson/lesson.controller';
import { LessonService } from './services/lesson/lesson.service';

@Module({
  controllers: [LessonController],
  providers: [LessonService]
})
export class LessonModule {}
</file>

<file path="apps/api/src/modules/prisma/prisma.module.ts">
import { Global, Module } from '@nestjs/common';
import { PrismaService } from './prisma.service';

@Global()
@Module({
  providers: [PrismaService],
  exports: [PrismaService],
})
export class PrismaModule {}
</file>

<file path="apps/api/src/modules/prisma/prisma.service.ts">
import { Injectable, OnModuleInit, INestApplication } from '@nestjs/common';
import { PrismaClient } from '@generated/prisma';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit {
  async onModuleInit() {
    await this.$connect();
  }

  async enableShutdownHooks(app: INestApplication) {
    (this.$on as any)('beforeExit', async () => {
      await app.close();
    });
  }
}
</file>

<file path="apps/api/src/modules/progress/progress.module.ts">
import { Module } from '@nestjs/common';

@Module({
  controllers: [],
  providers: [],
})
export class ProgressModule {}
</file>

<file path="apps/api/src/modules/pronunciation/pronunciation.module.ts">
import { Module } from '@nestjs/common';

@Module({
  controllers: [],
  providers: [],
})
export class PronunciationModule {}
</file>

<file path="apps/api/src/modules/quiz/controllers/quiz/quiz.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { QuizController } from './quiz.controller';

describe('QuizController', () => {
  let controller: QuizController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [QuizController],
    }).compile();

    controller = module.get<QuizController>(QuizController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/quiz/controllers/quiz/quiz.controller.ts">
import { Controller, Get, Post, Body, Param, Delete, Put, ParseIntPipe, NotFoundException, Patch } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiBody } from '@nestjs/swagger';
import { QuizService } from '../../services/quiz/quiz.service';
import { CreateQuizDto, UpdateQuizDto } from '../../dtos/quiz.dtos';
import { Quiz } from 'apps/api/generated/prisma';

@ApiTags('quizzes')
@Controller('quizzes')
export class QuizController {
  constructor(private readonly quizService: QuizService) {}

  @Post()
  @ApiOperation({ summary: 'Opret en ny quiz' })
  @ApiResponse({ status: 201, description: 'Quizzen er oprettet.', type: Quiz })
  @ApiResponse({ status: 400, description: 'Ugyldig input.' })
  @ApiBody({ type: CreateQuizDto })
  async create(@Body() createQuizDto: CreateQuizDto): Promise<Quiz> {
    return this.quizService.create(createQuizDto);
  }

  @Get()
  @ApiOperation({ summary: 'Hent alle quizzer' })
  @ApiResponse({ status: 200, description: 'Liste over quizzer.', type: [Quiz] })
  async findAll(): Promise<Quiz[]> {
    return this.quizService.findAll();
  }

  @Get(':id')
  @ApiOperation({ summary: 'Hent en quiz ud fra ID' })
  @ApiResponse({ status: 200, description: 'Quiz fundet.', type: Quiz })
  @ApiResponse({ status: 404, description: 'Quiz ikke fundet.' })
  @ApiParam({ name: 'id', description: 'ID på quizzen', type: String })
  async findOne(@Param('id', ParseIntPipe) id: number): Promise<Quiz> {
    const quiz = await this.quizService.findOne(id);
    if (!quiz) {
      throw new NotFoundException(`Quiz med ID ${id} ikke fundet`);
    }
    return quiz;
  }

  @Patch(':id')
  @ApiOperation({ summary: 'Opdater en quiz ud fra ID' })
  @ApiResponse({ status: 200, description: 'Quizzen er opdateret.', type: Quiz })
  @ApiResponse({ status: 404, description: 'Quiz ikke fundet.' })
  @ApiResponse({ status: 400, description: 'Ugyldig input.' })
  @ApiParam({ name: 'id', description: 'ID på quizzen', type: String })
  @ApiBody({ type: UpdateQuizDto })
  async update(@Param('id', ParseIntPipe) id: number, @Body() updateQuizDto: UpdateQuizDto): Promise<Quiz> {
    const quiz = await this.quizService.update(id, updateQuizDto);
    if (!quiz) {
      throw new NotFoundException(`Quiz med ID ${id} ikke fundet`);
    }
    return quiz;
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Slet en quiz ud fra ID' })
  @ApiResponse({ status: 200, description: 'Quizzen er slettet.', type: Quiz })
  @ApiResponse({ status: 404, description: 'Quiz ikke fundet.' })
  @ApiParam({ name: 'id', description: 'ID på quizzen', type: String })
  async remove(@Param('id', ParseIntPipe) id: number): Promise<Quiz> {
    const quiz = await this.quizService.remove(id);
    if (!quiz) {
      throw new NotFoundException(`Quiz med ID ${id} ikke fundet`);
    }
    return quiz;
  }
}
</file>

<file path="apps/api/src/modules/quiz/dtos/create-quiz.dto.ts">
import { ApiProperty } from '@nestjs/swagger';
import { IsString, IsNotEmpty, IsOptional, IsInt, IsArray } from 'class-validator';

export class CreateQuizDto {
  @ApiProperty({ description: 'Titlen på quizzen' })
  @IsString()
  @IsNotEmpty()
  title: string;

  @ApiProperty({ description: 'Beskrivelse af quizzen', required: false })
  @IsString()
  @IsOptional()
  description?: string;

  @ApiProperty({ description: 'ID på den lektion, quizzen tilhører' })
  @IsInt()
  @IsNotEmpty()
  lessonId: number;

  @ApiProperty({ description: 'ID på brugeren, der opretter quizzen' })
  @IsInt()
  @IsNotEmpty()
  userId: number;

  @ApiProperty({ description: 'Liste af spørgsmål-IDer inkluderet i quizzen', required: false })
  @IsArray()
  @IsInt({ each: true })
  @IsOptional()
  questionIds?: number[];
}
</file>

<file path="apps/api/src/modules/quiz/dtos/quiz.dtos.ts">
export * from './create-quiz.dto';
export * from './update-quiz.dto';
</file>

<file path="apps/api/src/modules/quiz/dtos/update-quiz.dto.ts">
import { PartialType } from '@nestjs/swagger';
import { CreateQuizDto } from './create-quiz.dto';

export class UpdateQuizDto extends PartialType(CreateQuizDto) {}
</file>

<file path="apps/api/src/modules/quiz/services/quiz/quiz.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { QuizService } from './quiz.service';

describe('QuizService', () => {
  let service: QuizService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [QuizService],
    }).compile();

    service = module.get<QuizService>(QuizService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/quiz/services/quiz/quiz.service.ts">
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { CreateQuizDto, UpdateQuizDto } from '../../dtos/quiz.dtos';
import { Quiz } from 'apps/api/generated/prisma';

@Injectable()
export class QuizService {
  constructor(private prisma: PrismaService) {}

  async create(createQuizDto: CreateQuizDto): Promise<Quiz> {
    return this.prisma.quiz.create({ data: createQuizDto });
  }

  async findAll(): Promise<Quiz[]> {
    return this.prisma.quiz.findMany();
  }

  async findOne(id: number): Promise<Quiz | null> {
    return this.prisma.quiz.findUnique({ where: { id } });
  }

  async update(id: number, updateQuizDto: UpdateQuizDto): Promise<Quiz | null> {
    return this.prisma.quiz.update({ where: { id }, data: updateQuizDto });
  }

  async remove(id: number): Promise<Quiz | null> {
    return this.prisma.quiz.delete({ where: { id } });
  }
}
</file>

<file path="apps/api/src/modules/quiz/quiz.module.ts">
import { Module } from '@nestjs/common';
import { QuizController } from './controllers/quiz/quiz.controller';
import { QuizService } from './services/quiz/quiz.service';

@Module({
  controllers: [QuizController],
  providers: [QuizService]
})
export class QuizModule {}
</file>

<file path="apps/api/src/modules/settings/settings.module.ts">
import { Module } from '@nestjs/common';
import { SettingsService } from './services/settings.service';
import { SettingsController } from './controllers/settings.controller';

@Module({
  controllers: [SettingsController],
  providers: [SettingsService],
})
export class SettingsModule {}
</file>

<file path="apps/api/src/modules/verse/controllers/verse/verse.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { VerseController } from './verse.controller';

describe('VerseController', () => {
  let controller: VerseController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [VerseController],
    }).compile();

    controller = module.get<VerseController>(VerseController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/verse/controllers/verse/verse.controller.ts">
import { Controller, Get, Post, Body, Param, Put, Delete, ParseIntPipe } from '@nestjs/common';
import { VerseService } from '../../services/verse/verse.service';
import { CreateVerseDto } from '../../dtos/create-verse.dto';
import { UpdateVerseDto } from '../../dtos/update-verse.dto';
import { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';

@ApiTags('Verses')
@Controller('verses')
export class VerseController {
  constructor(private readonly verseService: VerseService) {}

  @Post()
  @ApiOperation({ summary: 'Opret et nyt vers' })
  @ApiBody({ type: CreateVerseDto })
  @ApiResponse({ status: 201, description: 'Verset blev oprettet.' })
  create(@Body() createVerseDto: CreateVerseDto) {
    return this.verseService.create(createVerseDto);
  }

  @Get()
  @ApiOperation({ summary: 'Hent alle vers' })
  @ApiResponse({ status: 200, description: 'Liste af vers.' })
  findAll() {
    return this.verseService.findAll();
  }

  @Get(':id')
  @ApiOperation({ summary: 'Hent et vers via id' })
  @ApiParam({ name: 'id', type: Number, description: 'Vers ID' })
  @ApiResponse({ status: 200, description: 'Et enkelt vers.' })
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.verseService.findOne(id);
  }

  @Put(':id')
  @ApiOperation({ summary: 'Opdater et vers via id' })
  @ApiParam({ name: 'id', type: Number, description: 'Vers ID' })
  @ApiBody({ type: UpdateVerseDto })
  @ApiResponse({ status: 200, description: 'Verset blev opdateret.' })
  update(@Param('id', ParseIntPipe) id: number, @Body() updateVerseDto: UpdateVerseDto) {
    return this.verseService.update(id, updateVerseDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Slet et vers via id' })
  @ApiParam({ name: 'id', type: Number, description: 'Vers ID' })
  @ApiResponse({ status: 200, description: 'Verset blev slettet.' })
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.verseService.remove(id);
  }
}
</file>

<file path="apps/api/src/modules/verse/dtos/create-verse.dto.ts">
import { IsInt, IsString } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';

export class CreateVerseDto {
  @ApiProperty({ example: 1, description: 'Sura-nummeret' })
  @IsInt()
  surah: number;

  @ApiProperty({ example: 1, description: 'Ayah-nummeret' })
  @IsInt()
  ayah: number;

  @ApiProperty({ example: 'بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ', description: 'Teksten i verset' })
  @IsString()
  text: string;
}
</file>

<file path="apps/api/src/modules/verse/dtos/update-verse.dto.ts">
import { IsInt, IsString, IsOptional } from 'class-validator';
import { ApiPropertyOptional } from '@nestjs/swagger';

export class UpdateVerseDto {
  @ApiPropertyOptional({ example: 1, description: 'Sura-nummeret' })
  @IsOptional()
  @IsInt()
  surah?: number;

  @ApiPropertyOptional({ example: 1, description: 'Ayah-nummeret' })
  @IsOptional()
  @IsInt()
  ayah?: number;

  @ApiPropertyOptional({ example: 'بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ', description: 'Teksten i verset' })
  @IsOptional()
  @IsString()
  text?: string;
}
</file>

<file path="apps/api/src/modules/verse/services/verse/verse.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { VerseService } from './verse.service';

describe('VerseService', () => {
  let service: VerseService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [VerseService],
    }).compile();

    service = module.get<VerseService>(VerseService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/verse/services/verse/verse.service.ts">
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { CreateVerseDto } from '../../dtos/create-verse.dto';
import { UpdateVerseDto } from '../../dtos/update-verse.dto';

@Injectable()
export class VerseService {
  constructor(private readonly prisma: PrismaService) {}

  async create(data: CreateVerseDto) {
    return this.prisma.verse.create({ data });
  }

  async findAll() {
    return this.prisma.verse.findMany();
  }

  async findOne(id: number) {
    return this.prisma.verse.findUnique({ where: { id } });
  }

  async update(id: number, data: UpdateVerseDto) {
    return this.prisma.verse.update({ where: { id }, data });
  }

  async remove(id: number) {
    return this.prisma.verse.delete({ where: { id } });
  }
}
</file>

<file path="apps/api/src/modules/verse/verse.module.ts">
import { Module } from '@nestjs/common';
import { VerseController } from './controllers/verse/verse.controller';
import { VerseService } from './services/verse/verse.service';
import { PrismaModule } from '../prisma/prisma.module';

@Module({
  imports: [PrismaModule],
  controllers: [VerseController],
  providers: [VerseService]
})
export class VerseModule {}
</file>

<file path="apps/api/src/modules/words/controllers/words/words.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { WordsController } from './words.controller';

describe('WordsController', () => {
  let controller: WordsController;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [WordsController],
    }).compile();

    controller = module.get<WordsController>(WordsController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/words/controllers/words/words.controller.ts">
import { Controller, Get, Post, Body, Param, Put, Delete, ParseIntPipe } from '@nestjs/common';
import { WordsService } from '../../services/words/words.service';
import { CreateWordDto } from '../../dtos/create-word.dto';
import { UpdateWordDto } from '../../dtos/update-word.dto';
import { ApiTags, ApiOperation, ApiResponse, ApiBody, ApiParam } from '@nestjs/swagger';

@ApiTags('Words')
@Controller('words')
export class WordsController {
  constructor(private readonly wordsService: WordsService) {}

  @Post()
  @ApiOperation({ summary: 'Opret et nyt ord' })
  @ApiBody({ type: CreateWordDto })
  @ApiResponse({ status: 201, description: 'Ordet blev oprettet.' })
  create(@Body() createWordDto: CreateWordDto) {
    return this.wordsService.create(createWordDto);
  }

  @Get()
  @ApiOperation({ summary: 'Hent alle ord' })
  @ApiResponse({ status: 200, description: 'Liste af ord.' })
  findAll() {
    return this.wordsService.findAll();
  }

  @Get(':id')
  @ApiOperation({ summary: 'Hent et ord via id' })
  @ApiParam({ name: 'id', type: Number })
  @ApiResponse({ status: 200, description: 'Et enkelt ord.' })
  findOne(@Param('id', ParseIntPipe) id: number) {
    return this.wordsService.findOne(id);
  }

  @Put(':id')
  @ApiOperation({ summary: 'Opdater et ord via id' })
  @ApiParam({ name: 'id', type: Number })
  @ApiBody({ type: UpdateWordDto })
  @ApiResponse({ status: 200, description: 'Ordet blev opdateret.' })
  update(@Param('id', ParseIntPipe) id: number, @Body() updateWordDto: UpdateWordDto) {
    return this.wordsService.update(id, updateWordDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Slet et ord via id' })
  @ApiParam({ name: 'id', type: Number })
  @ApiResponse({ status: 200, description: 'Ordet blev slettet.' })
  remove(@Param('id', ParseIntPipe) id: number) {
    return this.wordsService.remove(id);
  }
}
</file>

<file path="apps/api/src/modules/words/dtos/create-word.dto.ts">
import { IsString, IsOptional, IsInt } from 'class-validator';

export class CreateWordDto {
  @IsString()
  arabic: string;

  @IsOptional()
  @IsString()
  root?: string;

  @IsString()
  meaning: string;

  @IsOptional()
  @IsInt()
  verseId?: number;
}
</file>

<file path="apps/api/src/modules/words/dtos/update-word.dto.ts">
import { IsString, IsOptional, IsInt } from 'class-validator';

export class UpdateWordDto {
  @IsOptional()
  @IsString()
  arabic?: string;

  @IsOptional()
  @IsString()
  root?: string;

  @IsOptional()
  @IsString()
  meaning?: string;

  @IsOptional()
  @IsInt()
  verseId?: number;
}
</file>

<file path="apps/api/src/modules/words/services/words/words.service.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { WordsService } from './words.service';

describe('WordsService', () => {
  let service: WordsService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [WordsService],
    }).compile();

    service = module.get<WordsService>(WordsService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});
</file>

<file path="apps/api/src/modules/words/services/words/words.service.ts">
import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../../prisma/prisma.service';
import { CreateWordDto } from '../../dtos/create-word.dto';
import { UpdateWordDto } from '../../dtos/update-word.dto';

@Injectable()
export class WordsService {
  constructor(private readonly prisma: PrismaService) {}

  async create(data: CreateWordDto) {
    return this.prisma.word.create({ data });
  }

  async findAll() {
    return this.prisma.word.findMany();
  }

  async findOne(id: number) {
    return this.prisma.word.findUnique({ where: { id } });
  }

  async update(id: number, data: UpdateWordDto) {
    return this.prisma.word.update({ where: { id }, data });
  }

  async remove(id: number) {
    return this.prisma.word.delete({ where: { id } });
  }
}
</file>

<file path="apps/api/src/modules/words/words.module.ts">
import { Module } from '@nestjs/common';
import { WordsController } from './controllers/words/words.controller';
import { WordsService } from './services/words/words.service';
import { PrismaModule } from '../prisma/prisma.module';

@Module({
  imports: [PrismaModule],
  controllers: [WordsController],
  providers: [WordsService]
})
export class WordsModule {}
</file>

<file path="apps/api/src/modules/quiz.module.ts">
import { Module } from '@nestjs/common';

@Module({})
export class QuizModule {}
</file>

<file path="apps/api/src/app.controller.spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { AppController } from './app.controller';
import { AppService } from './app.service';

describe('AppController', () => {
  let appController: AppController;

  beforeEach(async () => {
    const app: TestingModule = await Test.createTestingModule({
      controllers: [AppController],
      providers: [AppService],
    }).compile();

    appController = app.get<AppController>(AppController);
  });

  describe('root', () => {
    it('should return "Hello World!"', () => {
      expect(appController.getHello()).toBe('Hello World!');
    });
  });
});
</file>

<file path="apps/api/src/app.controller.ts">
import { Controller, Get } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }
}
</file>

<file path="apps/api/src/app.module.ts">
import { Module } from '@nestjs/common';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { PrismaModule } from './modules/prisma/prisma.module';
import { WordsModule } from './modules/words/words.module';
import { VerseModule } from './modules/verse/verse.module';
import { LessonModule } from './modules/lesson/lesson.module';
import { QuizModule } from './modules/quiz/quiz.module';

@Module({
  imports: [PrismaModule, WordsModule, VerseModule, LessonModule, QuizModule],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule {}
</file>

<file path="apps/api/src/app.service.ts">
import { Injectable } from '@nestjs/common';

@Injectable()
export class AppService {
  getHello(): string {
    return 'Hello World!';
  }
}
</file>

<file path="apps/api/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { WinstonModule } from 'nest-winston';
import { transports, format } from 'winston';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    logger: WinstonModule.createLogger({
      transports: [
        new transports.Console({
          format: format.combine(
            format.timestamp(),
            format.colorize(),
            format.simple()
          ),
        }),
      ],
    }),
  });

  const config = new DocumentBuilder()
    .setTitle('Quranic Arabic Trainer API')
    .setDescription('REST API documentation for Quranic Arabic Trainer')
    .setVersion('1.0')
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api/docs', app, document);

  await app.listen(process.env.PORT ?? 3000);
}
bootstrap();
</file>

<file path="apps/api/test/app.e2e-spec.ts">
import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { App } from 'supertest/types';
import { AppModule } from './../src/app.module';

describe('AppController (e2e)', () => {
  let app: INestApplication<App>;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/ (GET)', () => {
    return request(app.getHttpServer())
      .get('/')
      .expect(200)
      .expect('Hello World!');
  });
});
</file>

<file path="apps/api/test/jest-e2e.json">
{
  "moduleFileExtensions": ["js", "json", "ts"],
  "rootDir": ".",
  "testEnvironment": "node",
  "testRegex": ".e2e-spec.ts$",
  "transform": {
    "^.+\\.(t|j)s$": "ts-jest"
  }
}
</file>

<file path="apps/api/.gitignore">
# compiled output
/dist
/node_modules
/build

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
/coverage
/.nyc_output

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# temp directory
.temp
.tmp

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

/generated/prisma
</file>

<file path="apps/api/.prettierrc">
{
  "singleQuote": true,
  "trailingComma": "all"
}
</file>

<file path="apps/api/eslint.config.mjs">
// @ts-check
import eslint from '@eslint/js';
import eslintPluginPrettierRecommended from 'eslint-plugin-prettier/recommended';
import globals from 'globals';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  {
    ignores: ['eslint.config.mjs'],
  },
  eslint.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
  eslintPluginPrettierRecommended,
  {
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.jest,
      },
      ecmaVersion: 5,
      sourceType: 'module',
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
  },
  {
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-floating-promises': 'warn',
      '@typescript-eslint/no-unsafe-argument': 'warn'
    },
  },
);
</file>

<file path="apps/api/nest-cli.json">
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}
</file>

<file path="apps/api/README.md">
<p align="center">
  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo-small.svg" width="120" alt="Nest Logo" /></a>
</p>

[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456
[circleci-url]: https://circleci.com/gh/nestjs/nest

  <p align="center">A progressive <a href="http://nodejs.org" target="_blank">Node.js</a> framework for building efficient and scalable server-side applications.</p>
    <p align="center">
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/v/@nestjs/core.svg" alt="NPM Version" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/l/@nestjs/core.svg" alt="Package License" /></a>
<a href="https://www.npmjs.com/~nestjscore" target="_blank"><img src="https://img.shields.io/npm/dm/@nestjs/common.svg" alt="NPM Downloads" /></a>
<a href="https://circleci.com/gh/nestjs/nest" target="_blank"><img src="https://img.shields.io/circleci/build/github/nestjs/nest/master" alt="CircleCI" /></a>
<a href="https://coveralls.io/github/nestjs/nest?branch=master" target="_blank"><img src="https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#9" alt="Coverage" /></a>
<a href="https://discord.gg/G7Qnnhy" target="_blank"><img src="https://img.shields.io/badge/discord-online-brightgreen.svg" alt="Discord"/></a>
<a href="https://opencollective.com/nest#backer" target="_blank"><img src="https://opencollective.com/nest/backers/badge.svg" alt="Backers on Open Collective" /></a>
<a href="https://opencollective.com/nest#sponsor" target="_blank"><img src="https://opencollective.com/nest/sponsors/badge.svg" alt="Sponsors on Open Collective" /></a>
  <a href="https://paypal.me/kamilmysliwiec" target="_blank"><img src="https://img.shields.io/badge/Donate-PayPal-ff3f59.svg" alt="Donate us"/></a>
    <a href="https://opencollective.com/nest#sponsor"  target="_blank"><img src="https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg" alt="Support us"></a>
  <a href="https://twitter.com/nestframework" target="_blank"><img src="https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow" alt="Follow us on Twitter"></a>
</p>
  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)
  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->

## Description

[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.

## Project setup

```bash
$ pnpm install
```

## Compile and run the project

```bash
# development
$ pnpm run start

# watch mode
$ pnpm run start:dev

# production mode
$ pnpm run start:prod
```

## Run tests

```bash
# unit tests
$ pnpm run test

# e2e tests
$ pnpm run test:e2e

# test coverage
$ pnpm run test:cov
```

## Deployment

When you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the [deployment documentation](https://docs.nestjs.com/deployment) for more information.

If you are looking for a cloud-based platform to deploy your NestJS application, check out [Mau](https://mau.nestjs.com), our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:

```bash
$ pnpm install -g mau
$ mau deploy
```

With Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.

## Resources

Check out a few resources that may come in handy when working with NestJS:

- Visit the [NestJS Documentation](https://docs.nestjs.com) to learn more about the framework.
- For questions and support, please visit our [Discord channel](https://discord.gg/G7Qnnhy).
- To dive deeper and get more hands-on experience, check out our official video [courses](https://courses.nestjs.com/).
- Deploy your application to AWS with the help of [NestJS Mau](https://mau.nestjs.com) in just a few clicks.
- Visualize your application graph and interact with the NestJS application in real-time using [NestJS Devtools](https://devtools.nestjs.com).
- Need help with your project (part-time to full-time)? Check out our official [enterprise support](https://enterprise.nestjs.com).
- To stay in the loop and get updates, follow us on [X](https://x.com/nestframework) and [LinkedIn](https://linkedin.com/company/nestjs).
- Looking for a job, or have a job to offer? Check out our official [Jobs board](https://jobs.nestjs.com).

## Support

Nest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).

## Stay in touch

- Author - [Kamil Myśliwiec](https://twitter.com/kammysliwiec)
- Website - [https://nestjs.com](https://nestjs.com/)
- Twitter - [@nestframework](https://twitter.com/nestframework)

## License

Nest is [MIT licensed](https://github.com/nestjs/nest/blob/master/LICENSE).
</file>

<file path="apps/api/tsconfig.build.json">
{
  "extends": "./tsconfig.json",
  "exclude": ["node_modules", "test", "dist", "**/*spec.ts"]
}
</file>

<file path="apps/api/tsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@generated/prisma": ["./generated/prisma"]
    },
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2023",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": true,
    "forceConsistentCasingInFileNames": true,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "noFallthroughCasesInSwitch": false
  }
}
</file>

<file path="components/performance/code-splitting-example.tsx">
"use client"

import type React from "react"

import { useState, useEffect, Suspense } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { usePerformance } from "@/hooks/use-performance"

// This component demonstrates code splitting and lazy loading
export function CodeSplittingExample() {
  const [showHeavyComponent, setShowHeavyComponent] = useState(false)
  const { measure } = usePerformance("CodeSplittingExample")

  // Dynamically import the heavy component only when needed
  const loadComponent = async () => {
    const loadOperation = measure("loadHeavyComponent")
    loadOperation.start()

    try {
      const HeavyComponentModule = await import("./lazy-loaded-component")
      loadOperation.end()
      setShowHeavyComponent(true)
      return HeavyComponentModule.default
    } catch (error) {
      console.error("Failed to load component:", error)
      loadOperation.end()
      return null
    }
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Code Splitting Demo</CardTitle>
        <CardDescription>
          This demonstrates dynamic loading of components to improve initial load performance
        </CardDescription>
      </CardHeader>
      <CardContent>
        <p className="mb-4">
          Heavy components can be loaded on-demand instead of including them in the initial bundle. This reduces the
          initial JavaScript payload and improves page load times.
        </p>

        {showHeavyComponent ? (
          <Suspense fallback={<LoadingPlaceholder />}>
            <LazyHeavyComponent />
          </Suspense>
        ) : (
          <div className="bg-muted p-6 rounded-md flex items-center justify-center">
            <p className="text-muted-foreground">Heavy component not loaded yet</p>
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button
          onClick={() => {
            if (!showHeavyComponent) {
              loadComponent()
            } else {
              setShowHeavyComponent(false)
            }
          }}
        >
          {showHeavyComponent ? "Unload Component" : "Load Heavy Component"}
        </Button>
      </CardFooter>
    </Card>
  )
}

// Lazy loaded component wrapper
function LazyHeavyComponent() {
  const [Component, setComponent] = useState<React.ComponentType | null>(null)

  useEffect(() => {
    import("./lazy-loaded-component").then((module) => {
      setComponent(() => module.default)
    })
  }, [])

  if (!Component) {
    return <LoadingPlaceholder />
  }

  return <Component />
}

// Loading placeholder
function LoadingPlaceholder() {
  return (
    <div className="space-y-3">
      <Skeleton className="h-8 w-full" />
      <Skeleton className="h-24 w-full" />
      <Skeleton className="h-8 w-2/3" />
    </div>
  )
}
</file>

<file path="components/performance/lazy-loaded-component.tsx">
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

// This is a "heavy" component that will be lazy loaded
export default function LazyLoadedComponent() {
  const [data, setData] = useState<any[]>([])
  const [activeTab, setActiveTab] = useState("tab1")

  // Simulate heavy computation or data loading
  useEffect(() => {
    // Simulate delay
    const timer = setTimeout(() => {
      // Generate some dummy data
      const generatedData = Array.from({ length: 100 }, (_, i) => ({
        id: i,
        name: `Item ${i}`,
        value: Math.floor(Math.random() * 1000),
        category: ["A", "B", "C"][Math.floor(Math.random() * 3)],
      }))

      setData(generatedData)
    }, 500)

    return () => clearTimeout(timer)
  }, [])

  return (
    <Card className="border-green-500">
      <CardContent className="pt-6">
        <div className="mb-4">
          <h3 className="text-lg font-medium">Heavy Component Loaded Successfully</h3>
          <p className="text-sm text-muted-foreground">
            This component was loaded dynamically to improve initial page load performance.
          </p>
        </div>

        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="tab1">Data Table</TabsTrigger>
            <TabsTrigger value="tab2">Statistics</TabsTrigger>
            <TabsTrigger value="tab3">Visualization</TabsTrigger>
          </TabsList>

          <TabsContent value="tab1" className="mt-4">
            <div className="border rounded-md overflow-hidden">
              <table className="w-full">
                <thead className="bg-muted">
                  <tr>
                    <th className="p-2 text-left">ID</th>
                    <th className="p-2 text-left">Name</th>
                    <th className="p-2 text-left">Value</th>
                    <th className="p-2 text-left">Category</th>
                  </tr>
                </thead>
                <tbody>
                  {data.slice(0, 5).map((item) => (
                    <tr key={item.id} className="border-t">
                      <td className="p-2">{item.id}</td>
                      <td className="p-2">{item.name}</td>
                      <td className="p-2">{item.value}</td>
                      <td className="p-2">{item.category}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </TabsContent>

          <TabsContent value="tab2" className="mt-4">
            <div className="space-y-4">
              <div className="grid grid-cols-3 gap-4">
                <div className="bg-muted p-4 rounded-md">
                  <div className="text-2xl font-bold">
                    {data.length > 0 ? data.reduce((sum, item) => sum + item.value, 0) : 0}
                  </div>
                  <div className="text-sm text-muted-foreground">Total Value</div>
                </div>
                <div className="bg-muted p-4 rounded-md">
                  <div className="text-2xl font-bold">
                    {data.length > 0 ? Math.round(data.reduce((sum, item) => sum + item.value, 0) / data.length) : 0}
                  </div>
                  <div className="text-sm text-muted-foreground">Average Value</div>
                </div>
                <div className="bg-muted p-4 rounded-md">
                  <div className="text-2xl font-bold">{data.length}</div>
                  <div className="text-sm text-muted-foreground">Total Items</div>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="tab3" className="mt-4">
            <div className="h-40 flex items-end justify-around bg-muted rounded-md p-4">
              {data.length > 0 ? (
                Array.from({ length: 10 }, (_, i) => {
                  const value = data[i]?.value || 0
                  const normalizedHeight = (value / 1000) * 100
                  return (
                    <div
                      key={i}
                      className="bg-primary w-6 rounded-t-sm"
                      style={{ height: `${normalizedHeight}%` }}
                      title={`Value: ${value}`}
                    />
                  )
                })
              ) : (
                <div className="text-muted-foreground">Loading data...</div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/performance/optimized-image.tsx">
"use client"

import { useState } from "react"
import Image from "next/image"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { usePerformance } from "@/hooks/use-performance"

export function OptimizedImage() {
  const [activeTab, setActiveTab] = useState("optimized")
  const { measure } = usePerformance("OptimizedImage")
  const [loadTimes, setLoadTimes] = useState({
    optimized: 0,
    unoptimized: 0,
  })

  const handleLoadOptimized = () => {
    const loadOperation = measure("loadOptimizedImage")
    loadOperation.start()

    const img = new Image()
    img.onload = () => {
      loadOperation.end()
      setLoadTimes((prev) => ({ ...prev, optimized: performance.now() - startTime }))
    }
    const startTime = performance.now()
    img.src = "/images/quran-example-optimized.jpg"
  }

  const handleLoadUnoptimized = () => {
    const loadOperation = measure("loadUnoptimizedImage")
    loadOperation.start()

    const img = new Image()
    img.onload = () => {
      loadOperation.end()
      setLoadTimes((prev) => ({ ...prev, unoptimized: performance.now() - startTime }))
    }
    const startTime = performance.now()
    img.src = "/images/quran-example-original.jpg"
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Image Optimization</CardTitle>
        <CardDescription>Compare optimized vs. unoptimized image loading performance</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="optimized">Optimized</TabsTrigger>
            <TabsTrigger value="unoptimized">Unoptimized</TabsTrigger>
          </TabsList>

          <TabsContent value="optimized" className="mt-4">
            <div className="space-y-4">
              <div className="aspect-video relative overflow-hidden rounded-lg border">
                <Image
                  src="/images/quran-example-optimized.jpg"
                  alt="Optimized Quran page"
                  fill
                  sizes="(max-width: 768px) 100vw, 50vw"
                  className="object-cover"
                  priority={activeTab === "optimized"}
                  quality={80}
                />
              </div>

              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>File size: 45KB (WebP format)</span>
                  <span>Load time: {loadTimes.optimized.toFixed(0)}ms</span>
                </div>
                <Button onClick={handleLoadOptimized} variant="outline" size="sm">
                  Test Load Time
                </Button>
              </div>

              <div className="text-sm text-muted-foreground">
                <p>Benefits of optimized images:</p>
                <ul className="list-disc pl-5 space-y-1 mt-2">
                  <li>Automatically converted to modern formats (WebP)</li>
                  <li>Responsive sizing based on device</li>
                  <li>Lazy loading for off-screen images</li>
                  <li>Reduced network payload</li>
                </ul>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="unoptimized" className="mt-4">
            <div className="space-y-4">
              <div className="aspect-video relative overflow-hidden rounded-lg border">
                {/* Using img tag for unoptimized example */}
                <img
                  src="/images/quran-example-original.jpg"
                  alt="Unoptimized Quran page"
                  className="w-full h-full object-cover"
                />
              </div>

              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>File size: 250KB (JPEG format)</span>
                  <span>Load time: {loadTimes.unoptimized.toFixed(0)}ms</span>
                </div>
                <Button onClick={handleLoadUnoptimized} variant="outline" size="sm">
                  Test Load Time
                </Button>
              </div>

              <div className="text-sm text-muted-foreground">
                <p>Issues with unoptimized images:</p>
                <ul className="list-disc pl-5 space-y-1 mt-2">
                  <li>Larger file size increases page weight</li>
                  <li>Same large image sent to all devices</li>
                  <li>No automatic lazy loading</li>
                  <li>Layout shifts during loading</li>
                </ul>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/performance/performance-metrics.tsx">
"use client"

import { useState } from "react"
import { usePerformance } from "@/hooks/use-performance"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Progress } from "@/components/ui/progress"

export function PerformanceMetrics() {
  const { metrics, resourceStats, memoryUsage } = usePerformance("PerformanceMetrics")
  const [activeTab, setActiveTab] = useState("web-vitals")

  // Helper function to get status color based on metric value
  const getStatusColor = (name: string, value: number): string => {
    switch (name) {
      case "LCP":
        return value < 2500 ? "bg-green-500" : value < 4000 ? "bg-yellow-500" : "bg-red-500"
      case "FID":
        return value < 100 ? "bg-green-500" : value < 300 ? "bg-yellow-500" : "bg-red-500"
      case "CLS":
        return value < 0.1 ? "bg-green-500" : value < 0.25 ? "bg-yellow-500" : "bg-red-500"
      case "FCP":
        return value < 1800 ? "bg-green-500" : value < 3000 ? "bg-yellow-500" : "bg-red-500"
      case "TTFB":
        return value < 800 ? "bg-green-500" : value < 1800 ? "bg-yellow-500" : "bg-red-500"
      default:
        return "bg-blue-500"
    }
  }

  // Get the latest value for each metric type
  const getLatestMetrics = () => {
    const latest: Record<string, any> = {}

    metrics.forEach((metric) => {
      if (!latest[metric.name] || (metric.timestamp && latest[metric.name].timestamp < metric.timestamp)) {
        latest[metric.name] = metric
      }
    })

    return Object.values(latest)
  }

  const latestMetrics = getLatestMetrics()

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Performance Metrics</CardTitle>
        <CardDescription>Monitor key performance indicators for your application</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="web-vitals">Web Vitals</TabsTrigger>
            <TabsTrigger value="resources">Resources</TabsTrigger>
            <TabsTrigger value="memory">Memory</TabsTrigger>
          </TabsList>

          <TabsContent value="web-vitals" className="space-y-4 mt-4">
            {latestMetrics
              .filter((metric) => ["CLS", "FID", "LCP", "FCP", "TTFB"].includes(metric.name))
              .map((metric, index) => (
                <div key={index} className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm font-medium">
                      {metric.name}
                      {metric.name === "LCP" && " (Largest Contentful Paint)"}
                      {metric.name === "FID" && " (First Input Delay)"}
                      {metric.name === "CLS" && " (Cumulative Layout Shift)"}
                      {metric.name === "FCP" && " (First Contentful Paint)"}
                      {metric.name === "TTFB" && " (Time to First Byte)"}
                    </span>
                    <span className="text-sm font-medium">
                      {metric.name === "CLS" ? metric.value.toFixed(3) : `${metric.value.toFixed(0)}ms`}
                    </span>
                  </div>
                  <Progress
                    value={
                      metric.name === "CLS" ? Math.min(metric.value * 1000, 100) : Math.min(metric.value / 50, 100)
                    }
                    className={getStatusColor(metric.name, metric.value)}
                  />
                </div>
              ))}

            {latestMetrics.filter((metric) => ["CLS", "FID", "LCP", "FCP", "TTFB"].includes(metric.name)).length ===
              0 && (
              <div className="text-center py-4 text-muted-foreground">
                No Web Vitals data available yet. Interact with the page to generate metrics.
              </div>
            )}
          </TabsContent>

          <TabsContent value="resources" className="mt-4">
            {resourceStats ? (
              <div className="space-y-4">
                <div className="grid grid-cols-4 gap-2 font-medium text-sm border-b pb-2">
                  <div>Type</div>
                  <div>Count</div>
                  <div>Size</div>
                  <div>Avg. Duration</div>
                </div>

                {Object.entries(resourceStats).map(([type, stats]: [string, any], index) => (
                  <div key={index} className="grid grid-cols-4 gap-2 text-sm">
                    <div>{type}</div>
                    <div>{stats.count}</div>
                    <div>{(stats.totalSize / 1024).toFixed(1)} KB</div>
                    <div>{stats.avgDuration.toFixed(0)} ms</div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-4 text-muted-foreground">Resource timing data not available.</div>
            )}
          </TabsContent>

          <TabsContent value="memory" className="mt-4">
            {memoryUsage ? (
              <div className="space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm font-medium">Used Memory</span>
                    <span className="text-sm font-medium">{(memoryUsage.used / (1024 * 1024)).toFixed(1)} MB</span>
                  </div>
                  <Progress
                    value={memoryUsage.percentUsed}
                    className={
                      memoryUsage.percentUsed < 70
                        ? "bg-green-500"
                        : memoryUsage.percentUsed < 85
                          ? "bg-yellow-500"
                          : "bg-red-500"
                    }
                  />
                </div>

                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="space-y-1">
                    <div className="font-medium">Total Allocated</div>
                    <div>{(memoryUsage.total / (1024 * 1024)).toFixed(1)} MB</div>
                  </div>
                  <div className="space-y-1">
                    <div className="font-medium">Heap Limit</div>
                    <div>{(memoryUsage.limit / (1024 * 1024)).toFixed(1)} MB</div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-4 text-muted-foreground">
                Memory usage data not available in this browser.
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/performance/resource-monitor.tsx">
"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"

interface ResourceData {
  name: string
  size: number
  duration: number
}

export function ResourceMonitor() {
  const [resourceData, setResourceData] = useState<ResourceData[]>([])
  const [activeTab, setActiveTab] = useState("size")

  useEffect(() => {
    // Function to collect resource timing data
    const collectResourceData = () => {
      if (typeof window !== "undefined" && "performance" in window) {
        const resources = performance.getEntriesByType("resource")

        const data: ResourceData[] = resources
          .filter((resource: any) => {
            // Filter out tracking pixels and analytics
            return (
              !resource.name.includes("analytics") &&
              !resource.name.includes("tracking") &&
              !resource.name.includes("beacon")
            )
          })
          .map((resource: any) => {
            const url = new URL(resource.name)
            const pathParts = url.pathname.split("/")
            const fileName = pathParts[pathParts.length - 1]

            return {
              name: fileName || url.hostname,
              size: resource.transferSize || 0,
              duration: resource.duration,
              type: resource.initiatorType,
            }
          })
          .sort((a, b) => b.size - a.size)
          .slice(0, 15) // Take top 15 resources

        setResourceData(data)
      }
    }

    collectResourceData()

    // Set up interval to refresh data
    const intervalId = setInterval(collectResourceData, 5000)

    return () => clearInterval(intervalId)
  }, [])

  // Format bytes to human-readable format
  const formatBytes = (bytes: number) => {
    if (bytes === 0) return "0 B"

    const k = 1024
    const sizes = ["B", "KB", "MB", "GB"]
    const i = Math.floor(Math.log(bytes) / Math.log(k))

    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i]
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Resource Monitor</CardTitle>
        <CardDescription>Analyze resource loading performance</CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="size">Resource Size</TabsTrigger>
            <TabsTrigger value="duration">Load Duration</TabsTrigger>
          </TabsList>

          <TabsContent value="size" className="h-80 mt-4">
            {resourceData.length > 0 ? (
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={resourceData} layout="vertical" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" tickFormatter={formatBytes} />
                  <YAxis type="category" dataKey="name" width={150} />
                  <Tooltip formatter={(value: any) => formatBytes(value)} />
                  <Bar dataKey="size" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            ) : (
              <div className="flex items-center justify-center h-full text-muted-foreground">
                No resource data available
              </div>
            )}
          </TabsContent>

          <TabsContent value="duration" className="h-80 mt-4">
            {resourceData.length > 0 ? (
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={resourceData} layout="vertical" margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" tickFormatter={(value) => `${value.toFixed(0)} ms`} />
                  <YAxis type="category" dataKey="name" width={150} />
                  <Tooltip formatter={(value: any) => `${value.toFixed(0)} ms`} />
                  <Bar dataKey="duration" fill="#82ca9d" />
                </BarChart>
              </ResponsiveContainer>
            ) : (
              <div className="flex items-center justify-center h-full text-muted-foreground">
                No resource data available
              </div>
            )}
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/aspect-ratio.tsx">
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/calendar.tsx">
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="components/ui/collapsible.tsx">
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="components/ui/command.tsx">
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="components/ui/context-menu.tsx">
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input-otp.tsx">
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="components/ui/resizable.tsx">
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="components/ui/sonner.tsx">
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/ui/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="components/ui/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="components/admin-analytics-chart.tsx">
interface AdminAnalyticsChartProps {
  type: "line" | "bar" | "pie"
  isLarge?: boolean
}

export function AdminAnalyticsChart({ type, isLarge = false }: AdminAnalyticsChartProps) {
  return (
    <div className="flex h-full w-full items-center justify-center rounded bg-muted/30 p-2">
      <div className="text-center text-sm text-muted-foreground">
        {type === "line" && "Linjediagram"}
        {type === "bar" && "Søjlediagram"}
        {type === "pie" && "Cirkeldiagram"}
        {isLarge && " (Stort)"}
      </div>
    </div>
  )
}
</file>

<file path="components/admin-error-heatmap.tsx">
export function AdminErrorHeatmap() {
  return (
    <div className="flex h-[200px] w-full items-center justify-center rounded bg-muted/30 p-2">
      <div className="text-center text-sm text-muted-foreground">Error Hotspot Heatmap Visualisering</div>
    </div>
  )
}
</file>

<file path="components/ai-explain-overlay.tsx">
"use client"

import { Lightbulb, X } from "lucide-react"

import { Button } from "@/components/ui/button"

interface AIExplainOverlayProps {
  explanation: string
  onClose: () => void
}

export function AIExplainOverlay({ explanation, onClose }: AIExplainOverlayProps) {
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="relative max-w-md rounded-lg border bg-card p-6 shadow-lg">
        <Button variant="ghost" size="icon" className="absolute right-2 top-2" onClick={onClose}>
          <X className="h-4 w-4" />
          <span className="sr-only">Luk</span>
        </Button>
        <div className="mb-4 flex items-center gap-2">
          <div className="flex h-8 w-8 items-center justify-center rounded-full bg-purple-100 dark:bg-purple-900">
            <Lightbulb className="h-4 w-4 text-purple-700 dark:text-purple-300" />
          </div>
          <h3 className="text-lg font-semibold">AI Forklaring</h3>
        </div>
        <p className="text-muted-foreground">{explanation}</p>
        <div className="mt-4 flex justify-end">
          <Button onClick={onClose}>Forstået</Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/ai-insight-card.tsx">
import { Lightbulb } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"

interface AIInsightCardProps {
  title: string
  insight: string
  recommendedAction: string
}

export function AIInsightCard({ title, insight, recommendedAction }: AIInsightCardProps) {
  return (
    <Card className="border-purple-200 bg-purple-50 dark:border-purple-900 dark:bg-purple-950/30">
      <CardHeader className="pb-2">
        <CardTitle className="flex items-center gap-2 text-base">
          <div className="flex h-6 w-6 items-center justify-center rounded-full bg-purple-100 dark:bg-purple-900">
            <Lightbulb className="h-3.5 w-3.5 text-purple-700 dark:text-purple-300" />
          </div>
          <span>{title}</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground">{insight}</p>
      </CardContent>
      <CardFooter>
        <Button size="sm" className="w-full">
          {recommendedAction}
        </Button>
      </CardFooter>
    </Card>
  )
}
</file>

<file path="components/command-menu.tsx">
"use client"

import { useEffect, useState } from "react"
import { BookOpen, FileText, Home, Search, Settings, User } from "lucide-react"

import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command"

export function CommandMenu() {
  const [open, setOpen] = useState(false)

  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (e.key === "k" && (e.metaKey || e.ctrlKey)) {
        e.preventDefault()
        setOpen((open) => !open)
      }
    }
    document.addEventListener("keydown", down)
    return () => document.removeEventListener("keydown", down)
  }, [])

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Skriv en kommando eller søg..." />
      <CommandList>
        <CommandEmpty>Ingen resultater fundet.</CommandEmpty>
        <CommandGroup heading="Forslag">
          <CommandItem>
            <Home className="mr-2 h-4 w-4" />
            <span>Gå til Dashboard</span>
          </CommandItem>
          <CommandItem>
            <BookOpen className="mr-2 h-4 w-4" />
            <span>Mine Kurser</span>
          </CommandItem>
          <CommandItem>
            <FileText className="mr-2 h-4 w-4" />
            <span>Fortsæt Læring: Pandas DataFrame Manipulation</span>
          </CommandItem>
        </CommandGroup>
        <CommandSeparator />
        <CommandGroup heading="Kurser">
          <CommandItem>
            <Search className="mr-2 h-4 w-4" />
            <span>Søg i Kurser</span>
          </CommandItem>
          <CommandItem>
            <BookOpen className="mr-2 h-4 w-4" />
            <span>Dataanalyse med Python</span>
          </CommandItem>
          <CommandItem>
            <BookOpen className="mr-2 h-4 w-4" />
            <span>Avanceret Frontend Udvikling</span>
          </CommandItem>
          <CommandItem>
            <BookOpen className="mr-2 h-4 w-4" />
            <span>Machine Learning Grundkursus</span>
          </CommandItem>
        </CommandGroup>
        <CommandSeparator />
        <CommandGroup heading="Konto">
          <CommandItem>
            <User className="mr-2 h-4 w-4" />
            <span>Min Profil</span>
          </CommandItem>
          <CommandItem>
            <Settings className="mr-2 h-4 w-4" />
            <span>Indstillinger</span>
          </CommandItem>
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  )
}
</file>

<file path="components/comparative-study-section.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { describe, it, expect } from '@jest/globals';
import ComparativeStudySection from './comparative-study-section';

describe('ComparativeStudySection', () => {
  it('renders loading state initially', () => {
    render(<ComparativeStudySection />);
    expect(screen.getByText(/Henter sammenlignende studie.../i)).toBeInTheDocument();
  });

  // Flere tests kan tilføjes her for at dække:
  // - Visning af data efter succesfuld hentning
  // - Visning af fejlmeddelelse ved fejl
  // - Korrekt rendering af UI-elementer (Card, Skeleton osv.)
});
</file>

<file path="components/comparative-study-section.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { useState, useEffect } from "react"

export default function ComparativeStudySection() {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [data, setData] = useState<string>("")

  useEffect(() => {
    // Simuleret async fetch
    const timer = setTimeout(() => {
      setData("Eksempel på sammenlignende analyse mellem forskellige oversættelser eller fortolkninger. Udskift med rigtig data.")
      setLoading(false)
    }, 1000)
    return () => clearTimeout(timer)
  }, [])

  if (loading) {
    return (
      <Card className="min-h-[120px]">
        <CardHeader>
          <CardTitle>Sammenlignende Studie</CardTitle>
          <CardDescription>Indlæser sammenligning...</CardDescription>
        </CardHeader>
        <CardContent>
          <Skeleton className="h-8 w-full mb-2" />
          <Skeleton className="h-4 w-2/3" />
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Sammenlignende Studie</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-destructive">Der opstod en fejl: {error}</div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Sammenlignende Studie</CardTitle>
        <CardDescription>Sammenlign forskellige oversættelser eller fortolkninger</CardDescription>
      </CardHeader>
      <CardContent>
        <div>{data}</div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/course-card.tsx">
import { ArrowRight, BookOpen } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"

interface CourseCardProps {
  title: string
  description: string
  progress: number
  image: string
  badges: string[]
  lastActivity: string
  nextTopic: string
}

export function CourseCard({ title, description, progress, image, badges, lastActivity, nextTopic }: CourseCardProps) {
  return (
    <Card className="overflow-hidden">
      <div className="flex flex-col md:flex-row">
        <div className="hidden h-auto w-48 bg-muted md:block">
          <img src={image || "/placeholder.svg"} alt={title} className="h-full w-full object-cover" />
        </div>
        <div className="flex-1">
          <CardHeader>
            <div className="flex items-start justify-between">
              <div>
                <CardTitle>{title}</CardTitle>
                <p className="text-sm text-muted-foreground">{description}</p>
              </div>
              <div className="flex flex-wrap gap-1">
                {badges.map((badge, index) => (
                  <Badge key={index} variant="outline">
                    {badge}
                  </Badge>
                ))}
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="mb-2 flex items-center justify-between text-sm">
              <span>Fremskridt</span>
              <span className="text-muted-foreground">{progress}%</span>
            </div>
            <Progress value={progress} className="h-2" />
            <div className="mt-4 flex items-start gap-2 text-sm">
              <BookOpen className="mt-0.5 h-4 w-4 text-muted-foreground" />
              <div>
                <p className="text-muted-foreground">Sidst aktiv: {lastActivity}</p>
                <p className="font-medium">Næste: {nextTopic}</p>
              </div>
            </div>
          </CardContent>
          <CardFooter>
            <Button className="w-full">
              Fortsæt Læring
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </CardFooter>
        </div>
      </div>
    </Card>
  )
}
</file>

<file path="components/flashcard-stats.tsx">
import { Award, Calendar, Star } from "lucide-react"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"

interface FlashcardStatsProps {
  stats: {
    totalCards: number
    reviewedToday: number
    mastered: number
    learningProgress: number
    streak: number
  }
}

export function FlashcardStats({ stats }: FlashcardStatsProps) {
  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle>Flashcard Statistik</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
                <Star className="h-4 w-4" />
              </div>
              <div>
                <p className="text-sm font-medium">Mestrede Kort</p>
                <p className="text-xs text-muted-foreground">
                  {stats.mastered} af {stats.totalCards} kort
                </p>
              </div>
            </div>
            <div className="text-2xl font-bold">{Math.round((stats.mastered / stats.totalCards) * 100)}%</div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300">
                <Award className="h-4 w-4" />
              </div>
              <div>
                <p className="text-sm font-medium">Læringsfremdrift</p>
                <p className="text-xs text-muted-foreground">Samlet fremgang</p>
              </div>
            </div>
            <div className="text-2xl font-bold">{stats.learningProgress}%</div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-amber-100 text-amber-700 dark:bg-amber-900 dark:text-amber-300">
                <Calendar className="h-4 w-4" />
              </div>
              <div>
                <p className="text-sm font-medium">Streak</p>
                <p className="text-xs text-muted-foreground">Dage i træk</p>
              </div>
            </div>
            <div className="text-2xl font-bold">{stats.streak}</div>
          </div>

          <div>
            <div className="mb-1 flex items-center justify-between text-sm">
              <span>Dagens mål</span>
              <span className="text-muted-foreground">{stats.reviewedToday}/20 kort</span>
            </div>
            <Progress value={(stats.reviewedToday / 20) * 100} className="h-2" />
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/glassmorphism-header.tsx">
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import {
  BookOpen,
  Menu,
  Search,
  Home,
  Settings,
  User,
  LayoutDashboard,
  Languages,      // Tilføjet import
  GraduationCap,  // Tilføjet import
  MessageSquare,  // Tilføjet import
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { MainNav } from "@/components/main-nav";
import { UserNav } from "@/components/user-nav";
import { CommandMenu } from "@/components/command-menu";
import { cn } from "@/lib/utils";

interface GlassmorphismHeaderProps {
  isAdmin?: boolean;
  title?: string;
  description?: string;
  imageUrl?: string;
}

export function GlassmorphismHeader({ isAdmin = false }: GlassmorphismHeaderProps) {
  const [scrolled, setScrolled] = useState(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <header
      className={cn(
        "fixed top-0 z-50 w-full transition-all duration-300",
        scrolled
          ? "bg-white/80 shadow-md backdrop-blur-md dark:bg-gray-950/80"
          : "bg-transparent"
      )}
    >
      <div className="container flex h-16 items-center justify-between">
        <div className="flex items-center gap-4 md:gap-6">
          <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>
            <SheetTrigger asChild>
              <Button variant="ghost" size="icon" className="md:hidden">
                <Menu className="h-5 w-5" />
                <span className="sr-only">Åbn menu</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-72 p-6">
              <Link
                href="/"
                className="mb-8 flex items-center gap-2"
                onClick={() => setMobileMenuOpen(false)}
              >
                <BookOpen className="h-6 w-6 text-primary" />
                <span className="text-lg font-bold">Ata'allam al-Arabiya</span>
              </Link>
              <nav className="flex flex-col space-y-3">
                <Link
                  href="/"
                  className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Home className="h-5 w-5" />
                  <span>Dashboard</span>
                </Link>
                <Link href="/alphabet" className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted" onClick={() => setMobileMenuOpen(false)}><BookOpen className="h-5 w-5" /><span>Alfabet</span></Link>
                <Link href="/vocabulary" className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted" onClick={() => setMobileMenuOpen(false)}><Languages className="h-5 w-5" /><span>Ordforråd</span></Link>
                <Link href="/grammar" className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted" onClick={() => setMobileMenuOpen(false)}><GraduationCap className="h-5 w-5" /><span>Grammatik</span></Link>
                <Link href="/quran" className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted" onClick={() => setMobileMenuOpen(false)}><BookOpen className="h-5 w-5" /><span>Quran</span></Link>
                <Link href="/practice" className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted" onClick={() => setMobileMenuOpen(false)}><MessageSquare className="h-5 w-5" /><span>Øvelser</span></Link>
                
                <hr className="my-3"/>

                <Link
                  href="/profile"
                  className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <User className="h-5 w-5" />
                  <span>Min Profil</span>
                </Link>
                <Link
                  href="/settings"
                  className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <Settings className="h-5 w-5" />
                  <span>Indstillinger</span>
                </Link>
                {isAdmin && (
                  <Link
                    href="/admin"
                    className="flex items-center gap-2 rounded-md px-3 py-2 text-base hover:bg-muted"
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <LayoutDashboard className="h-5 w-5" />
                    <span>Admin Dashboard</span>
                  </Link>
                )}
              </nav>
            </SheetContent>
          </Sheet>

          <Link href="/" className="flex items-center gap-2">
            <BookOpen className="h-6 w-6 text-primary" />
            <span className="hidden text-lg font-bold sm:inline">
              Ata'allam al-Arabiya
            </span>
            <span className="text-lg font-bold sm:hidden">QAT</span>
          </Link>

          <div className="hidden md:flex">
             <MainNav />
          </div>
        </div>

        <div className="flex items-center gap-2">
          <div className="relative hidden lg:block">
            <Search className="absolute left-2.5 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <input
              type="search"
              placeholder="Søg..."
              className="h-9 w-full rounded-md border border-input bg-background/50 pl-8 pr-3 text-sm shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring dark:bg-gray-950/50 md:w-48 lg:w-64"
            />
          </div>
          
          <div className="hidden md:block">
            <CommandMenu />
          </div>

          <UserNav />
        </div>
      </div>
    </header>
  );
}
</file>

<file path="components/level-progress-ring.tsx">
interface LevelProgressRingProps {
  level: number
  progress: number
}

export function LevelProgressRing({ level, progress }: LevelProgressRingProps) {
  const size = 120
  const strokeWidth = 8
  const radius = (size - strokeWidth) / 2
  const circumference = radius * 2 * Math.PI
  const dash = (progress * circumference) / 100

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="absolute">
        <circle
          className="stroke-gray-200 dark:stroke-gray-700"
          fill="none"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
        />
        <circle
          className="stroke-emerald-500 dark:stroke-emerald-400"
          fill="none"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeDashoffset={circumference - dash}
          strokeLinecap="round"
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
        />
      </svg>
      <div className="absolute inset-0 flex flex-col items-center justify-center">
        <div className="flex h-16 w-16 items-center justify-center rounded-full bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300">
          <div className="text-center">
            <div className="text-2xl font-bold">{level}</div>
            <div className="text-xs">niveau</div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/main-nav.tsx">
"use client";

import Link from "next/link";
import { BookOpen, GraduationCap, Languages, MessageSquare, Home, Info, Users } from "lucide-react"; // Tilføjet Home, Info, Users for fuldstændighed
import { usePathname } from "next/navigation"; // Importer usePathname for aktiv stat
import { cn } from "@/lib/utils"; // Importer cn utility

// Definerer navigationslinks med stier og ikoner
const navLinks = [
  { href: "/", label: "Dashboard", icon: Home },
  { href: "/alphabet", label: "Alfabet", icon: BookOpen },
  { href: "/vocabulary", label: "Ordforråd", icon: Languages },
  { href: "/grammar", label: "Grammatik", icon: GraduationCap },
  { href: "/quran", label: "Quran", icon: BookOpen },
  { href: "/practice", label: "Øvelser", icon: MessageSquare },
  { href: "/community", label: "Community", icon: Users }, // Eksempel på et ekstra link
  { href: "/about", label: "Om Os", icon: Info }, // Eksempel på et ekstra link
];

export function MainNav() {
  const pathname = usePathname(); // Hent den aktuelle sti

  return (
    <nav className="hidden md:flex items-center space-x-2 lg:space-x-4"> {/* Justeret spacing */}
      {navLinks.map((link) => (
        <Link
          key={link.href}
          href={link.href}
          className={cn(
            "flex items-center gap-1 rounded-md px-3 py-2 text-sm font-medium transition-colors hover:bg-muted hover:text-accent-foreground",
            pathname === link.href
              ? "bg-primary/10 text-primary" // Aktiv stat styling
              : "text-muted-foreground hover:text-foreground"
          )}
        >
          <link.icon className="h-4 w-4" />
          <span>{link.label}</span>
        </Link>
      ))}
    </nav>
  );
}
</file>

<file path="components/notification-popup.tsx">
"use client"

import { useEffect, useState } from "react"
import { Crown, X } from "lucide-react"

import { Button } from "@/components/ui/button"

interface NotificationPopupProps {
  title: string
  message: string
  type: "badge" | "xp" | "achievement"
}

export function NotificationPopup({ title, message, type }: NotificationPopupProps) {
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    // Show notification after a delay
    const timer = setTimeout(() => {
      setIsVisible(true)
    }, 3000)

    // Hide notification after some time
    const hideTimer = setTimeout(() => {
      setIsVisible(false)
    }, 8000)

    return () => {
      clearTimeout(timer)
      clearTimeout(hideTimer)
    }
  }, [])

  if (!isVisible) return null

  return (
    <div className="fixed bottom-4 right-4 z-50 max-w-sm animate-in fade-in slide-in-from-bottom-5 duration-500">
      <div className="rounded-lg border bg-card p-4 shadow-lg">
        <div className="mb-3 flex items-start justify-between">
          <div className="flex items-center gap-2">
            {type === "badge" && (
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-br from-amber-400 to-amber-600 p-1.5 text-white">
                <Crown className="h-5 w-5" />
              </div>
            )}
            <h3 className="font-semibold">{title}</h3>
          </div>
          <Button variant="ghost" size="icon" className="h-6 w-6" onClick={() => setIsVisible(false)}>
            <X className="h-4 w-4" />
            <span className="sr-only">Luk</span>
          </Button>
        </div>
        <p className="text-sm text-muted-foreground">{message}</p>
        <div className="mt-3 flex justify-end">
          <Button size="sm">Se Detaljer</Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/progress-ring.tsx">
import type React from "react"
interface ProgressRingProps {
  progress: number
  size: number
  children?: React.ReactNode
}

export function ProgressRing({ progress, size, children }: ProgressRingProps) {
  const strokeWidth = 4
  const radius = (size - strokeWidth) / 2
  const circumference = radius * 2 * Math.PI
  const dash = (progress * circumference) / 100

  return (
    <div className="relative" style={{ width: size, height: size }}>
      <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`} className="absolute">
        <circle
          className="stroke-gray-200 dark:stroke-gray-700"
          fill="none"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
        />
        <circle
          className="stroke-purple-500 dark:stroke-purple-400"
          fill="none"
          cx={size / 2}
          cy={size / 2}
          r={radius}
          strokeWidth={strokeWidth}
          strokeDasharray={circumference}
          strokeDashoffset={circumference - dash}
          strokeLinecap="round"
          transform={`rotate(-90 ${size / 2} ${size / 2})`}
        />
      </svg>
      {children}
    </div>
  )
}
</file>

<file path="components/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> & {
    indicatorClassName?: string
  }
>(({ className, value, indicatorClassName, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className={cn("h-full w-full flex-1 bg-primary transition-all", indicatorClassName)}
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="components/quran-word-analysis.tsx">
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Badge } from "@/components/ui/badge"

interface QuranWordAnalysisProps {
  arabic: string
  transliteration: string
  translation: string
  type: string
  root: string
}

export function QuranWordAnalysis({ arabic, transliteration, translation, type, root }: QuranWordAnalysisProps) {
  return (
    <Card className="overflow-hidden">
      <CardContent className="p-4 space-y-3">
        <div className="flex justify-between items-center">
          <div>
            <p className="text-xl font-arabic">{arabic}</p>
            <p className="text-xs text-muted-foreground italic">{transliteration}</p>
          </div>
          <Badge variant="outline">{type}</Badge>
        </div>

        <div className="space-y-2">
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium">Oversættelse:</span>
            <span className="text-sm">{translation}</span>
          </div>

          <div className="flex justify-between items-center">
            <span className="text-sm font-medium">Rod:</span>
            <span className="text-sm font-arabic">{root}</span>
          </div>
        </div>

        <div className="flex justify-between pt-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="lucide lucide-book-open mr-1"
                >
                  <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z" />
                  <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z" />
                </svg>
                Morfologi
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-80">
              <div className="space-y-2">
                <h4 className="font-medium">Morfologisk Analyse</h4>
                <p className="text-sm text-muted-foreground">Detaljeret analyse af ordets struktur og form.</p>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="font-medium">Form:</div>
                  <div>Substantiv / Singularis</div>
                  <div className="font-medium">Kasus:</div>
                  <div>Genitiv</div>
                  <div className="font-medium">Definit:</div>
                  <div>Ja (med Al-)</div>
                  <div className="font-medium">Køn:</div>
                  <div>Maskulinum</div>
                </div>
              </div>
            </PopoverContent>
          </Popover>

          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="14"
                  height="14"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="lucide lucide-list-tree mr-1"
                >
                  <path d="M8 9h12a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1H8" />
                  <path d="M5 8v8" />
                  <path d="M8 17h12a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H8" />
                  <circle cx="5" cy="6" r="1" />
                  <circle cx="5" cy="16" r="1" />
                </svg>
                Syntaks
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-80">
              <div className="space-y-2">
                <h4 className="font-medium">Syntaktisk Rolle</h4>
                <p className="text-sm text-muted-foreground">Ordets grammatiske funktion i sætningen.</p>
                <div className="text-sm space-y-2">
                  <p>
                    <span className="font-medium">Rolle:</span> Subjekt / Objekt / Prædikat
                  </p>
                  <p>
                    <span className="font-medium">Relation:</span> Del af en genitiv konstruktion
                  </p>
                  <p>
                    <span className="font-medium">Position:</span> Begyndelsen af verset
                  </p>
                </div>
              </div>
            </PopoverContent>
          </Popover>
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/recent-activity-card.tsx">
import type React from "react"
import { ArrowRight } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter } from "@/components/ui/card"

interface RecentActivityCardProps {
  title: string
  description: string
  time: string
  result: string
  xpEarned: number
  icon: React.ReactNode
}

export function RecentActivityCard({ title, description, time, result, xpEarned, icon }: RecentActivityCardProps) {
  return (
    <Card>
      <CardContent className="p-4">
        <div className="flex items-start gap-4">
          <div className="flex h-10 w-10 items-center justify-center rounded-full bg-purple-100 dark:bg-purple-900">
            {icon}
          </div>
          <div className="flex-1">
            <div className="flex items-start justify-between">
              <div>
                <h3 className="font-medium">{title}</h3>
                <p className="text-sm text-muted-foreground">{description}</p>
              </div>
              <div className="text-right">
                <div className="text-sm font-medium">{result}</div>
                <div className="text-xs text-purple-600 dark:text-purple-400">+{xpEarned} XP</div>
              </div>
            </div>
            <div className="mt-2 text-xs text-muted-foreground">{time}</div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="border-t p-4 pt-3">
        <Button variant="ghost" size="sm" className="ml-auto">
          Detaljer
          <ArrowRight className="ml-1 h-3 w-3" />
        </Button>
      </CardFooter>
    </Card>
  )
}
</file>

<file path="components/tafsir-section.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { describe, it, expect } from '@jest/globals';
import TafsirSection from './tafsir-section';

describe('TafsirSection', () => {
  it('renders loading state initially', () => {
    render(<TafsirSection />);
    expect(screen.getByText(/Henter tafsir.../i)).toBeInTheDocument();
  });

  // Flere tests kan tilføjes her for at dække:
  // - Visning af data efter succesfuld hentning
  // - Visning af fejlmeddelelse ved fejl
  // - Korrekt rendering af UI-elementer (Card, Skeleton osv.)
});
</file>

<file path="components/tafsir-section.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { useState, useEffect } from "react"

export default function TafsirSection() {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [tafsir, setTafsir] = useState<string>("")

  useEffect(() => {
    // Simuleret async fetch
    const timer = setTimeout(() => {
      // Her skal der integreres rigtig data senere
      setTafsir("Dette er et eksempel på tafsir for det valgte vers. Udskift med rigtig data.")
      setLoading(false)
    }, 1000)
    return () => clearTimeout(timer)
  }, [])

  if (loading) {
    return (
      <Card className="min-h-[120px]">
        <CardHeader>
          <CardTitle>Tafsir</CardTitle>
          <CardDescription>Indlæser tafsir...</CardDescription>
        </CardHeader>
        <CardContent>
          <Skeleton className="h-8 w-full mb-2" />
          <Skeleton className="h-4 w-2/3" />
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Tafsir</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-destructive">Der opstod en fejl: {error}</div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Tafsir</CardTitle>
        <CardDescription>Forklaring og fortolkning af Quranens tekst</CardDescription>
      </CardHeader>
      <CardContent>
        <div>{tafsir}</div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/thematic-exploration-section.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { describe, it, expect } from '@jest/globals';
import ThematicExplorationSection from './thematic-exploration-section';

describe('ThematicExplorationSection', () => {
  it('renders loading state initially', () => {
    render(<ThematicExplorationSection />);
    expect(screen.getByText(/Henter tematisk udforskning.../i)).toBeInTheDocument();
  });

  // Flere tests kan tilføjes her for at dække:
  // - Visning af data efter succesfuld hentning
  // - Visning af fejlmeddelelse ved fejl
  // - Korrekt rendering af UI-elementer (Card, Skeleton osv.)
});
</file>

<file path="components/thematic-exploration-section.tsx">
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"
import { useState, useEffect } from "react"

export default function ThematicExplorationSection() {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [themes, setThemes] = useState<string>("")

  useEffect(() => {
    // Simuleret async fetch
    const timer = setTimeout(() => {
      setThemes("Eksempel på tematisk udforskning af Quranens emner. Udskift med rigtig data.")
      setLoading(false)
    }, 1000)
    return () => clearTimeout(timer)
  }, [])

  if (loading) {
    return (
      <Card className="min-h-[120px]">
        <CardHeader>
          <CardTitle>Tematisk Udforskning</CardTitle>
          <CardDescription>Indlæser temaer...</CardDescription>
        </CardHeader>
        <CardContent>
          <Skeleton className="h-8 w-full mb-2" />
          <Skeleton className="h-4 w-2/3" />
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Tematisk Udforskning</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-destructive">Der opstod en fejl: {error}</div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Tematisk Udforskning</CardTitle>
        <CardDescription>Udforsk temaer og emner i Quranen</CardDescription>
      </CardHeader>
      <CardContent>
        <div>{themes}</div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="components/theme-provider.tsx">
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="components/topic-discussion-thread.tsx">
"use client"

import { useState } from "react"
import { Send, ThumbsUp } from "lucide-react"

import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"

export function TopicDiscussionThread() {
  const [newComment, setNewComment] = useState("")

  const comments = [
    {
      id: 1,
      author: "Anders J.",
      avatar: "AJ",
      time: "For 2 timer siden",
      content:
        "Jeg har problemer med at forstå forskellen mellem .loc og .iloc i Pandas. Kan nogen forklare det på en enkel måde?",
      likes: 3,
      replies: [
        {
          id: 2,
          author: "Søren P.",
          avatar: "SP",
          time: "For 1 time siden",
          content:
            ".loc bruger labels til at vælge data (f.eks. kolonnenavne eller indeksværdier), mens .iloc bruger positioner (f.eks. 0, 1, 2). Tænk på .loc som 'label-baseret' og .iloc som 'integer-baseret'.",
          likes: 5,
        },
        {
          id: 3,
          author: "Mette K.",
          avatar: "MK",
          time: "For 45 minutter siden",
          content:
            "Et godt eksempel: df.loc['A':'C', 'navn'] vælger rækker med indeks A til C og kolonnen 'navn', mens df.iloc[0:3, 0] vælger de første 3 rækker og den første kolonne.",
          likes: 2,
        },
      ],
    },
    {
      id: 4,
      author: "Louise T.",
      avatar: "LT",
      time: "I går",
      content:
        "Er der nogen, der har et godt eksempel på, hvordan man håndterer manglende værdier i en DataFrame? Jeg er ikke sikker på, om jeg skal bruge dropna() eller fillna().",
      likes: 1,
      replies: [],
    },
  ]

  return (
    <div className="space-y-6">
      <div className="rounded-lg border bg-card p-4 shadow-sm">
        <Textarea
          placeholder="Skriv en kommentar eller stil et spørgsmål..."
          value={newComment}
          onChange={(e) => setNewComment(e.target.value)}
          className="mb-2 min-h-[100px] resize-none"
        />
        <div className="flex justify-end">
          <Button disabled={!newComment.trim()}>
            <Send className="mr-2 h-4 w-4" />
            Send
          </Button>
        </div>
      </div>

      <div className="space-y-6">
        {comments.map((comment) => (
          <div key={comment.id} className="space-y-4">
            <div className="rounded-lg border bg-card p-4 shadow-sm">
              <div className="mb-3 flex items-start justify-between">
                <div className="flex items-center gap-2">
                  <Avatar>
                    <AvatarFallback>{comment.avatar}</AvatarFallback>
                  </Avatar>
                  <div>
                    <div className="font-medium">{comment.author}</div>
                    <div className="text-xs text-muted-foreground">{comment.time}</div>
                  </div>
                </div>
              </div>
              <p className="text-sm">{comment.content}</p>
              <div className="mt-3 flex items-center justify-between">
                <Button variant="ghost" size="sm" className="h-8 gap-1 text-muted-foreground">
                  <ThumbsUp className="h-4 w-4" />
                  <span>{comment.likes}</span>
                </Button>
                <Button variant="ghost" size="sm" className="h-8">
                  Svar
                </Button>
              </div>
            </div>

            {comment.replies.length > 0 && (
              <div className="ml-8 space-y-4">
                {comment.replies.map((reply) => (
                  <div key={reply.id} className="rounded-lg border bg-card p-4 shadow-sm">
                    <div className="mb-3 flex items-start justify-between">
                      <div className="flex items-center gap-2">
                        <Avatar>
                          <AvatarFallback>{reply.avatar}</AvatarFallback>
                        </Avatar>
                        <div>
                          <div className="font-medium">{reply.author}</div>
                          <div className="text-xs text-muted-foreground">{reply.time}</div>
                        </div>
                      </div>
                    </div>
                    <p className="text-sm">{reply.content}</p>
                    <div className="mt-3 flex items-center justify-between">
                      <Button variant="ghost" size="sm" className="h-8 gap-1 text-muted-foreground">
                        <ThumbsUp className="h-4 w-4" />
                        <span>{reply.likes}</span>
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  )
}
</file>

<file path="components/user-nav.tsx">
"use client"; // Sørg for at denne er i toppen, hvis du bruger hooks som useState/useEffect

import Link from "next/link";
import { Bell, LogOut, Settings, User, ChevronDown, Moon, Sun } from "lucide-react"; // Tilføjet ChevronDown, Moon, Sun
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"; // Antager du har AvatarImage også
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuSub,      // Tilføjet for tema
  DropdownMenuSubTrigger, // Tilføjet for tema
  DropdownMenuPortal,    // Tilføjet for tema
  DropdownMenuSubContent, // Tilføjet for tema
} from "@/components/ui/dropdown-menu";
import { useTheme } from "next-themes"; // Tilføjet for tema-skift
import { useState, useEffect } from "react"; // Tilføjet for client-side rendering af tema

// Simuleret brugerdata - erstat med faktiske data fra din auth-løsning
const mockUser = {
  name: "Ahmed Bakir",
  email: "ahmed.bakir@example.com",
  avatarUrl: "/placeholder-user.jpg", // Sørg for at denne fil findes i /public, eller brug en rigtig URL
  initials: "AB",
  notifications: 3, // Simuleret antal notifikationer
};

export function UserNav() {
  const { setTheme, theme } = useTheme();
  const [mounted, setMounted] = useState(false);

  // Sørg for at komponenten er mounted før tema-specifik UI renderes, for at undgå hydration mismatch
  useEffect(() => setMounted(true), []);

  const handleLogout = () => {
    // Implementer logud funktionalitet her
    // F.eks. ryd session, redirect til login-side
    console.log("Bruger logger ud...");
    // router.push('/auth/login'); // Hvis du bruger Next.js router
  };

  if (!mounted) {
    // Vis en placeholder eller intet, mens komponenten mounter, for at undgå tema-flimmer
    return (
      <div className="flex items-center gap-2">
        <div className="h-9 w-9 rounded-full bg-muted animate-pulse"></div>
        <div className="h-9 w-9 rounded-full bg-muted animate-pulse"></div>
      </div>
    );
  }

  return (
    <div className="flex items-center gap-2">
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" size="icon" className="relative">
            <Bell className="h-5 w-5" />
            {mockUser.notifications > 0 && (
              <span className="absolute top-0 right-0 flex h-2 w-2">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
              </span>
            )}
            <span className="sr-only">Notifikationer</span>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="w-80" align="end"> {/* Justeret bredde */}
          <DropdownMenuLabel>Notifikationer</DropdownMenuLabel>
          <DropdownMenuSeparator />
          {mockUser.notifications > 0 ? (
            <>
              <DropdownMenuItem onSelect={() => console.log("Notifikation 1 klikket")}>
                <div className="flex flex-col">
                  <span className="font-medium">Ny lektion tilgængelig!</span>
                  <span className="text-xs text-muted-foreground">
                    "Avanceret Verb Bøjning" er nu låst op.
                  </span>
                </div>
              </DropdownMenuItem>
              <DropdownMenuItem onSelect={() => console.log("Notifikation 2 klikket")}>
                <div className="flex flex-col">
                  <span className="font-medium">Din streak fortsætter!</span>
                  <span className="text-xs text-muted-foreground">
                    Godt klaret! Du har en 5-dages streak.
                  </span>
                </div>
              </DropdownMenuItem>
              {mockUser.notifications > 2 && (
                 <DropdownMenuItem onSelect={() => console.log("Notifikation 3 klikket")}>
                    <div className="flex flex-col">
                    <span className="font-medium">Ny kommentar</span>
                    <span className="text-xs text-muted-foreground">
                        Ali svarede på dit spørgsmål i forummet.
                    </span>
                    </div>
                </DropdownMenuItem>
              )}
            </>
          ) : (
            <DropdownMenuItem disabled>
              <span className="text-sm text-muted-foreground p-2">Ingen nye notifikationer</span>
            </DropdownMenuItem>
          )}
          <DropdownMenuSeparator />
          <DropdownMenuItem className="justify-center">
            <Link href="/notifications" className="text-sm text-primary hover:underline">
              Se alle notifikationer
            </Link>
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="ghost" className="relative h-9 w-9 rounded-full">
            <Avatar className="h-9 w-9">
              {/* Erstat med <AvatarImage src={mockUser.avatarUrl} alt={mockUser.name} /> hvis du har billeder */}
              <AvatarImage src={mockUser.avatarUrl} alt={mockUser.name} />
              <AvatarFallback className="bg-primary/20 text-primary dark:bg-primary/30 dark:text-primary-foreground">
                {mockUser.initials}
              </AvatarFallback>
            </Avatar>
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent className="w-56" align="end" forceMount>
          <DropdownMenuLabel className="font-normal">
            <div className="flex flex-col space-y-1">
              <p className="text-sm font-medium leading-none">{mockUser.name}</p>
              <p className="text-xs leading-none text-muted-foreground">
                {mockUser.email}
              </p>
            </div>
          </DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DropdownMenuGroup>
            <Link href="/profile" passHref>
              <DropdownMenuItem>
                <User className="mr-2 h-4 w-4" />
                <span>Profil</span>
              </DropdownMenuItem>
            </Link>
            <Link href="/settings" passHref>
              <DropdownMenuItem>
                <Settings className="mr-2 h-4 w-4" />
                <span>Indstillinger</span>
              </DropdownMenuItem>
            </Link>
          </DropdownMenuGroup>
          <DropdownMenuSeparator />
          {/* Tema skift sub-menu */}
          <DropdownMenuSub>
            <DropdownMenuSubTrigger>
              {theme === 'light' && <Sun className="mr-2 h-4 w-4" />}
              {theme === 'dark' && <Moon className="mr-2 h-4 w-4" />}
              {theme === 'system' && ( // Viser et generisk ikon eller intet for system
                <Settings className="mr-2 h-4 w-4" />
              )}
              <span>Tema</span>
            </DropdownMenuSubTrigger>
            <DropdownMenuPortal>
              <DropdownMenuSubContent>
                <DropdownMenuItem onClick={() => setTheme("light")}>
                  <Sun className="mr-2 h-4 w-4" />
                  Lys
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setTheme("dark")}>
                  <Moon className="mr-2 h-4 w-4" />
                  Mørk
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => setTheme("system")}>
                  <Settings className="mr-2 h-4 w-4" />
                  System
                </DropdownMenuItem>
              </DropdownMenuSubContent>
            </DropdownMenuPortal>
          </DropdownMenuSub>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={handleLogout}>
            <LogOut className="mr-2 h-4 w-4" />
            <span>Log ud</span>
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  );
}
</file>

<file path="hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="hooks/use-performance.ts">
"use client"

import { useEffect, useState, useCallback } from "react"
import {
  initWebVitals,
  measurePerformance,
  getMetrics,
  analyzeResources,
  getMemoryUsage,
  type PerformanceMetric,
} from "@/lib/performance-monitoring"

export function usePerformance(componentName?: string) {
  const [metrics, setMetrics] = useState<PerformanceMetric[]>([])
  const [resourceStats, setResourceStats] = useState<any>(null)
  const [memoryUsage, setMemoryUsage] = useState<any>(null)

  // Initialize performance monitoring
  useEffect(() => {
    // Initialize web vitals on mount
    initWebVitals()

    // Mark component render
    if (componentName) {
      measurePerformance(`${componentName}_render`)
    }

    // Set up interval to update metrics
    const intervalId = setInterval(() => {
      setMetrics(getMetrics())
      setResourceStats(analyzeResources())
      setMemoryUsage(getMemoryUsage())
    }, 2000)

    return () => {
      clearInterval(intervalId)
      if (componentName) {
        measurePerformance(`${componentName}_unmount`)
      }
    }
  }, [componentName])

  // Function to measure a specific operation
  const measure = useCallback((operationName: string) => {
    const startMark = `${operationName}_start`
    const endMark = `${operationName}_end`

    return {
      start: () => measurePerformance(startMark),
      end: () => {
        measurePerformance(endMark)
        measurePerformance(operationName, startMark, endMark)
      },
    }
  }, [])

  return {
    metrics,
    resourceStats,
    memoryUsage,
    measure,
  }
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/offline-storage.ts">
// Forbedret offline-storage utility til at arbejde med IndexedDB

// Database konfiguration
const DB_NAME = "quranicArabicTrainer"
const DB_VERSION = 1

// Store navne
const STORES = {
  USER_DATA: "userData",
  PROGRESS: "progress",
  QURAN_DATA: "quranData",
  VOCABULARY: "vocabulary",
  OFFLINE_REQUESTS: "offlineRequests",
}

// Åbn databasen
export const openDatabase = (): Promise<IDBDatabase> => {
  return new Promise((resolve, reject) => {
    if (!("indexedDB" in window)) {
      reject(new Error("IndexedDB not supported"))
      return
    }

    const request = indexedDB.open(DB_NAME, DB_VERSION)

    request.onerror = (event) => {
      reject(new Error("Error opening database"))
    }

    request.onsuccess = (event) => {
      resolve(request.result)
    }

    request.onupgradeneeded = (event) => {
      const db = request.result

      // Opret stores, hvis de ikke findes
      if (!db.objectStoreNames.contains(STORES.USER_DATA)) {
        db.createObjectStore(STORES.USER_DATA, { keyPath: "id" })
      }

      if (!db.objectStoreNames.contains(STORES.PROGRESS)) {
        db.createObjectStore(STORES.PROGRESS, { keyPath: "userId" })
      }

      if (!db.objectStoreNames.contains(STORES.QURAN_DATA)) {
        db.createObjectStore(STORES.QURAN_DATA, { keyPath: "surahId" })
      }

      if (!db.objectStoreNames.contains(STORES.VOCABULARY)) {
        const vocabStore = db.createObjectStore(STORES.VOCABULARY, { keyPath: "id", autoIncrement: true })
        vocabStore.createIndex("word", "word", { unique: false })
        vocabStore.createIndex("level", "level", { unique: false })
      }

      if (!db.objectStoreNames.contains(STORES.OFFLINE_REQUESTS)) {
        db.createObjectStore(STORES.OFFLINE_REQUESTS, { keyPath: "id", autoIncrement: true })
      }
    }
  })
}

// Generisk funktion til at gemme data
export const storeData = <T>(storeName: string, data: T): Promise<IDBValidKey> => {\
  return new Promise(async (resolve, reject) => {\
    try {\
      const db = await openDatabase();
      const transaction = db.transaction(storeName, 'readwrite');
      const store = transaction.objectStore(storeName);
      
      const request = store.put(data);
      
      request.onsuccess = () => {\
        resolve(request.result);
      };
      
      request.onerror = () => {
        reject(new Error(`Error storing data in ${storeName}\`));
      };
    } catch (error) {
      reject(error);
    }
  });
};

// Generisk funktion til at hente data
export const getData = <T>(storeName: string, key: IDBValidKey): Promise<T | null> => {
  return new Promise(async (resolve, reject) => {
    try {
      const db = await openDatabase();
      const transaction = db.transaction(storeName, 'readonly');
      const store = transaction.objectStore(storeName);
      
      const request = store.get(key);
      
      request.onsuccess = () => {
        resolve(request.result || null);
      };
      
      request.onerror = () => {
        reject(new Error(\`Error getting data from ${storeName}\`));
      };
    } catch (error) {
      reject(error);
    }
  });
};

// Generisk funktion til at hente alle data
export const getAllData = <T>(storeName: string): Promise<T[]> => {
  return new Promise(async (resolve, reject) => {
    try {
      const db = await openDatabase();
      const transaction = db.transaction(storeName, 'readonly');
      const store = transaction.objectStore(storeName);
      
      const request = store.getAll();
      
      request.onsuccess = () => {
        resolve(request.result || []);
      };
      
      request.onerror = () => {
        reject(new Error(\`Error getting all data from ${storeName}\`));
      };
    } catch (error) {
      reject(error);
    }
  });
};

// Generisk funktion til at slette data
export const deleteData = (storeName: string, key: IDBValidKey): Promise<void> => {
  return new Promise(async (resolve, reject) => {
    try {
      const db = await openDatabase();
      const transaction = db.transaction(storeName, 'readwrite');
      const store = transaction.objectStore(storeName);
      
      const request = store.delete(key);
      
      request.onsuccess = () => {
        resolve();
      };
      
      request.onerror = () => {
        reject(new Error(\`Error deleting data from ${storeName}\`));
      };
    } catch (error) {
      reject(error);
    }
  });
};

// Funktion til at gemme offline anmodninger
export const storeOfflineRequest = (request: {
  url: string;
  method: string;
  headers: Record<string, string>;
  body?: string;
}): Promise<IDBValidKey> => {
  return storeData(STORES.OFFLINE_REQUESTS, {
    ...request,
    timestamp: Date.now(),
  });
};

// Funktion til at hente alle offline anmodninger
export const getOfflineRequests = (): Promise<any[]> => {
  return getAllData(STORES.OFFLINE_REQUESTS);
};

// Funktion til at slette en offline anmodning
export const deleteOfflineRequest = (id: IDBValidKey): Promise<void> => {
  return deleteData(STORES.OFFLINE_REQUESTS, id);
};

// Funktion til at synkronisere offline anmodninger
export const syncOfflineRequests = async (): Promise<{ success: number; failed: number }> => {
  try {
    const requests = await getOfflineRequests();
    
    if (requests.length === 0) {
      return { success: 0, failed: 0 };
    }
    
    console.log(\`Syncing ${requests.length} offline requests\`);
    
    const results = await Promise.all(
      requests.map(async (req) => {
        try {
          const response = await fetch(req.url, {
            method: req.method,
            headers: req.headers,
            body: req.body,
          });
          
          if (response.ok) {
            await deleteOfflineRequest(req.id);
            return { success: true };
          } else {
            return { success: false };
          }
        } catch (error) {
          return { success: false };
        }
      })
    );
    
    const success = results.filter((r) => r.success).length;
    const failed = results.length - success;
    
    return { success, failed };
  } catch (error) {
    console.error('Error syncing offline requests:', error);
    return { success: 0, failed: 0 };
  }
};

// Funktion til at registrere for synkronisering
export const registerForSync = async (): Promise<boolean> => {
  if ('serviceWorker' in navigator && 'SyncManager' in window) {
    try {
      const registration = await navigator.serviceWorker.ready;
      await registration.sync.register('sync-offline-data');
      return true;
    } catch (error) {
      console.error('Error registering for sync:', error);
      return false;
    }
  }
  return false;
};

// Hjælpefunktioner for specifikke datatyper

// Brugerdata
export const storeUserData = (userData: any): Promise<IDBValidKey> => {
  return storeData(STORES.USER_DATA, userData);
};

export const getUserData = (userId: string): Promise<any | null> => {
  return getData(STORES.USER_DATA, userId);
};

// Fremskridt
export const storeProgress = (progress: any): Promise<IDBValidKey> => {
  return storeData(STORES.PROGRESS, progress);
};

export const getProgress = (userId: string): Promise<any | null> => {
  return getData(STORES.PROGRESS, userId);
};

// Quran-data
export const storeQuranData = (quranData: any): Promise<IDBValidKey> => {
  return storeData(STORES.QURAN_DATA, quranData);
};

export const getQuranData = (surahId: number): Promise<any | null> => {
  return getData(STORES.QURAN_DATA, surahId);
};

export const getAllQuranData = (): Promise<any[]> => {
  return getAllData(STORES.QURAN_DATA);
};

// Ordforråd
export const storeVocabularyItem = (item: any): Promise<IDBValidKey> => {
  return storeData(STORES.VOCABULARY, item);
};

export const getVocabularyItem = (id: IDBValidKey): Promise<any | null> => {
  return getData(STORES.VOCABULARY, id);
};

export const getAllVocabulary = (): Promise<any[]> => {
  return getAllData(STORES.VOCABULARY);
};

// Funktion til at hente ordforråd efter niveau
export const getVocabularyByLevel = (level: number): Promise<any[]> => {
  return new Promise(async (resolve, reject) => {
    try {
      const db = await openDatabase();
      const transaction = db.transaction(STORES.VOCABULARY, 'readonly');
      const store = transaction.objectStore(STORES.VOCABULARY);
      const index = store.index('level');
      
      const request = index.getAll(level);
      
      request.onsuccess = () => {
        resolve(request.result || []);
      };
      
      request.onerror = () => {
        reject(new Error('Error getting vocabulary by level'));
      };
    } catch (error) {
      reject(error);
    }
  });
};

// Funktion til at søge i ordforråd
export const searchVocabulary = (query: string): Promise<any[]> => {
  return new Promise(async (resolve, reject) => {
    try {
      const allVocabulary = await getAllVocabulary();
      
      // Simpel søgning (i en rigtig app ville dette være mere avanceret)
      const results = allVocabulary.filter((item) => {
        const searchableText = \`${item.word} ${item.translation} ${item.transliteration}`.toLowerCase();\
        return searchableText.includes(query.toLowerCase());
      });
      
      resolve(results);
    } catch (error) {
      reject(error);\
    }\
  });
};

// Funktion til at kontrollere, om browseren understøtter offline funktionalitet
export const supportsOfflineFeatures = (): boolean => {\
  return (\
    'serviceWorker' in navigator &&
    'indexedDB' in window &&
    'caches' in window
  );
};

// Funktion til at estimere offline lagerplads\
export const estimateOfflineStorage = async (): Promise<{ quota: number; usage: number; percent: number } | null> => {
  if (\'storage' in navigator && 'estimate' in navigator.storage) {
    try {\
      const estimate = await navigator.storage.estimate();
      return {\
        quota: estimate.quota || 0,
        usage: estimate.usage || 0,
        percent: estimate.quota ? ((estimate.usage || 0) / estimate.quota) * 100 : 0,
      };
    } catch (error) {
      console.error('Error estimating storage:', error);\
      return null;
    }
  }
  return null;
};

// Funktion til at anmode om vedvarende lagerplads
export const requestPersistentStorage = async (): Promise<boolean> => {
  if (\'storage' in navigator && 'persist' in navigator.storage) {
    try {\
      return await navigator.storage.persist();
    } catch (error) {
      console.error('Error requesting persistent storage:', error);\
      return false;
    }
  }
  return false;
};

// Funktion til at kontrollere, om lagerplads er vedvarende
export const isPersistentStorage = async (): Promise<boolean> => {
  if (\'storage' in navigator && 'persisted' in navigator.storage) {
    try {\
      return await navigator.storage.persisted();
    } catch (error) {
      console.error('Error checking persistent storage:', error);\
      return false;
    }
  }
  return false;
};

// Funktion til at rydde cache
export const clearCache = async (cacheName?: string): Promise<boolean> => {
  if ('caches' in window) {
    try {
      if (cacheName) {
        await caches.delete(cacheName);
      } else {
        const keys = await caches.keys();
        await Promise.all(keys.map(key => caches.delete(key)));
      }
      return true;
    } catch (error) {
      console.error('Error clearing cache:', error);
      return false;
    }
  }
  return false;
};

// Funktion til at kontrollere netværksstatus
export const isOnline = (): boolean => {
  return navigator.onLine;
};

// Event listener til at registrere offline/online status ændringer
export const registerNetworkStatusListeners = (
  onlineCallback: () => void,
  offlineCallback: () => void
): () => void => {
  window.addEventListener('online', onlineCallback);
  window.addEventListener('offline', offlineCallback);
  
  // Returner en funktion til at fjerne event listeners
  return () => {
    window.removeEventListener('online', onlineCallback);
    window.removeEventListener('offline', offlineCallback);
  };
};
</file>

<file path="lib/performance-monitoring.ts">
import { getCLS, getFID, getLCP, getFCP, getTTFB } from "web-vitals"

type MetricName = "CLS" | "FID" | "LCP" | "FCP" | "TTFB" | "Custom"

export interface PerformanceMetric {
  name: MetricName
  value: number
  id?: string
  delta?: number
  navigationType?: string
  timestamp?: number
  customDescription?: string
}

// Array to store metrics
const metrics: PerformanceMetric[] = []

// Function to report metrics to analytics
const reportMetric = (metric: PerformanceMetric) => {
  // Store metric in local array
  metrics.push(metric)

  // Log to console in development
  if (process.env.NODE_ENV === "development") {
    console.log(`[Performance] ${metric.name}: ${metric.value}`)
  }

  // In a real app, you would send this to your analytics service
  // Example: sendToAnalytics(metric);
}

// Initialize web vitals monitoring
export const initWebVitals = () => {
  getCLS((metric) => reportMetric({ name: "CLS", value: metric.value, id: metric.id, delta: metric.delta }))
  getFID((metric) => reportMetric({ name: "FID", value: metric.value, id: metric.id, delta: metric.delta }))
  getLCP((metric) => reportMetric({ name: "LCP", value: metric.value, id: metric.id, delta: metric.delta }))
  getFCP((metric) => reportMetric({ name: "FCP", value: metric.value, id: metric.id, delta: metric.delta }))
  getTTFB((metric) => reportMetric({ name: "TTFB", value: metric.value, id: metric.id, delta: metric.delta }))
}

// Custom performance measurement
export const measurePerformance = (markName: string, startMark?: string, endMark?: string) => {
  if (typeof window !== "undefined" && "performance" in window) {
    // Create mark
    performance.mark(markName)

    // If start and end marks are provided, create a measure
    if (startMark && endMark) {
      try {
        performance.measure(markName, startMark, endMark)
        const entries = performance.getEntriesByName(markName, "measure")
        if (entries.length > 0) {
          reportMetric({
            name: "Custom",
            value: entries[0].duration,
            customDescription: markName,
            timestamp: Date.now(),
          })
        }
      } catch (e) {
        console.error("Error measuring performance:", e)
      }
    }
  }
}

// Get all collected metrics
export const getMetrics = (): PerformanceMetric[] => {
  return [...metrics]
}

// Clear metrics (useful for testing)
export const clearMetrics = () => {
  metrics.length = 0
}

// Resource timing analysis
export const analyzeResources = () => {
  if (typeof window !== "undefined" && "performance" in window) {
    const resources = performance.getEntriesByType("resource")

    // Group by resource type
    const byType: Record<string, { count: number; totalSize: number; avgDuration: number }> = {}

    resources.forEach((resource) => {
      const { initiatorType, duration, transferSize } = resource as PerformanceResourceTiming

      if (!byType[initiatorType]) {
        byType[initiatorType] = { count: 0, totalSize: 0, avgDuration: 0 }
      }

      byType[initiatorType].count++
      byType[initiatorType].totalSize += transferSize || 0
      byType[initiatorType].avgDuration =
        (byType[initiatorType].avgDuration * (byType[initiatorType].count - 1) + duration) / byType[initiatorType].count
    })

    return byType
  }

  return null
}

// Memory usage monitoring (where supported)
export const getMemoryUsage = () => {
  if (
    typeof window !== "undefined" &&
    "performance" in window &&
    // @ts-ignore - Not all browsers support memory info
    performance.memory
  ) {
    // @ts-ignore
    const { usedJSHeapSize, totalJSHeapSize, jsHeapSizeLimit } = performance.memory

    return {
      used: usedJSHeapSize,
      total: totalJSHeapSize,
      limit: jsHeapSizeLimit,
      percentUsed: (usedJSHeapSize / jsHeapSizeLimit) * 100,
    }
  }

  return null
}
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

// cn function - standard fra shadcn/ui
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Funktion til at beregne procentdel
export const calculatePercentage = (current: number, total: number): number => {
  if (total === 0) return 0;
  return Math.round((current / total) * 100);
};

// Her kan du tilføje flere genbrugelige funktioner i fremtiden
</file>

<file path="public/placeholder-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules

# next.js
/.next/
/out/

# production
/build

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="guidelines.md">
# Quranic Arabic Trainer - Udviklingsretningslinjer

Dette dokument indeholder generelle retningslinjer for udviklingen af Quranic Arabic Trainer platformen. Formålet er at sikre konsistens, kvalitet og vedligeholdelsesvenlig kode på tværs af hele projektet.

## Generelle Principper

1.  **Følg Teknologistakken:** Overhold altid den specificerede teknologistak som defineret i `stackinfo.txt`.
    *   Frontend: Next.js, TypeScript, Tailwind CSS, shadcn/ui.
    *   Backend: NestJS, TypeScript, Prisma, PostgreSQL.
2.  **Kodekvalitet:**
    *   Skriv ren, læselig og velorganiseret kode.
    *   Anvend meningsfulde navne til variable, funktioner, klasser, etc.
    *   Følg principper som DRY (Don't Repeat Yourself) og KISS (Keep It Simple, Stupid).
    *   Brug kommentarer hvor det er nødvendigt for at forklare kompleks logik, men stræb efter selvforklarende kode.
3.  **TypeScript Best Practices:**
    *   Udnyt TypeScripts statiske typetjek fuldt ud. Undgå `any` hvor det er muligt.
    *   Brug interfaces og typer til at definere datastrukturer og kontrakter.
    *   Følg de officielle TypeScript retningslinjer.
4.  **Fejlhåndtering:**
    *   Implementer robust fejlhåndtering både i frontend og backend.
    *   Giv brugeren meningsfulde fejlbeskeder.
    *   Log fejl detaljeret for nemmere debugging.
5.  **Sikkerhed:**
    *   Vær opmærksom på sikkerhedsaspekter i alle udviklingsfaser.
    *   Følg OWASP Top 10 og andre relevante sikkerhedsbestemmelser.
    *   Valider og sanitiser al brugerinput.
    *   Håndter følsomme data (f.eks. brugeroplysninger, API-nøgler) forsvarligt. Undgå at hardcode secrets.
6.  **Performance:**
    *   Skriv performant kode og vær opmærksom på potentielle flaskehalse.
    *   Optimer databaseforespørgsler.
    *   Brug caching-strategier hvor det er relevant.
    *   For frontend: Optimer billeder, brug code splitting, lazy loading, etc.
7.  **Testning:**
    *   Skriv unit tests for kritiske funktioner og komponenter.
    *   Skriv integrationstests for at sikre, at forskellige dele af systemet fungerer korrekt sammen.
    *   For backend: Test API endpoints grundigt (f.eks. med Jest/Supertest).
    *   Stræb efter en fornuftig testdækning.
8.  **Versionering (Git):**
    *   Brug Git til versionskontrol.
    *   Skriv klare og informative commit-beskeder.
    *   Brug feature branches for ny udvikling og fejlrettelser.
    *   Overvej en Git branching model (f.eks. GitFlow eller GitHub Flow).
9.  **Dokumentation:**
    *   Dokumenter API endpoints (f.eks. med Swagger for backend).
    *   Dokumenter komplekse funktioner eller arkitekturbeslutninger.
    *   Hold `README.md` og andre projektrelaterede dokumenter opdaterede.

## Frontend Specifikke Retningslinjer (`/apps/web`)

1.  **Komponentstruktur:**
    *   Organiser komponenter logisk, f.eks. efter feature eller type.
    *   Genbrug eksisterende `shadcn/ui` komponenter hvor det er muligt.
    *   Byg nye UI-komponenter med genbrugelighed for øje.
2.  **State Management:**
    *   Vælg en passende state management løsning (f.eks. React Context, Zustand, Redux Toolkit) baseret på applikationens kompleksitet.
    *   Hold komponent-state lokal hvor det er muligt.
3.  **Styling (Tailwind CSS & shadcn/ui):**
    *   Følg den etablerede stil og designprincipper fra `shadcn/ui`.
    *   Brug Tailwind CSS utility classes for styling.
    *   Undgå custom CSS medmindre det er absolut nødvendigt og velbegrundet.
4.  **PWA & Offline Funktionalitet:**
    *   Vær opmærksom på PWA-krav og offline-kapabiliteter under udvikling.
    *   Test offline funktionalitet grundigt.
5.  **Tilgængelighed (a11y):**
    *   Sørg for at UI-komponenter og layouts er tilgængelige for brugere med handicap (følg WCAG retningslinjer).

## Backend Specifikke Retningslinjer (`/apps/api`)

1.  **NestJS Modulær Arkitektur:**
    *   Organiser koden i moduler baseret på features eller domæner.
    *   Følg NestJS's anbefalede projektstruktur.
2.  **Prisma & Database:**
    *   Definer klare og velstrukturerede Prisma-modeller.
    *   Brug Prisma Client effektivt og undgå N+1 problemer.
    *   Skriv migrationer omhyggeligt og test dem.
3.  **API Design (RESTful):**
    *   Design API endpoints så de er intuitive og følger RESTful principper.
    *   Brug korrekte HTTP-metoder (GET, POST, PUT, DELETE, PATCH).
    *   Brug meningsfulde HTTP statuskoder.
    *   Implementer paginering, filtrering og sortering for liste-endpoints.
4.  **DTOs (Data Transfer Objects):**
    *   Brug DTOs med `class-validator` og `class-transformer` til at validere og transformere request/response payloads.
5.  **Swagger/OpenAPI Dokumentation:**
    *   Dokumenter alle API endpoints grundigt med Swagger-dekorationer (`@ApiTags`, `@ApiOperation`, `@ApiResponse`, etc.).

## Samarbejde & Kommunikation

1.  **Værktøjer:**
    *   Brug Trae AI som den primære udviklingsassistent.
    *   Brug de specificerede værktøjer til filhåndtering, terminalkommandoer, web search, etc.
2.  **Kommunikation:**
    *   Kommuniker klart omkring foreslåede ændringer, udfordringer og fremskridt.
    *   Vær proaktiv og løsningsorienteret.

Disse retningslinjer er dynamiske og kan opdateres efter behov. Det er alles ansvar at kende og følge dem.
</file>

<file path="Integrationsstrategi.md">
Detaljeret Plan for Frontend-Backend Integration
Denne plan er designet til systematisk at færdiggøre backend API'en, rette kritiske frontend-fejl og etablere fuld integration mellem frontend (Next.js) og backend (NestJS) for Quranic Arabic Trainer.

Fase 0: Stabilisering af Frontend & Kodekvalitet
Mål: At sikre at frontend-projektet kan bygge uden fejl og at grundlæggende kodekvalitet er på plads.

Ret Kritiske JSX Fejl i app/alphabet/page.tsx:

Opgave: Gennemgå app/alphabet/page.tsx filen omhyggeligt.

Handling: Identificer og ret alle uafsluttede JSX-tags (f.eks. <div>, <main>, <Card>, <CardContent>, <span>). Sørg for korrekt nesting og lukning af alle elementer.

Verificering: Kør yarn workspace web dev (eller tilsvarende pnpm kommando for din frontend workspace) for at sikre, at siden kan rendere uden fejl i browseren.

Verificer calculatePercentage Import og Brug:

Opgave: Tjek alle steder hvor calculatePercentage fra lib/utils.ts bruges.

Handling: Sørg for korrekt import og anvendelse. Dette ser allerede ud til at være løst, men en hurtig verifikation er god.

Verificering: Ingen konsolfejl relateret til denne funktion under udvikling.

Kode Gennemgang (Valgfrit, men Anbefalet):

Opgave: Overvej en hurtig gennemgang af de mest aktive frontend-filer for andre åbenlyse fejl eller mangler i overensstemmelse med guidelines.md.

Handling: Kig efter "code smells", manglende fejlhåndtering, eller inkonsistens.

Fase 1: Færdiggørelse af Backend API (Kernefunktionalitet)
Mål: At designe og implementere fuldt funktionelle RESTful API-endpoints for alle kerneentiteter (Word, Verse, Lesson, Quiz).

For hver entitet (Word, Verse, Lesson, Quiz), gentag følgende trin:

Design API Endpoints:

Opgave: Definer specifikke RESTful endpoints (GET, POST, PUT, DELETE) for entiteten.

Eksempel for Word:

GET /api/words (hent alle ord, med paginering/filtrering)

GET /api/words/{id} (hent specifikt ord)

POST /api/words (opret nyt ord)

PUT /api/words/{id} (opdater ord)

DELETE /api/words/{id} (slet ord)

Handling: Dokumenter disse endpoints (f.eks. i api_udviklingsplan.md eller direkte med Swagger-kommentarer). Overvej query parametre for filtrering, sortering og paginering.

Opret NestJS Modul, Controller, Service & DTOs:

Opgave: Brug NestJS CLI til at generere de nødvendige filer.

Handling:

nest g module modules/<entity> (f.eks. modules/words)

nest g controller modules/<entity>/controllers/<entity>

nest g service modules/<entity>/services/<entity>

Opret DTOs manuelt i modules/<entity>/dtos/ (f.eks. create-word.dto.ts, update-word.dto.ts) med class-validator dekorationer.

Struktur: apps/api/src/modules/<entity>/...

Implementer Service Logik:

Opgave: Skriv forretningslogikken i <entity>.service.ts.

Handling:

Inject PrismaService.

Implementer CRUD-metoder der interagerer med Prisma (f.eks. prisma.word.create(), prisma.word.findMany()).

Implementer nødvendig validering (udover DTO-validering) og fejlhåndtering (f.eks. NotFoundException hvis en ressource ikke findes).

Implementer Controller Endpoints:

Opgave: Definer HTTP-handlers i <entity>.controller.ts.

Handling:

Brug korrekte HTTP-metode dekorationer (@Get(), @Post(), etc.).

Brug @Param() for ID'er og @Body() for request payloads (med DTO-validering).

Kald de tilsvarende service-metoder.

Tilføj Swagger-dekorationer (@ApiTags('<EntityName>'), @ApiOperation(), @ApiResponse(), etc.) for hvert endpoint.

Beskyt Endpoints (Authorization):

Opgave: Integrer AuthModule for at beskytte endpoints.

Handling:

Tilføj @UseGuards(JwtAuthGuard) til de controllere eller specifikke handlers, der kræver autentificering.

Implementer rollebaseret adgangskontrol hvis nødvendigt (f.eks. kun admins kan slette ord).

Opdater AppModule:

Opgave: Importer det nye <EntityModule> i apps/api/src/app.module.ts.

Testning (Backend):

Opgave: Skriv tests for de nye moduler.

Handling:

Unit tests for services (mock PrismaService).

Integrationstests (eller E2E tests) for controller endpoints ved hjælp af supertest og et test-NestJS-miljø. Test CRUD-operationer, inputvalidering og fejlhåndtering.

Verificering: Kør yarn workspace api test (eller tilsvarende).

Prioriteret Rækkefølge for Moduler:
Det kan være en god idé at starte med de mest grundlæggende eller mest brugte moduler. En mulig rækkefølge:

WordsModule

VersesModule

LessonsModule

QuizzesModule

Fase 2: Frontend-Backend Integration (Autentificering)
Mål: At forbinde frontendens login- og registreringssider til backendens AuthModule.

Opret API Service Lag i Frontend for Autentificering:

Opgave: Lav funktioner til at håndtere API-kald til backend.

Handling:

Opret en fil, f.eks. lib/auth-service.ts eller hooks/use-auth.ts.

Implementer funktioner som loginUser(credentials) og registerUser(userData).

Brug fetch eller axios til at lave POST-requests til /api/auth/login og /api/auth/register.

Håndter responses (succes og fejl). Ved succesfuld login, gem JWT-token (f.eks. i localStorage eller en state management løsning).

Husk at sætte Content-Type: application/json header.

Vigtigt: Definer base URL for API'en (f.eks. http://localhost:3000 under udvikling) i en miljøvariabel.

Opdater Login Side (app/auth/login/page.tsx):

Opgave: Erstat simuleret login med reelt API-kald.

Handling:

Importer og brug loginUser funktionen fra dit service lag.

I handleSubmit, kald loginUser med email og password.

Ved succes, naviger brugeren til dashboardet (f.eks. /).

Vis fejlbeskeder til brugeren ved login-fejl.

Opdater Registreringsside (app/auth/register/page.tsx):

Opgave: Erstat simuleret registrering med reelt API-kald.

Handling:

Importer og brug registerUser funktionen.

I handleSubmit, kald registerUser med brugerdata.

Ved succes, log brugeren ind (gem token) og naviger til dashboardet, eller vis en "registrering succesfuld" besked.

Vis fejlbeskeder (f.eks. "email allerede i brug").

Implementer Token Håndtering:

Opgave: Opsæt global håndtering af JWT-token for efterfølgende API-kald.

Handling:

Når en bruger logger ind, gem token.

For API-kald der kræver autentificering, inkluder token i Authorization headeren (f.eks. Bearer <token>). Dette kan centraliseres i dit API service lag.

Implementer logud-funktionalitet (fjern token og naviger til login).

Testning (Frontend & Integration):

Opgave: Test login og registrering grundigt.

Handling:

Test succesfulde flows.

Test fejlscenarier (forkert password, email eksisterer allerede).

Verificer at token gemmes og sendes korrekt.

Tjek at beskyttede backend-ruter kun kan tilgås med gyldigt token.

Fase 3: Frontend-Backend Integration (Kerne-Features)
Mål: At forbinde frontend-siderne med de nye backend API-endpoints for Word, Verse, Lesson, Quiz.

For hver relevant frontend-side/komponent der skal vise eller manipulere data fra en kerneentitet:

Opret/Opdater API Service Lag i Frontend:

Opgave: Tilføj funktioner til at interagere med de nye backend-endpoints.

Handling:

I dit API service lag (f.eks. lib/data-service.ts), opret funktioner som getWords(), getWordById(id), createWord(data), updateWord(id, data), deleteWord(id), etc.

Disse funktioner skal bruge fetch eller axios til at kalde de respektive backend-endpoints (f.eks. GET /api/words).

Husk at inkludere JWT-token for beskyttede endpoints.

Håndter responses og fejl.

Integrer i Frontend Komponenter:

Opgave: Opdater komponenter til at hente og vise data fra backend.

Handling:

Brug useEffect og useState (eller en state management løsning som Zustand/Redux) til at hente data når komponenten mounter.

Kald de relevante funktioner fra dit API service lag.

Erstat al mock-data med data fra backend.

Implementer loading states (vis f.eks. <Skeleton /> komponenter mens data hentes).

Implementer fejlhåndtering i UI (vis meningsfulde fejlbeskeder).

For sider der opretter/opdaterer data, forbind formularer til de tilsvarende API-kald.

Eksempler på Integrationer:

app/alphabet/page.tsx: Kan potentielt hente bogstavdata eller eksempler fra backend, hvis det udvides.

app/learn/vocabulary/page.tsx og app/vocabulary/flashcards/page.tsx: Skal hente ord (fra Word entiteten) fra /api/words.

app/grammar/page.tsx: Skal hente lektioner (fra Lesson entiteten) og grammatikregler fra /api/lessons eller en dedikeret /api/grammar-rules.

app/quran/study/[surahId]/page.tsx: Skal hente vers (fra Verse entiteten) og ordanalyse (fra Word entiteten relateret til vers) fra /api/verses og /api/words.

app/quran/advanced-study/page.tsx: De tre sektioner (TafsirSection, ComparativeStudySection, ThematicExplorationSection) skal opdateres til at hente deres respektive data fra nye backend-endpoints (f.eks. /api/tafsir, /api/themes).

app/practice/quiz/page.tsx og app/quiz-system/page.tsx: Skal hente quizzer og spørgsmål (fra Quiz og potentielt en Question entitet) fra /api/quizzes. Skal også kunne indsende svar.

Testning (Frontend & Integration):

Opgave: Test alle sider der interagerer med backend.

Handling:

Verificer at data hentes og vises korrekt.

Test oprettelse, opdatering og sletning af data.

Test loading states og fejlhåndtering.

Udfør end-to-end tests for de vigtigste brugerflows.

Fase 4: AI-Funktionalitet og Avancerede Features
Mål: At begynde implementering af AI-drevne features og andre avancerede funktioner, når kernefunktionaliteten er stabil.

Backend AI Integration:

Opgave: Design og implementer API-endpoints i backend, der kan håndtere AI-relaterede opgaver.

Handling:

Eksempel: POST /api/ai/pronunciation-feedback (modtager lydfil, returnerer feedback).

Eksempel: POST /api/ai/grammar-check (modtager tekst, returnerer grammatisk analyse).

Integrer med eventuelle eksterne AI-tjenester eller modeller.

Frontend AI Integration:

Opgave: Udvikl frontend-komponenter, der interagerer med AI-backend-endpoints.

Handling:

Opdater app/ai-feedback/page.tsx til at bruge de nye AI-endpoints i stedet for mock-data.

Komponenter som ai-explain-overlay.tsx og ai-insight-card.tsx kan fodres med data fra disse AI-endpoints.

Implementer Øvrige Features:

Opgave: Fortsæt med implementering af andre planlagte features som specificeret i PROJEKT_ANALYSE.md og api_udviklingsplan.md (f.eks. brugerprogression, community features).

Fase 5: Optimering, Sikkerhed og Deployment Forberedelse
Mål: At forbedre applikationens ydeevne, sikkerhed og forberede den til deployment.

Performance Optimering:

Frontend:

Brug Next.js' indbyggede optimeringer (code splitting, image optimization).

Analyser bundle sizes.

Implementer lazy loading for komponenter og billeder hvor relevant.

Optimer state management for at undgå unødvendige re-renders.

Backend:

Analyser og optimer Prisma-forespørgsler.

Overvej caching-strategier for ofte hentede data (f.eks. med Redis).

Database: Sørg for korrekte indekser på PostgreSQL-tabeller.

Sikkerhedsgennemgang:

Frontend: Beskyt mod XSS, CSRF. Håndter brugerinput sikkert.

Backend: Valider al input (DTOs, query params). Implementer rate limiting. Beskyt mod SQL injection (Prisma hjælper her). Gennemgå OWASP Top 10.

Sørg for sikker håndtering af JWT tokens (HTTPS, HttpOnly cookies hvis relevant).

PWA og Offline Funktionalitet:

Opgave: Gennemgå og test app/sw.ts og lib/offline-storage.ts.

Handling: Sørg for at caching-strategier er effektive og at offline-synkronisering virker som forventet. Test grundigt i offline-tilstand.

Grundig Testning:

Udfør regressionstestning.

Overvej brugeraccepttest (UAT).

Deployment Pipeline:

Opsæt CI/CD pipelines for automatiseret build, test og deployment af både frontend og backend.

Denne plan er omfattende, men ved at tage én fase og ét punkt ad gangen, kan du systematisk arbejde dig hen imod en fuldt integreret og funktionel applikation. Held og lykke!
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
}

export default nextConfig
</file>

<file path="overblik.txt">
Yousef Baragji
Copy
Delete
Jeg har brug for du dykker ned i hele kodebasen og identifciere  nøjagtigt hvor langt vi er med opbygningen af backend og integrationen mellem backend og frontend. jeg har mistet overblikket. Hvor langt er vi, hvad er status, lav en opdateret og ny grundig trin for trin plan i flere faser. Forhold dig specifikt og nøjagtigt til kodebasen. Ingen tæt. Ingen antagelser. vi skal vide. 
guidelines.md
PROJEKT_ANALYSE.md
QuranicAPI




2 context(s) used
Yousef Baragji
Copy
Delete
fprtsæt
QuranicAPI
Okay, jeg begynder med at undersøge backend-strukturen for at få et overblik. Først vil jeg se på indholdet af apps/api/src og derefter apps/api/prisma/schema.prisma for at forstå datamodellerne. Dette vil give et grundlag for at vurdere, hvor langt vi er med backend-udviklingen.

quranic-arabic-trainer-2/apps/api/src
Jeg vil nu undersøge prisma.schema filen for at forstå datamodellerne.

apps/api/prisma/schema.prisma
:(1-200)
Jeg fortsætter med at undersøge auth modulet for at vurdere status på autentificeringssystemet. Jeg vil nu liste indholdet af undermapperne i apps/api/src/modules/auth/.

quranic-arabic-trainer-2/apps/api/src/modules/auth
Jeg vil nu se nærmere på indholdet af auth.module.ts, controllers/auth/ (hvis det er en fil, ellers indholdet af mappen), dtos/create-auth.dto.ts, dtos/login-auth.dto.ts og services/auth/ (hvis det er en fil, ellers indholdet af mappen) for at få et detaljeret billede af autentificeringsmodulets implementering.

apps/api/src/modules/auth/auth.module.ts
:(1-200)
apps/api/src/modules/auth/dtos/create-auth.dto.ts
:(1-200)
apps/api/src/modules/auth/dtos/login-auth.dto.ts
:(1-200)
Det ser ud til, at controllers/auth/ og services/auth/ er mapper. Jeg vil nu liste indholdet af disse mapper for at finde de relevante controller- og servicefiler.

quranic-arabic-trainer-2/apps/api/src/modules/auth/controllers/auth
Nu vil jeg liste indholdet af services/auth/ mappen.

quranic-arabic-trainer-2/apps/api/src/modules/auth/services/auth
Nu har jeg stierne til controller- og service-filerne. Jeg vil se indholdet af auth.controller.ts og auth.service.ts for at færdiggøre analysen af autentificeringsmodulet.

apps/api/src/modules/auth/controllers/auth/auth.controller.ts
:(1-200)
apps/api/src/modules/auth/services/auth/auth.service.ts
:(1-200)
Nu vil jeg søge efter API-kald fra frontend til backend for at vurdere integrationsstatus. Jeg starter med at søge efter fetch og axios i app og components mapperne.

quranic-arabic-trainer-2
Jeg har analyseret kodebasen for at vurdere status på backend-udviklingen og integrationen med frontend. Her er mine fund og en foreslået plan:

Backend Status:

Grundlæggende Struktur: Backend'en (i apps/api) er sat op med NestJS og følger en modulær struktur. Der er et AppModule, AppController, og AppService.
Database (Prisma): Prisma er konfigureret med en SQLite-database (som specificeret i schema.prisma). Datamodellerne inkluderer User, Word, Verse, Lesson, og Quiz. Disse ser ud til at dække kernefunktionaliteten.
Autentificering (AuthModule):
Der er et fuldt implementeret AuthModule i apps/api/src/modules/auth/.
Den bruger JWT (JSON Web Tokens) til tokens, med secret og expiresIn konfigureret.
AuthController har endpoints for /auth/register og /auth/login.
AuthService håndterer logikken for brugerregistrering (med password hashing via bcrypt) og login.
DTOs (CreateAuthDto og LoginAuthDto) er defineret for inputvalidering.
Andre Moduler: Udover AuthModule og PrismaModule er der ikke andre funktionsspecifikke moduler i apps/api/src/modules/ på nuværende tidspunkt. Dette indikerer, at funktionalitet relateret til ord, vers, lektioner og quizzer endnu ikke er implementeret som API-endpoints.
Frontend-Backend Integration Status:

Søgningen efter fetch og axios viser primært brug i service worker (sw.ts) og offline storage (offline-storage.ts). Dette tyder på, at integrationen med de nye backend API-endpoints (udover potentielt auth, som ikke er direkte synlig i disse søgeresultater) er meget begrænset eller endnu ikke påbegyndt.
Der er ingen tydelige tegn på, at frontend-komponenterne aktivt kalder de definerede NestJS API-endpoints for datahentning eller -manipulation relateret til kerneentiteter som Word, Verse, Lesson, eller Quiz.
Konklusion og Overordnet Status:

Backend: Fundamentet for backend er lagt med NestJS, Prisma og et fungerende autentificeringssystem. Dog mangler implementeringen af CRUD-operationer og specifik forretningslogik for kerneentiteterne (Word, Verse, Lesson, Quiz).
Integration: Der er minimal til ingen integration mellem frontend og de nye backend API-endpoints udover hvad der måtte være for autentificering (som skal verificeres yderligere i frontend-koden).
Opdateret Trin-for-Trin Plan:

Fase 1: Færdiggørelse af Backend API (Kernefunktionalitet)

Design API Endpoints:
Definer RESTful API endpoints for Word, Verse, Lesson, og Quiz entiteterne. Overvej standard CRUD-operationer (Create, Read, Update, Delete) samt eventuelle specifikke behov (f.eks. søgning, filtrering).
Dokumenter disse endpoints (f.eks. med Swagger-dekorationer i NestJS controllere).
Implementer NestJS Moduler:
Opret separate NestJS moduler for hver kerneentitet (f.eks. WordsModule, VersesModule, LessonsModule, QuizzesModule).
Hvert modul skal indeholde:
Controller: Håndterer indkommende HTTP-requests og videresender til service.
Service: Indeholder forretningslogikken og interagerer med PrismaService for databaseoperationer.
DTOs: Definer Data Transfer Objects for request/response validering og transformation.
Implementer Service Logik:
Skriv logikken i services til at håndtere CRUD-operationer og anden nødvendig funktionalitet.
Implementer validering og fejlhåndtering.
Beskyt Endpoints:
Integrer AuthModule for at beskytte relevante endpoints, så kun autentificerede (og evt. autoriserede) brugere kan tilgå dem.
Testning (Backend):
Skriv unit tests for services og controllere.
Overvej integrationstests for API-endpoints (f.eks. med Jest/Supertest).
Fase 2: Frontend-Backend Integration

API Service Lag (Frontend):
Opret et dedikeret service-lag eller hooks i frontend (f.eks. i lib eller hooks) til at håndtere kommunikation med de nye backend API-endpoints.
Brug fetch eller axios til at lave HTTP-kald.
Håndter API-tokens (JWT) korrekt for autentificerede kald.
Integration i Komponenter:
Opdater frontend-komponenter (i app og components) til at bruge det nye API service-lag til at hente og sende data.
Erstat mock-data med data fra backend.
Implementer loading states og fejlhåndtering i UI'en.
Autentificeringsflow (Frontend):
Sørg for at login- og registreringsformularer i frontend (app/auth) kalder de respektive backend API-endpoints.
Håndter lagring og brug af JWT-token i frontend for efterfølgende autentificerede kald.
Implementer logud-funktionalitet.
Testning (Frontend & Integration):
Test komponenter, der interagerer med backend.
Udfør end-to-end tests for at verificere det samlede flow.
Fase 3: AI-Funktionalitet og Avancerede Features

Backend AI Integration:
Design og implementer API-endpoints i backend, der kan håndtere AI-relaterede opgaver (f.eks. modtage tekst til analyse, returnere feedback).
Integrer med eventuelle eksterne AI-tjenester eller modeller.
Frontend AI Integration:
Udvikl frontend-komponenter, der interagerer med AI-backend-endpoints for at levere AI-drevet feedback, forklaringer osv. (f.eks. ai-explain-overlay.tsx, ai-insight-card.tsx).
Implementer Øvrige Features:
Fortsæt med implementering af andre planlagte features som specificeret i PROJEKT_ANALYSE.md og api_udviklingsplan.md (hvis relevant for backend/integration).
Fase 4: Optimering, Sikkerhed og Deployment

Performance Optimering:
Analyser og optimer både frontend og backend performance (databaseforespørgsler, rendering, bundle sizes etc.).
Sikkerhedsgennemgang:
Foretag en grundig sikkerhedsgennemgang af både frontend og backend, med fokus på OWASP Top 10 og best practices for Next.js/NestJS.
PWA og Offline:
Færdiggør og test PWA-funktionalitet og offline-kapabiliteter.
Deployment:
Opsæt en robust deployment pipeline for både frontend og backend.
Denne plan giver en struktureret tilgang til at færdiggøre backend'en og sikre en solid integration med frontend. Det er vigtigt at prioritere opgaverne og arbejde iterativt.
</file>

<file path="pnpm-workspace.yaml">
onlyBuiltDependencies:
  - sharp
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="PROJEKT_ANALYSE.md">
# Projektanalyse: Quranic Arabic Trainer

## Overholdelse af guidelines
- Projektet følger generelt en god komponentstruktur, bruger Next.js App Router, TypeScript, Tailwind CSS og shadcn/ui-komponenter.
- UI-komponenter som `Card`, `Tabs` og domænespecifikke komponenter som `quran-word-analysis.tsx` er veldesignede, modulære og genbrugelige, hvilket stemmer overens med atomic design og SRP-principper.
- Kodebasen bruger meningsfulde navne og har en klar opdeling mellem UI og domænelogik.

## Fejl og mangler
- **Kritisk build-fejl:** `/app/quran/advanced-study/page.tsx` importerer tre ikke-eksisterende komponenter: `TafsirSection`, `ComparativeStudySection` og `ThematicExplorationSection`. Disse findes hverken i `/components` eller andre steder i projektet, hvilket forhindrer build og deployment.
- Dette er et brud på guidelines om modulær arkitektur, kodekvalitet og "no broken imports".
- Ingen testfiler eller teststrategi synlig for de kritiske domænekomponenter.
- Ingen synlig fejlhåndtering eller fallback UI for manglende data i de avancerede studie-sektioner.

## Best practice research
- Hver avanceret sektion bør implementeres som en selvstændig, modulær komponent i `/components`, med klart definerede props og ansvar.
- Følg atomic design: Atomer (UI primitives), Molekyler (små sektioner), Organismer (hele sektioner som TafsirSection).
- Brug eksisterende UI primitives (`Card`, `Tabs`, `Badge`, etc.) for konsistens.
- Tilføj fejlhåndtering og evt. loading states i sektionerne.
- Overvej at tilføje simple unit tests for de nye sektioner.

## Trin-for-trin plan for at fikse problemer iht. best practice
1. **Opret de manglende komponenter** i `/components`:
   - `tafsir-section.tsx`
   - `comparative-study-section.tsx`
   - `thematic-exploration-section.tsx`
2. Implementér hver komponent som en "organism" med klart ansvar og props, brugende Card/Tabs UI primitives.
3. Tilføj fejlhåndtering og evt. loading states i hver sektion.
4. Opdater `/app/quran/advanced-study/page.tsx` til at bruge de nye komponenter.
5. Kør build og dev igen for at sikre at fejlen er løst.
6. (Valgfrit) Tilføj simple unit tests for de nye sektioner.
7. Dokumentér de nye komponenter og deres props i README eller relevant dokumentation.

## Konklusion
Projektet følger overordnet guidelines, men build-fejlen pga. manglende komponenter skal løses straks for at sikre stabilitet og videreudvikling. Følg ovenstående trin-for-trin plan for at bringe projektet i compliance med best practice og interne retningslinjer.
</file>

<file path="README.md">
```
# Quranic Arabic Trainer 2

## Projektbeskrivelse

Dette projekt er en platform til at lære koranisk arabisk. 

## Nye Komponenter

### `TafsirSection`
Viser tafsir-information for et givent koranvers eller -afsnit.
- **Props**: `surahId: string`, `ayahId?: string` (valgfri)
- **Funktionalitet**: Henter og viser tafsir-data, håndterer loading- og fejltilstande.

### `ComparativeStudySection`
Tillader sammenlignende studie af forskellige oversættelser eller tafsirer.
- **Props**: `surahId: string`, `ayahId?: string` (valgfri)
- **Funktionalitet**: Henter og viser data til sammenlignende studie, håndterer loading- og fejltilstande.

### `ThematicExplorationSection`
Muliggør tematisk udforskning af Koranen.
- **Props**: `themeId: string` (eller lignende prop til at identificere temaet)
- **Funktionalitet**: Henter og viser data relateret til et specifikt tema, håndterer loading- og fejltilstande.

## Mappestruktur

quranic-arabic-trainer-2
├─ .next
│  ├─ app-build-manifest.json
│  ├─ build-manifest.json
│  ├─ cache
│  │  ├─ .rscinfo
│  │  ├─ swc
│  │  │  └─ plugins
│  │  │     └─ v7_macos_aarch64_8.0.0
│  │  └─ webpack
│  │     ├─ client-development
│  │     │  ├─ 0.pack.gz
│  │     │  ├─ 1.pack.gz
│  │     │  ├─ 10.pack.gz
│  │     │  ├─ 11.pack.gz
│  │     │  ├─ 12.pack.gz
│  │     │  ├─ 13.pack.gz
│  │     │  ├─ 14.pack.gz
│  │     │  ├─ 15.pack.gz
│  │     │  ├─ 2.pack.gz
│  │     │  ├─ 3.pack.gz
│  │     │  ├─ 4.pack.gz
│  │     │  ├─ 5.pack.gz
│  │     │  ├─ 6.pack.gz
│  │     │  ├─ 7.pack.gz
│  │     │  ├─ 8.pack.gz
│  │     │  ├─ 9.pack.gz
│  │     │  ├─ index.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     ├─ client-development-fallback
│  │     │  ├─ 0.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     ├─ server-development
│  │     │  ├─ 0.pack.gz
│  │     │  ├─ 1.pack.gz
│  │     │  ├─ 10.pack.gz
│  │     │  ├─ 11.pack.gz
│  │     │  ├─ 12.pack.gz
│  │     │  ├─ 2.pack.gz
│  │     │  ├─ 3.pack.gz
│  │     │  ├─ 4.pack.gz
│  │     │  ├─ 5.pack.gz
│  │     │  ├─ 6.pack.gz
│  │     │  ├─ 7.pack.gz
│  │     │  ├─ 8.pack.gz
│  │     │  ├─ 9.pack.gz
│  │     │  ├─ index.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     └─ server-production
│  │        ├─ 0.pack
│  │        └─ index.pack
│  ├─ fallback-build-manifest.json
│  ├─ package.json
│  ├─ react-loadable-manifest.json
│  ├─ server
│  │  ├─ _error.js
│  │  ├─ app
│  │  │  ├─ _not-found
│  │  │  │  ├─ page.js
│  │  │  │  └─ page_client-reference-manifest.js
│  │  │  ├─ alphabet
│  │  │  │  ├─ page.js
│  │  │  │  └─ page_client-reference-manifest.js
│  │  │  ├─ manifest.webmanifest
│  │  │  │  ├─ route.js
│  │  │  │  └─ route_client-reference-manifest.js
│  │  │  ├─ page.js
│  │  │  └─ page_client-reference-manifest.js
│  │  ├─ app-paths-manifest.json
│  │  ├─ interception-route-rewrite-manifest.js
│  │  ├─ middleware-build-manifest.js
│  │  ├─ middleware-manifest.json
│  │  ├─ middleware-react-loadable-manifest.js
│  │  ├─ next-font-manifest.js
│  │  ├─ next-font-manifest.json
│  │  ├─ pages
│  │  │  ├─ _app.js
│  │  │  ├─ _document.js
│  │  │  └─ _error.js
│  │  ├─ pages-manifest.json
│  │  ├─ server-reference-manifest.js
│  │  ├─ server-reference-manifest.json
│  │  ├─ vendor-chunks
│  │  │  ├─ @floating-ui+core@1.7.0.js
│  │  │  ├─ @floating-ui+dom@1.7.0.js
│  │  │  ├─ @floating-ui+react-dom@2.1.2_react-dom@19.1.0_react@19.1.0__react@19.1.0.js
│  │  │  ├─ @floating-ui+utils@0.2.9.js
│  │  │  ├─ @radix-ui+primitive@1.1.1.js
│  │  │  ├─ @radix-ui+react-arrow@1.1.1_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@1_12fe1e1085e195cf0683cfce7d3adb96.js
│  │  │  ├─ @radix-ui+react-avatar@1.1.2_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@_30315a37dbb102943255fe70da706b87.js
│  │  │  ├─ @radix-ui+react-collection@1.1.1_@types+react-dom@19.1.5_@types+react@19.1.4__@types+re_1fb4b9529f929dd02b7897e077229d03.js
│  │  │  ├─ @radix-ui+react-compose-refs@1.1.1_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-compose-refs@1.1.2_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-context@1.1.1_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-context@1.1.2_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-dialog@1.1.4_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@_fae02e8b2743814b42549494a3e5c591.js
│  │  │  ├─ @radix-ui+react-direction@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-dismissable-layer@1.1.3_@types+react-dom@19.1.5_@types+react@19.1.4__@t_ddb2e391162b1c51556ac1f8b5d28930.js
│  │  │  ├─ @radix-ui+react-dropdown-menu@2.1.4_@types+react-dom@19.1.5_@types+react@19.1.4__@types_c20e02b3e0c812eeb2af17a44a7b4067.js
│  │  │  ├─ @radix-ui+react-focus-guards@1.1.1_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-focus-scope@1.1.1_@types+react-dom@19.1.5_@types+react@19.1.4__@types+r_e29235eda86fe0f92c1e98c2211d763c.js
│  │  │  ├─ @radix-ui+react-id@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-id@1.1.1_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-menu@2.1.4_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@19_45f893058b379553150f1aa7a0f0b6a7.js
│  │  │  ├─ @radix-ui+react-popper@1.2.1_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@_910688d4f3cb83ecf698ad7ae3e1c893.js
│  │  │  ├─ @radix-ui+react-portal@1.1.3_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@_9293d93129239ba2c4dd77e1548b17d3.js
│  │  │  ├─ @radix-ui+react-presence@1.1.2_@types+react-dom@19.1.5_@types+react@19.1.4__@types+reac_cf404f2765adb4b6877f4e8a2d692386.js
│  │  │  ├─ @radix-ui+react-primitive@2.0.1_@types+react-dom@19.1.5_@types+react@19.1.4__@types+rea_cfb4d79a5b3ebf373dc69b2d58bc79b3.js
│  │  │  ├─ @radix-ui+react-primitive@2.1.2_@types+react-dom@19.1.5_@types+react@19.1.4__@types+rea_7b933c94c4e5e4ade0d694d5b36d9593.js
│  │  │  ├─ @radix-ui+react-progress@1.1.6_@types+react-dom@19.1.5_@types+react@19.1.4__@types+reac_6fbf669f5c090fe74335dc4530bf548d.js
│  │  │  ├─ @radix-ui+react-roving-focus@1.1.1_@types+react-dom@19.1.5_@types+react@19.1.4__@types+_be2e1e0121ae936d3c9bf04fd1c4493f.js
│  │  │  ├─ @radix-ui+react-slot@1.1.1_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-slot@1.2.2_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-tabs@1.1.2_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@19_a639b88c63d21cde8799e42d96c8096f.js
│  │  │  ├─ @radix-ui+react-use-callback-ref@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-use-controllable-state@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-use-escape-keydown@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-use-layout-effect@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-use-layout-effect@1.1.1_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @radix-ui+react-use-size@1.1.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ @swc+helpers@0.5.15.js
│  │  │  ├─ aria-hidden@1.2.6.js
│  │  │  ├─ class-variance-authority@0.7.1.js
│  │  │  ├─ clsx@2.1.1.js
│  │  │  ├─ cmdk@1.0.4_@types+react-dom@19.1.5_@types+react@19.1.4__@types+react@19.1.4_react-dom@19.1.0_react@19.1.0__react@19.1.0.js
│  │  │  ├─ get-nonce@1.0.1.js
│  │  │  ├─ lucide-react@0.454.0_react@19.1.0.js
│  │  │  ├─ next-themes@0.4.6_react-dom@19.1.0_react@19.1.0__react@19.1.0.js
│  │  │  ├─ next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0.js
│  │  │  ├─ react-remove-scroll-bar@2.3.8_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ react-remove-scroll@2.7.0_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ react-style-singleton@2.2.3_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ tailwind-merge@2.6.0.js
│  │  │  ├─ tslib@2.8.1.js
│  │  │  ├─ use-callback-ref@1.3.3_@types+react@19.1.4_react@19.1.0.js
│  │  │  ├─ use-sidecar@1.1.3_@types+react@19.1.4_react@19.1.0.js
│  │  │  └─ use-sync-external-store@1.5.0_react@19.1.0.js
│  │  └─ webpack-runtime.js
│  ├─ static
│  │  ├─ chunks
│  │  │  ├─ _error.js
│  │  │  ├─ app
│  │  │  │  ├─ _not-found
│  │  │  │  │  └─ page.js
│  │  │  │  ├─ alphabet
│  │  │  │  │  └─ page.js
│  │  │  │  ├─ layout.js
│  │  │  │  ├─ loading.js
│  │  │  │  ├─ manifest.webmanifest
│  │  │  │  │  └─ route.js
│  │  │  │  └─ page.js
│  │  │  ├─ app-pages-internals.js
│  │  │  ├─ fallback
│  │  │  │  ├─ amp.js
│  │  │  │  ├─ main-app.js
│  │  │  │  ├─ main.js
│  │  │  │  ├─ pages
│  │  │  │  │  ├─ _app.js
│  │  │  │  │  └─ _error.js
│  │  │  │  ├─ react-refresh.js
│  │  │  │  └─ webpack.js
│  │  │  ├─ main-app.js
│  │  │  ├─ main.js
│  │  │  ├─ pages
│  │  │  │  ├─ _app.js
│  │  │  │  └─ _error.js
│  │  │  ├─ polyfills.js
│  │  │  ├─ react-refresh.js
│  │  │  └─ webpack.js
│  │  ├─ css
│  │  │  └─ app
│  │  │     └─ layout.css
│  │  ├─ development
│  │  │  ├─ _buildManifest.js
│  │  │  └─ _ssgManifest.js
│  │  ├─ media
│  │  │  ├─ 26a46d62cd723877-s.woff2
│  │  │  ├─ 55c55f0601d81cf3-s.woff2
│  │  │  ├─ 581909926a08bbc8-s.woff2
│  │  │  ├─ 6c53a2ef68e5063c-s.p.ttf
│  │  │  ├─ 6d93bde91c0c2823-s.woff2
│  │  │  ├─ 97e0cb1ae144a2a9-s.woff2
│  │  │  ├─ a34f9d1faa5f3315-s.p.woff2
│  │  │  ├─ b68fae107ed40d4c-s.p.ttf
│  │  │  └─ df0a9ae256c0569c-s.woff2
│  │  └─ webpack
│  │     ├─ 072d5fe03ffc9680.webpack.hot-update.json
│  │     ├─ 0fdc567e56d8f8c1.webpack.hot-update.json
│  │     ├─ 14c67a1668d138d8.webpack.hot-update.json
│  │     ├─ 164f691d089c176d.webpack.hot-update.json
│  │     ├─ 1f585815618cd5bd.webpack.hot-update.json
│  │     ├─ 39dd996ae22d0e16.webpack.hot-update.json
│  │     ├─ 420332a898525aa7.webpack.hot-update.json
│  │     ├─ 4891376c87c4558f.webpack.hot-update.json
│  │     ├─ 4df7010463815e2a.webpack.hot-update.json
│  │     ├─ 534e86e148d43d44.webpack.hot-update.json
│  │     ├─ 5455a4eb28516ffd.webpack.hot-update.json
│  │     ├─ 54b51a4df43c9226.webpack.hot-update.json
│  │     ├─ 62b173080d1cc0f3.webpack.hot-update.json
│  │     ├─ 633457081244afec._.hot-update.json
│  │     ├─ 6821065dff4fb8fd.webpack.hot-update.json
│  │     ├─ 69260cf55fd39d0a.webpack.hot-update.json
│  │     ├─ 6f9ec1d7d2f486db.webpack.hot-update.json
│  │     ├─ 782baad0a5229bc3.webpack.hot-update.json
│  │     ├─ 7d46150ee5292ff6.webpack.hot-update.json
│  │     ├─ 8d8a604b684ab730.webpack.hot-update.json
│  │     ├─ 91eca637633023a8.webpack.hot-update.json
│  │     ├─ 97f1e28675995897.webpack.hot-update.json
│  │     ├─ ac323c1e6a22bb1e.webpack.hot-update.json
│  │     ├─ ace888855a701d5f.webpack.hot-update.json
│  │     ├─ app
│  │     │  ├─ alphabet
│  │     │  │  ├─ page.0fdc567e56d8f8c1.hot-update.js
│  │     │  │  ├─ page.69260cf55fd39d0a.hot-update.js
│  │     │  │  ├─ page.6f9ec1d7d2f486db.hot-update.js
│  │     │  │  ├─ page.7d46150ee5292ff6.hot-update.js
│  │     │  │  └─ page.b1f7bc8e8a9ad317.hot-update.js
│  │     │  ├─ layout.072d5fe03ffc9680.hot-update.js
│  │     │  ├─ layout.14c67a1668d138d8.hot-update.js
│  │     │  ├─ layout.164f691d089c176d.hot-update.js
│  │     │  ├─ layout.420332a898525aa7.hot-update.js
│  │     │  ├─ layout.4891376c87c4558f.hot-update.js
│  │     │  ├─ layout.54b51a4df43c9226.hot-update.js
│  │     │  ├─ layout.62b173080d1cc0f3.hot-update.js
│  │     │  ├─ layout.6821065dff4fb8fd.hot-update.js
│  │     │  ├─ layout.69260cf55fd39d0a.hot-update.js
│  │     │  ├─ layout.6f9ec1d7d2f486db.hot-update.js
│  │     │  ├─ layout.782baad0a5229bc3.hot-update.js
│  │     │  ├─ layout.97f1e28675995897.hot-update.js
│  │     │  ├─ layout.ac323c1e6a22bb1e.hot-update.js
│  │     │  ├─ layout.ace888855a701d5f.hot-update.js
│  │     │  ├─ layout.bf033a4d79242987.hot-update.js
│  │     │  ├─ layout.cfdf525962a04a94.hot-update.js
│  │     │  ├─ layout.d1c1097470f347f5.hot-update.js
│  │     │  ├─ layout.ddcf3acbb8701fbb.hot-update.js
│  │     │  ├─ layout.e7da7beb5f94ba33.hot-update.js
│  │     │  ├─ page.0fdc567e56d8f8c1.hot-update.js
│  │     │  ├─ page.69260cf55fd39d0a.hot-update.js
│  │     │  ├─ page.6f9ec1d7d2f486db.hot-update.js
│  │     │  ├─ page.97f1e28675995897.hot-update.js
│  │     │  ├─ page.d02af11e446304a2.hot-update.js
│  │     │  └─ page.d1c1097470f347f5.hot-update.js
│  │     ├─ b1f7bc8e8a9ad317.webpack.hot-update.json
│  │     ├─ bf033a4d79242987.webpack.hot-update.json
│  │     ├─ ce4959784706144c.webpack.hot-update.json
│  │     ├─ cfdf525962a04a94.webpack.hot-update.json
│  │     ├─ d02af11e446304a2.webpack.hot-update.json
│  │     ├─ d1c1097470f347f5.webpack.hot-update.json
│  │     ├─ d505a66eb37bd4e5.webpack.hot-update.json
│  │     ├─ ddcf3acbb8701fbb.webpack.hot-update.json
│  │     ├─ e7da7beb5f94ba33.webpack.hot-update.json
│  │     ├─ webpack.072d5fe03ffc9680.hot-update.js
│  │     ├─ webpack.0fdc567e56d8f8c1.hot-update.js
│  │     ├─ webpack.14c67a1668d138d8.hot-update.js
│  │     ├─ webpack.164f691d089c176d.hot-update.js
│  │     ├─ webpack.1f585815618cd5bd.hot-update.js
│  │     ├─ webpack.39dd996ae22d0e16.hot-update.js
│  │     ├─ webpack.420332a898525aa7.hot-update.js
│  │     ├─ webpack.4891376c87c4558f.hot-update.js
│  │     ├─ webpack.4df7010463815e2a.hot-update.js
│  │     ├─ webpack.534e86e148d43d44.hot-update.js
│  │     ├─ webpack.5455a4eb28516ffd.hot-update.js
│  │     ├─ webpack.54b51a4df43c9226.hot-update.js
│  │     ├─ webpack.62b173080d1cc0f3.hot-update.js
│  │     ├─ webpack.6821065dff4fb8fd.hot-update.js
│  │     ├─ webpack.69260cf55fd39d0a.hot-update.js
│  │     ├─ webpack.6f9ec1d7d2f486db.hot-update.js
│  │     ├─ webpack.782baad0a5229bc3.hot-update.js
│  │     ├─ webpack.7d46150ee5292ff6.hot-update.js
│  │     ├─ webpack.8d8a604b684ab730.hot-update.js
│  │     ├─ webpack.91eca637633023a8.hot-update.js
│  │     ├─ webpack.97f1e28675995897.hot-update.js
│  │     ├─ webpack.ac323c1e6a22bb1e.hot-update.js
│  │     ├─ webpack.ace888855a701d5f.hot-update.js
│  │     ├─ webpack.b1f7bc8e8a9ad317.hot-update.js
│  │     ├─ webpack.bf033a4d79242987.hot-update.js
│  │     ├─ webpack.ce4959784706144c.hot-update.js
│  │     ├─ webpack.cfdf525962a04a94.hot-update.js
│  │     ├─ webpack.d02af11e446304a2.hot-update.js
│  │     ├─ webpack.d1c1097470f347f5.hot-update.js
│  │     ├─ webpack.d505a66eb37bd4e5.hot-update.js
│  │     ├─ webpack.ddcf3acbb8701fbb.hot-update.js
│  │     └─ webpack.e7da7beb5f94ba33.hot-update.js
│  ├─ trace
│  └─ types
│     ├─ app
│     │  ├─ alphabet
│     │  │  └─ page.ts
│     │  ├─ layout.ts
│     │  └─ page.ts
│     ├─ cache-life.d.ts
│     └─ package.json
├─ .repomix
│  └─ bundles.json
├─ Struktur.txt
├─ app
│  ├─ admin
│  │  └─ page.tsx
│  ├─ advanced-progression
│  │  └─ page.tsx
│  ├─ ai-feedback
│  │  └─ page.tsx
│  ├─ alphabet
│  │  └─ page.tsx
│  ├─ auth
│  │  ├─ login
│  │  │  └─ page.tsx
│  │  └─ register
│  │     └─ page.tsx
│  ├─ community
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ globals.css
│  ├─ grammar
│  │  └─ page.tsx
│  ├─ kurser
│  │  └─ [kursusId]
│  │     └─ [fagId]
│  │        └─ [emneId]
│  │           └─ page.tsx
│  ├─ layout.tsx
│  ├─ learn
│  │  └─ vocabulary
│  │     └─ page.tsx
│  ├─ loading.tsx
│  ├─ manifest.ts
│  ├─ offline
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ page.tsx
│  ├─ performance
│  │  └─ page.tsx
│  ├─ practice
│  │  └─ quiz
│  │     └─ page.tsx
│  ├─ profile
│  │  └─ page.tsx
│  ├─ pronunciation
│  │  └─ page.tsx
│  ├─ quiz
│  │  └─ page.tsx
│  ├─ quiz-system
│  │  └─ page.tsx
│  ├─ quran
│  │  ├─ advanced-study
│  │  │  ├─ loading.tsx
│  │  │  └─ page.tsx
│  │  ├─ loading.tsx
│  │  ├─ page.tsx
│  │  └─ study
│  │     └─ [surahId]
│  │        ├─ error.tsx
│  │        ├─ loading.tsx
│  │        └─ page.tsx
│  ├─ settings
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ sw.ts
│  └─ vocabulary
│     └─ flashcards
│        └─ page.tsx
├─ components
│  ├─ admin-analytics-chart.tsx
│  ├─ admin-error-heatmap.tsx
│  ├─ ai-explain-overlay.tsx
│  ├─ ai-insight-card.tsx
│  ├─ command-menu.tsx
│  ├─ course-card.tsx
│  ├─ flashcard-stats.tsx
│  ├─ glassmorphism-header.tsx
│  ├─ level-progress-ring.tsx
│  ├─ main-nav.tsx
│  ├─ notification-popup.tsx
│  ├─ performance
│  │  ├─ code-splitting-example.tsx
│  │  ├─ lazy-loaded-component.tsx
│  │  ├─ optimized-image.tsx
│  │  ├─ performance-metrics.tsx
│  │  └─ resource-monitor.tsx
│  ├─ progress-ring.tsx
│  ├─ progress.tsx
│  ├─ quran-word-analysis.tsx
│  ├─ recent-activity-card.tsx
│  ├─ theme-provider.tsx
│  ├─ topic-discussion-thread.tsx
│  ├─ ui
│  │  ├─ accordion.tsx
│  │  ├─ alert-dialog.tsx
│  │  ├─ alert.tsx
│  │  ├─ aspect-ratio.tsx
│  │  ├─ avatar.tsx
│  │  ├─ badge.tsx
│  │  ├─ breadcrumb.tsx
│  │  ├─ button.tsx
│  │  ├─ calendar.tsx
│  │  ├─ card.tsx
│  │  ├─ carousel.tsx
│  │  ├─ chart.tsx
│  │  ├─ checkbox.tsx
│  │  ├─ collapsible.tsx
│  │  ├─ command.tsx
│  │  ├─ context-menu.tsx
│  │  ├─ dialog.tsx
│  │  ├─ drawer.tsx
│  │  ├─ dropdown-menu.tsx
│  │  ├─ form.tsx
│  │  ├─ hover-card.tsx
│  │  ├─ input-otp.tsx
│  │  ├─ input.tsx
│  │  ├─ label.tsx
│  │  ├─ menubar.tsx
│  │  ├─ navigation-menu.tsx
│  │  ├─ pagination.tsx
│  │  ├─ popover.tsx
│  │  ├─ progress.tsx
│  │  ├─ radio-group.tsx
│  │  ├─ resizable.tsx
│  │  ├─ scroll-area.tsx
│  │  ├─ select.tsx
│  │  ├─ separator.tsx
│  │  ├─ sheet.tsx
│  │  ├─ sidebar.tsx
│  │  ├─ skeleton.tsx
│  │  ├─ slider.tsx
│  │  ├─ sonner.tsx
│  │  ├─ switch.tsx
│  │  ├─ table.tsx
│  │  ├─ tabs.tsx
│  │  ├─ textarea.tsx
│  │  ├─ toast.tsx
│  │  ├─ toaster.tsx
│  │  ├─ toggle-group.tsx
│  │  ├─ toggle.tsx
│  │  ├─ tooltip.tsx
│  │  ├─ use-mobile.tsx
│  │  └─ use-toast.ts
│  └─ user-nav.tsx
├─ components.json
├─ fejl.txt
├─ hooks
│  ├─ use-mobile.tsx
│  ├─ use-performance.ts
│  └─ use-toast.ts
├─ lib
│  ├─ offline-storage.ts
│  ├─ performance-monitoring.ts
│  └─ utils.ts
├─ next.config.mjs
├─ package.json
├─ pnpm-lock.yaml
├─ pnpm-workspace.yaml
├─ postcss.config.mjs
├─ public
│  ├─ fonts
│  │  ├─ ScheherazadeNew-Bold.ttf
│  │  └─ ScheherazadeNew-Regular.ttf
│  ├─ placeholder-logo.png
│  ├─ placeholder-logo.svg
│  ├─ placeholder-user.jpg
│  ├─ placeholder.jpg
│  └─ placeholder.svg
├─ repomix-output.xml
├─ styles
│  └─ globals.css
├─ tailwind.config.js
└─ tsconfig.json

```
</file>

<file path="stackinfo.txt">
# Quranic Arabic Trainer - Teknologistak

## Frontend (`/apps/web` - Eksisterende)
- **Framework:** Next.js (React 18)
- **Sprog:** TypeScript
- **Styling:** Tailwind CSS
- **UI Komponenter:** shadcn/ui
- **Package Manager:** PNPM
- **PWA:** Ja (manifest.ts, sw.ts)
- **Offline funktionalitet:** Ja (lib/offline-storage.ts)
- **Performance Monitorering:** Ja (lib/performance-monitoring.ts)

## Backend (`/apps/api` - Planlagt)
- **Framework:** NestJS v10.3.10
- **Sprog:** TypeScript v5.3.3
- **ORM:** Prisma v6.8.2
- **Database:** PostgreSQL v15
- **API Dokumentation:** Swagger (OpenAPI)
- **Package Manager:** PNPM (forventes i monorepo-setup)

## Generelt
- **Monorepo:** Ja (forventes med PNPM workspaces)
- **Versionering:** Git
- **Primær Udviklings-IDE:** Trae AI
</file>

<file path="Struktur.txt">
```
quranic-arabic-trainer-2
├─ app
│  ├─ admin
│  │  └─ page.tsx
│  ├─ advanced-progression
│  │  └─ page.tsx
│  ├─ ai-feedback
│  │  └─ page.tsx
│  ├─ alphabet
│  │  └─ page.tsx
│  ├─ auth
│  │  ├─ login
│  │  │  └─ page.tsx
│  │  └─ register
│  │     └─ page.tsx
│  ├─ community
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ globals.css
│  ├─ grammar
│  │  └─ page.tsx
│  ├─ kurser
│  │  └─ [kursusId]
│  │     └─ [fagId]
│  │        └─ [emneId]
│  │           └─ page.tsx
│  ├─ layout.tsx
│  ├─ learn
│  │  └─ vocabulary
│  │     └─ page.tsx
│  ├─ loading.tsx
│  ├─ manifest.ts
│  ├─ offline
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ page.tsx
│  ├─ performance
│  │  └─ page.tsx
│  ├─ practice
│  │  └─ quiz
│  │     └─ page.tsx
│  ├─ profile
│  │  └─ page.tsx
│  ├─ pronunciation
│  │  └─ page.tsx
│  ├─ quiz
│  │  └─ page.tsx
│  ├─ quiz-system
│  │  └─ page.tsx
│  ├─ quran
│  │  ├─ advanced-study
│  │  │  ├─ loading.tsx
│  │  │  └─ page.tsx
│  │  ├─ loading.tsx
│  │  ├─ page.tsx
│  │  └─ study
│  │     └─ [surahId]
│  │        ├─ error.tsx
│  │        ├─ loading.tsx
│  │        └─ page.tsx
│  ├─ settings
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ sw.ts
│  └─ vocabulary
│     └─ flashcards
│        └─ page.tsx
├─ components
│  ├─ admin-analytics-chart.tsx
│  ├─ admin-error-heatmap.tsx
│  ├─ ai-explain-overlay.tsx
│  ├─ ai-insight-card.tsx
│  ├─ command-menu.tsx
│  ├─ course-card.tsx
│  ├─ flashcard-stats.tsx
│  ├─ glassmorphism-header.tsx
│  ├─ level-progress-ring.tsx
│  ├─ main-nav.tsx
│  ├─ notification-popup.tsx
│  ├─ performance
│  │  ├─ code-splitting-example.tsx
│  │  ├─ lazy-loaded-component.tsx
│  │  ├─ optimized-image.tsx
│  │  ├─ performance-metrics.tsx
│  │  └─ resource-monitor.tsx
│  ├─ progress-ring.tsx
│  ├─ progress.tsx
│  ├─ quran-word-analysis.tsx
│  ├─ recent-activity-card.tsx
│  ├─ theme-provider.tsx
│  ├─ topic-discussion-thread.tsx
│  ├─ ui
│  │  ├─ accordion.tsx
│  │  ├─ alert-dialog.tsx
│  │  ├─ alert.tsx
│  │  ├─ aspect-ratio.tsx
│  │  ├─ avatar.tsx
│  │  ├─ badge.tsx
│  │  ├─ breadcrumb.tsx
│  │  ├─ button.tsx
│  │  ├─ calendar.tsx
│  │  ├─ card.tsx
│  │  ├─ carousel.tsx
│  │  ├─ chart.tsx
│  │  ├─ checkbox.tsx
│  │  ├─ collapsible.tsx
│  │  ├─ command.tsx
│  │  ├─ context-menu.tsx
│  │  ├─ dialog.tsx
│  │  ├─ drawer.tsx
│  │  ├─ dropdown-menu.tsx
│  │  ├─ form.tsx
│  │  ├─ hover-card.tsx
│  │  ├─ input-otp.tsx
│  │  ├─ input.tsx
│  │  ├─ label.tsx
│  │  ├─ menubar.tsx
│  │  ├─ navigation-menu.tsx
│  │  ├─ pagination.tsx
│  │  ├─ popover.tsx
│  │  ├─ progress.tsx
│  │  ├─ radio-group.tsx
│  │  ├─ resizable.tsx
│  │  ├─ scroll-area.tsx
│  │  ├─ select.tsx
│  │  ├─ separator.tsx
│  │  ├─ sheet.tsx
│  │  ├─ sidebar.tsx
│  │  ├─ skeleton.tsx
│  │  ├─ slider.tsx
│  │  ├─ sonner.tsx
│  │  ├─ switch.tsx
│  │  ├─ table.tsx
│  │  ├─ tabs.tsx
│  │  ├─ textarea.tsx
│  │  ├─ toast.tsx
│  │  ├─ toaster.tsx
│  │  ├─ toggle-group.tsx
│  │  ├─ toggle.tsx
│  │  ├─ tooltip.tsx
│  │  ├─ use-mobile.tsx
│  │  └─ use-toast.ts
│  └─ user-nav.tsx
├─ components.json
├─ hooks
│  ├─ use-mobile.tsx
│  ├─ use-performance.ts
│  └─ use-toast.ts
├─ lib
│  ├─ offline-storage.ts
│  ├─ performance-monitoring.ts
│  └─ utils.ts
├─ next.config.mjs
├─ package.json
├─ pnpm-lock.yaml
├─ postcss.config.mjs
├─ public
│  ├─ placeholder-logo.png
│  ├─ placeholder-logo.svg
│  ├─ placeholder-user.jpg
│  ├─ placeholder.jpg
│  └─ placeholder.svg
├─ repomix-output.xml
├─ styles
│  └─ globals.css
├─ tailwind.config.js
└─ tsconfig.json

```
```
quranic-arabic-trainer-2
├─ .next
│  ├─ app-build-manifest.json
│  ├─ build-manifest.json
│  ├─ cache
│  │  ├─ .rscinfo
│  │  ├─ swc
│  │  │  └─ plugins
│  │  │     └─ v7_macos_aarch64_8.0.0
│  │  └─ webpack
│  │     ├─ client-development
│  │     │  ├─ 0.pack.gz
│  │     │  ├─ 1.pack.gz
│  │     │  ├─ 10.pack.gz
│  │     │  ├─ 2.pack.gz
│  │     │  ├─ 3.pack.gz
│  │     │  ├─ 4.pack.gz
│  │     │  ├─ 5.pack.gz
│  │     │  ├─ 6.pack.gz
│  │     │  ├─ 7.pack.gz
│  │     │  ├─ 8.pack.gz
│  │     │  ├─ 9.pack.gz
│  │     │  ├─ index.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     ├─ client-development-fallback
│  │     │  ├─ 0.pack.gz
│  │     │  └─ index.pack.gz
│  │     └─ server-development
│  │        ├─ 0.pack.gz
│  │        ├─ 1.pack.gz
│  │        ├─ 2.pack.gz
│  │        ├─ 3.pack.gz
│  │        ├─ 4.pack.gz
│  │        ├─ 5.pack.gz
│  │        ├─ 6.pack.gz
│  │        ├─ 7.pack.gz
│  │        ├─ 8.pack.gz
│  │        ├─ index.pack.gz
│  │        └─ index.pack.gz.old
│  ├─ fallback-build-manifest.json
│  ├─ package.json
│  ├─ react-loadable-manifest.json
│  ├─ server
│  │  ├─ app
│  │  │  └─ _not-found
│  │  │     └─ page_client-reference-manifest.js
│  │  ├─ app-paths-manifest.json
│  │  ├─ interception-route-rewrite-manifest.js
│  │  ├─ middleware-build-manifest.js
│  │  ├─ middleware-manifest.json
│  │  ├─ middleware-react-loadable-manifest.js
│  │  ├─ next-font-manifest.js
│  │  ├─ next-font-manifest.json
│  │  ├─ pages-manifest.json
│  │  ├─ server-reference-manifest.js
│  │  └─ server-reference-manifest.json
│  ├─ static
│  │  ├─ chunks
│  │  │  ├─ app
│  │  │  │  └─ _not-found
│  │  │  │     └─ page.js
│  │  │  ├─ fallback
│  │  │  │  ├─ amp.js
│  │  │  │  ├─ main-app.js
│  │  │  │  ├─ main.js
│  │  │  │  ├─ pages
│  │  │  │  │  ├─ _app.js
│  │  │  │  │  └─ _error.js
│  │  │  │  ├─ react-refresh.js
│  │  │  │  └─ webpack.js
│  │  │  ├─ main-app.js
│  │  │  ├─ polyfills.js
│  │  │  └─ webpack.js
│  │  ├─ development
│  │  │  ├─ _buildManifest.js
│  │  │  └─ _ssgManifest.js
│  │  └─ webpack
│  │     └─ 633457081244afec._.hot-update.json
│  ├─ trace
│  └─ types
│     ├─ cache-life.d.ts
│     └─ package.json
├─ Struktur.txt
├─ app
│  ├─ admin
│  │  └─ page.tsx
│  ├─ advanced-progression
│  │  └─ page.tsx
│  ├─ ai-feedback
│  │  └─ page.tsx
│  ├─ alphabet
│  │  └─ page.tsx
│  ├─ auth
│  │  ├─ login
│  │  │  └─ page.tsx
│  │  └─ register
│  │     └─ page.tsx
│  ├─ community
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ globals.css
│  ├─ grammar
│  │  └─ page.tsx
│  ├─ kurser
│  │  └─ [kursusId]
│  │     └─ [fagId]
│  │        └─ [emneId]
│  │           └─ page.tsx
│  ├─ layout.tsx
│  ├─ learn
│  │  └─ vocabulary
│  │     └─ page.tsx
│  ├─ loading.tsx
│  ├─ manifest.ts
│  ├─ offline
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ page.tsx
│  ├─ performance
│  │  └─ page.tsx
│  ├─ practice
│  │  └─ quiz
│  │     └─ page.tsx
│  ├─ profile
│  │  └─ page.tsx
│  ├─ pronunciation
│  │  └─ page.tsx
│  ├─ quiz
│  │  └─ page.tsx
│  ├─ quiz-system
│  │  └─ page.tsx
│  ├─ quran
│  │  ├─ advanced-study
│  │  │  ├─ loading.tsx
│  │  │  └─ page.tsx
│  │  ├─ loading.tsx
│  │  ├─ page.tsx
│  │  └─ study
│  │     └─ [surahId]
│  │        ├─ error.tsx
│  │        ├─ loading.tsx
│  │        └─ page.tsx
│  ├─ settings
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ sw.ts
│  └─ vocabulary
│     └─ flashcards
│        └─ page.tsx
├─ components
│  ├─ admin-analytics-chart.tsx
│  ├─ admin-error-heatmap.tsx
│  ├─ ai-explain-overlay.tsx
│  ├─ ai-insight-card.tsx
│  ├─ command-menu.tsx
│  ├─ course-card.tsx
│  ├─ flashcard-stats.tsx
│  ├─ glassmorphism-header.tsx
│  ├─ level-progress-ring.tsx
│  ├─ main-nav.tsx
│  ├─ notification-popup.tsx
│  ├─ performance
│  │  ├─ code-splitting-example.tsx
│  │  ├─ lazy-loaded-component.tsx
│  │  ├─ optimized-image.tsx
│  │  ├─ performance-metrics.tsx
│  │  └─ resource-monitor.tsx
│  ├─ progress-ring.tsx
│  ├─ progress.tsx
│  ├─ quran-word-analysis.tsx
│  ├─ recent-activity-card.tsx
│  ├─ theme-provider.tsx
│  ├─ topic-discussion-thread.tsx
│  ├─ ui
│  │  ├─ accordion.tsx
│  │  ├─ alert-dialog.tsx
│  │  ├─ alert.tsx
│  │  ├─ aspect-ratio.tsx
│  │  ├─ avatar.tsx
│  │  ├─ badge.tsx
│  │  ├─ breadcrumb.tsx
│  │  ├─ button.tsx
│  │  ├─ calendar.tsx
│  │  ├─ card.tsx
│  │  ├─ carousel.tsx
│  │  ├─ chart.tsx
│  │  ├─ checkbox.tsx
│  │  ├─ collapsible.tsx
│  │  ├─ command.tsx
│  │  ├─ context-menu.tsx
│  │  ├─ dialog.tsx
│  │  ├─ drawer.tsx
│  │  ├─ dropdown-menu.tsx
│  │  ├─ form.tsx
│  │  ├─ hover-card.tsx
│  │  ├─ input-otp.tsx
│  │  ├─ input.tsx
│  │  ├─ label.tsx
│  │  ├─ menubar.tsx
│  │  ├─ navigation-menu.tsx
│  │  ├─ pagination.tsx
│  │  ├─ popover.tsx
│  │  ├─ progress.tsx
│  │  ├─ radio-group.tsx
│  │  ├─ resizable.tsx
│  │  ├─ scroll-area.tsx
│  │  ├─ select.tsx
│  │  ├─ separator.tsx
│  │  ├─ sheet.tsx
│  │  ├─ sidebar.tsx
│  │  ├─ skeleton.tsx
│  │  ├─ slider.tsx
│  │  ├─ sonner.tsx
│  │  ├─ switch.tsx
│  │  ├─ table.tsx
│  │  ├─ tabs.tsx
│  │  ├─ textarea.tsx
│  │  ├─ toast.tsx
│  │  ├─ toaster.tsx
│  │  ├─ toggle-group.tsx
│  │  ├─ toggle.tsx
│  │  ├─ tooltip.tsx
│  │  ├─ use-mobile.tsx
│  │  └─ use-toast.ts
│  └─ user-nav.tsx
├─ components.json
├─ hooks
│  ├─ use-mobile.tsx
│  ├─ use-performance.ts
│  └─ use-toast.ts
├─ lib
│  ├─ offline-storage.ts
│  ├─ performance-monitoring.ts
│  └─ utils.ts
├─ next.config.mjs
├─ package.json
├─ pnpm-lock.yaml
├─ pnpm-workspace.yaml
├─ postcss.config.mjs
├─ public
│  ├─ fonts
│  │  ├─ ScheherazadeNew-Bold.ttf
│  │  └─ ScheherazadeNew-Regular.ttf
│  ├─ placeholder-logo.png
│  ├─ placeholder-logo.svg
│  ├─ placeholder-user.jpg
│  ├─ placeholder.jpg
│  └─ placeholder.svg
├─ repomix-output.xml
├─ styles
│  └─ globals.css
├─ tailwind.config.js
└─ tsconfig.json

```
```
quranic-arabic-trainer-2
├─ .next
│  ├─ cache
│  │  ├─ .rscinfo
│  │  ├─ swc
│  │  │  └─ plugins
│  │  │     └─ v7_macos_aarch64_8.0.0
│  │  └─ webpack
│  │     ├─ client-development
│  │     │  ├─ 0.pack.gz
│  │     │  ├─ 1.pack.gz
│  │     │  ├─ 10.pack.gz
│  │     │  ├─ 11.pack.gz
│  │     │  ├─ 12.pack.gz
│  │     │  ├─ 13.pack.gz
│  │     │  ├─ 14.pack.gz
│  │     │  ├─ 15.pack.gz
│  │     │  ├─ 2.pack.gz
│  │     │  ├─ 3.pack.gz
│  │     │  ├─ 4.pack.gz
│  │     │  ├─ 5.pack.gz
│  │     │  ├─ 6.pack.gz
│  │     │  ├─ 7.pack.gz
│  │     │  ├─ 8.pack.gz
│  │     │  ├─ 9.pack.gz
│  │     │  ├─ index.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     ├─ client-development-fallback
│  │     │  ├─ 0.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     ├─ server-development
│  │     │  ├─ 0.pack.gz
│  │     │  ├─ 1.pack.gz
│  │     │  ├─ 10.pack.gz
│  │     │  ├─ 11.pack.gz
│  │     │  ├─ 12.pack.gz
│  │     │  ├─ 2.pack.gz
│  │     │  ├─ 3.pack.gz
│  │     │  ├─ 4.pack.gz
│  │     │  ├─ 5.pack.gz
│  │     │  ├─ 6.pack.gz
│  │     │  ├─ 7.pack.gz
│  │     │  ├─ 8.pack.gz
│  │     │  ├─ 9.pack.gz
│  │     │  ├─ index.pack.gz
│  │     │  └─ index.pack.gz.old
│  │     └─ server-production
│  │        ├─ 0.pack
│  │        ├─ 1.pack
│  │        ├─ 2.pack
│  │        ├─ 3.pack
│  │        ├─ index.pack
│  │        └─ index.pack.old
│  ├─ diagnostics
│  │  ├─ build-diagnostics.json
│  │  └─ framework.json
│  ├─ package.json
│  ├─ server
│  │  ├─ app
│  │  │  ├─ _not-found
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ admin
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ advanced-progression
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ ai-feedback
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ alphabet
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ auth
│  │  │  │  ├─ login
│  │  │  │  │  ├─ page.js
│  │  │  │  │  └─ page.js.nft.json
│  │  │  │  └─ register
│  │  │  │     ├─ page.js
│  │  │  │     └─ page.js.nft.json
│  │  │  ├─ community
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ grammar
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ kurser
│  │  │  │  └─ [kursusId]
│  │  │  │     └─ [fagId]
│  │  │  │        └─ [emneId]
│  │  │  │           ├─ page.js
│  │  │  │           └─ page.js.nft.json
│  │  │  ├─ learn
│  │  │  │  └─ vocabulary
│  │  │  │     ├─ page.js
│  │  │  │     └─ page.js.nft.json
│  │  │  ├─ manifest.webmanifest
│  │  │  │  ├─ route.js
│  │  │  │  └─ route.js.nft.json
│  │  │  ├─ offline
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ page.js
│  │  │  ├─ page.js.nft.json
│  │  │  ├─ performance
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ practice
│  │  │  │  └─ quiz
│  │  │  │     ├─ page.js
│  │  │  │     └─ page.js.nft.json
│  │  │  ├─ profile
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ pronunciation
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ quiz
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ quiz-system
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  ├─ quran
│  │  │  │  ├─ advanced-study
│  │  │  │  │  ├─ page.js
│  │  │  │  │  └─ page.js.nft.json
│  │  │  │  ├─ page.js
│  │  │  │  ├─ page.js.nft.json
│  │  │  │  └─ study
│  │  │  │     └─ [surahId]
│  │  │  │        ├─ page.js
│  │  │  │        └─ page.js.nft.json
│  │  │  ├─ settings
│  │  │  │  ├─ page.js
│  │  │  │  └─ page.js.nft.json
│  │  │  └─ vocabulary
│  │  │     └─ flashcards
│  │  │        ├─ page.js
│  │  │        └─ page.js.nft.json
│  │  ├─ app-paths-manifest.json
│  │  ├─ chunks
│  │  │  ├─ 150.js
│  │  │  ├─ 157.js
│  │  │  ├─ 211.js
│  │  │  ├─ 25.js
│  │  │  ├─ 281.js
│  │  │  ├─ 34.js
│  │  │  ├─ 363.js
│  │  │  ├─ 390.js
│  │  │  ├─ 472.js
│  │  │  ├─ 478.js
│  │  │  ├─ 520.js
│  │  │  ├─ 543.js
│  │  │  ├─ 634.js
│  │  │  ├─ 661.js
│  │  │  ├─ 721.js
│  │  │  ├─ 888.js
│  │  │  ├─ 91.js
│  │  │  ├─ 930.js
│  │  │  └─ 95.js
│  │  ├─ pages
│  │  │  ├─ _app.js
│  │  │  ├─ _app.js.nft.json
│  │  │  ├─ _document.js
│  │  │  ├─ _document.js.nft.json
│  │  │  ├─ _error.js
│  │  │  └─ _error.js.nft.json
│  │  ├─ pages-manifest.json
│  │  ├─ server-reference-manifest.js
│  │  ├─ server-reference-manifest.json
│  │  └─ webpack-runtime.js
│  ├─ trace
│  └─ types
│     ├─ app
│     │  ├─ admin
│     │  │  └─ page.ts
│     │  ├─ advanced-progression
│     │  │  └─ page.ts
│     │  ├─ ai-feedback
│     │  │  └─ page.ts
│     │  ├─ alphabet
│     │  │  └─ page.ts
│     │  ├─ auth
│     │  │  ├─ login
│     │  │  │  └─ page.ts
│     │  │  └─ register
│     │  │     └─ page.ts
│     │  ├─ community
│     │  │  └─ page.ts
│     │  ├─ grammar
│     │  │  └─ page.ts
│     │  ├─ kurser
│     │  │  └─ [kursusId]
│     │  │     └─ [fagId]
│     │  │        └─ [emneId]
│     │  │           └─ page.ts
│     │  ├─ layout.ts
│     │  ├─ learn
│     │  │  └─ vocabulary
│     │  │     └─ page.ts
│     │  ├─ offline
│     │  │  └─ page.ts
│     │  ├─ page.ts
│     │  ├─ performance
│     │  │  └─ page.ts
│     │  ├─ practice
│     │  │  └─ quiz
│     │  │     └─ page.ts
│     │  ├─ profile
│     │  │  └─ page.ts
│     │  ├─ pronunciation
│     │  │  └─ page.ts
│     │  ├─ quiz
│     │  │  └─ page.ts
│     │  ├─ quiz-system
│     │  │  └─ page.ts
│     │  ├─ quran
│     │  │  ├─ advanced-study
│     │  │  │  └─ page.ts
│     │  │  ├─ page.ts
│     │  │  └─ study
│     │  │     └─ [surahId]
│     │  │        └─ page.ts
│     │  ├─ settings
│     │  │  └─ page.ts
│     │  └─ vocabulary
│     │     └─ flashcards
│     │        └─ page.ts
│     ├─ cache-life.d.ts
│     └─ package.json
├─ PROJEKT_ANALYSE.md
├─ README.md
├─ Struktur.txt
├─ api_udviklingsplan.md
├─ app
│  ├─ admin
│  │  └─ page.tsx
│  ├─ advanced-progression
│  │  └─ page.tsx
│  ├─ ai-feedback
│  │  └─ page.tsx
│  ├─ alphabet
│  │  └─ page.tsx
│  ├─ auth
│  │  ├─ login
│  │  │  └─ page.tsx
│  │  └─ register
│  │     └─ page.tsx
│  ├─ community
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ globals.css
│  ├─ grammar
│  │  └─ page.tsx
│  ├─ kurser
│  │  └─ [kursusId]
│  │     └─ [fagId]
│  │        └─ [emneId]
│  │           └─ page.tsx
│  ├─ layout.tsx
│  ├─ learn
│  │  └─ vocabulary
│  │     └─ page.tsx
│  ├─ loading.tsx
│  ├─ manifest.ts
│  ├─ offline
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ page.tsx
│  ├─ performance
│  │  └─ page.tsx
│  ├─ practice
│  │  └─ quiz
│  │     └─ page.tsx
│  ├─ profile
│  │  └─ page.tsx
│  ├─ pronunciation
│  │  └─ page.tsx
│  ├─ quiz
│  │  └─ page.tsx
│  ├─ quiz-system
│  │  └─ page.tsx
│  ├─ quran
│  │  ├─ advanced-study
│  │  │  ├─ loading.tsx
│  │  │  └─ page.tsx
│  │  ├─ loading.tsx
│  │  ├─ page.tsx
│  │  └─ study
│  │     └─ [surahId]
│  │        ├─ error.tsx
│  │        ├─ loading.tsx
│  │        └─ page.tsx
│  ├─ settings
│  │  ├─ error.tsx
│  │  ├─ loading.tsx
│  │  └─ page.tsx
│  ├─ sw.ts
│  └─ vocabulary
│     └─ flashcards
│        └─ page.tsx
├─ apps
│  └─ api
│     ├─ .prettierrc
│     ├─ README.md
│     ├─ dist
│     │  ├─ app.controller.d.ts
│     │  ├─ app.controller.js
│     │  ├─ app.controller.js.map
│     │  ├─ app.module.d.ts
│     │  ├─ app.module.js
│     │  ├─ app.module.js.map
│     │  ├─ app.service.d.ts
│     │  ├─ app.service.js
│     │  ├─ app.service.js.map
│     │  ├─ main.d.ts
│     │  ├─ main.js
│     │  ├─ main.js.map
│     │  └─ modules
│     │     ├─ auth
│     │     │  ├─ auth.module.d.ts
│     │     │  ├─ auth.module.js
│     │     │  ├─ auth.module.js.map
│     │     │  ├─ controllers
│     │     │  │  └─ auth
│     │     │  │     ├─ auth.controller.d.ts
│     │     │  │     ├─ auth.controller.js
│     │     │  │     └─ auth.controller.js.map
│     │     │  ├─ dtos
│     │     │  │  ├─ create-auth.dto.d.ts
│     │     │  │  ├─ create-auth.dto.js
│     │     │  │  ├─ create-auth.dto.js.map
│     │     │  │  ├─ login-auth.dto.d.ts
│     │     │  │  ├─ login-auth.dto.js
│     │     │  │  └─ login-auth.dto.js.map
│     │     │  └─ services
│     │     │     └─ auth
│     │     │        ├─ auth.service.d.ts
│     │     │        ├─ auth.service.js
│     │     │        └─ auth.service.js.map
│     │     └─ prisma
│     │        ├─ prisma.module.d.ts
│     │        ├─ prisma.module.js
│     │        ├─ prisma.module.js.map
│     │        ├─ prisma.service.d.ts
│     │        ├─ prisma.service.js
│     │        └─ prisma.service.js.map
│     ├─ eslint.config.mjs
│     ├─ generated
│     │  └─ prisma
│     │     ├─ client.d.ts
│     │     ├─ client.js
│     │     ├─ default.d.ts
│     │     ├─ default.js
│     │     ├─ edge.d.ts
│     │     ├─ edge.js
│     │     ├─ index-browser.js
│     │     ├─ index.d.ts
│     │     ├─ index.js
│     │     ├─ libquery_engine-darwin-arm64.dylib.node
│     │     ├─ package.json
│     │     ├─ runtime
│     │     │  ├─ edge-esm.js
│     │     │  ├─ edge.js
│     │     │  ├─ index-browser.d.ts
│     │     │  ├─ index-browser.js
│     │     │  ├─ library.d.ts
│     │     │  ├─ library.js
│     │     │  ├─ react-native.js
│     │     │  └─ wasm.js
│     │     ├─ schema.prisma
│     │     ├─ wasm.d.ts
│     │     └─ wasm.js
│     ├─ nest-cli.json
│     ├─ package.json
│     ├─ prisma
│     │  ├─ dev.db
│     │  ├─ dev.db-journal
│     │  ├─ migrations
│     │  │  ├─ 20250525050949_init_core_entities
│     │  │  │  └─ migration.sql
│     │  │  └─ migration_lock.toml
│     │  └─ schema.prisma
│     ├─ src
│     │  ├─ app.controller.spec.ts
│     │  ├─ app.controller.ts
│     │  ├─ app.module.ts
│     │  ├─ app.service.ts
│     │  ├─ main.ts
│     │  └─ modules
│     │     ├─ auth
│     │     │  ├─ auth.module.ts
│     │     │  ├─ controllers
│     │     │  │  └─ auth
│     │     │  │     ├─ auth.controller.spec.ts
│     │     │  │     └─ auth.controller.ts
│     │     │  ├─ dtos
│     │     │  │  ├─ create-auth.dto.ts
│     │     │  │  └─ login-auth.dto.ts
│     │     │  └─ services
│     │     │     └─ auth
│     │     │        ├─ auth.service.spec.ts
│     │     │        └─ auth.service.ts
│     │     └─ prisma
│     │        ├─ prisma.module.ts
│     │        └─ prisma.service.ts
│     ├─ test
│     │  ├─ app.e2e-spec.ts
│     │  └─ jest-e2e.json
│     ├─ tsconfig.build.json
│     └─ tsconfig.json
├─ components
│  ├─ admin-analytics-chart.tsx
│  ├─ admin-error-heatmap.tsx
│  ├─ ai-explain-overlay.tsx
│  ├─ ai-insight-card.tsx
│  ├─ command-menu.tsx
│  ├─ comparative-study-section.test.tsx
│  ├─ comparative-study-section.tsx
│  ├─ course-card.tsx
│  ├─ flashcard-stats.tsx
│  ├─ glassmorphism-header.tsx
│  ├─ level-progress-ring.tsx
│  ├─ main-nav.tsx
│  ├─ notification-popup.tsx
│  ├─ performance
│  │  ├─ code-splitting-example.tsx
│  │  ├─ lazy-loaded-component.tsx
│  │  ├─ optimized-image.tsx
│  │  ├─ performance-metrics.tsx
│  │  └─ resource-monitor.tsx
│  ├─ progress-ring.tsx
│  ├─ progress.tsx
│  ├─ quran-word-analysis.tsx
│  ├─ recent-activity-card.tsx
│  ├─ tafsir-section.test.tsx
│  ├─ tafsir-section.tsx
│  ├─ thematic-exploration-section.test.tsx
│  ├─ thematic-exploration-section.tsx
│  ├─ theme-provider.tsx
│  ├─ topic-discussion-thread.tsx
│  ├─ ui
│  │  ├─ accordion.tsx
│  │  ├─ alert-dialog.tsx
│  │  ├─ alert.tsx
│  │  ├─ aspect-ratio.tsx
│  │  ├─ avatar.tsx
│  │  ├─ badge.tsx
│  │  ├─ breadcrumb.tsx
│  │  ├─ button.tsx
│  │  ├─ calendar.tsx
│  │  ├─ card.tsx
│  │  ├─ carousel.tsx
│  │  ├─ chart.tsx
│  │  ├─ checkbox.tsx
│  │  ├─ collapsible.tsx
│  │  ├─ command.tsx
│  │  ├─ context-menu.tsx
│  │  ├─ dialog.tsx
│  │  ├─ drawer.tsx
│  │  ├─ dropdown-menu.tsx
│  │  ├─ form.tsx
│  │  ├─ hover-card.tsx
│  │  ├─ input-otp.tsx
│  │  ├─ input.tsx
│  │  ├─ label.tsx
│  │  ├─ menubar.tsx
│  │  ├─ navigation-menu.tsx
│  │  ├─ pagination.tsx
│  │  ├─ popover.tsx
│  │  ├─ progress.tsx
│  │  ├─ radio-group.tsx
│  │  ├─ resizable.tsx
│  │  ├─ scroll-area.tsx
│  │  ├─ select.tsx
│  │  ├─ separator.tsx
│  │  ├─ sheet.tsx
│  │  ├─ sidebar.tsx
│  │  ├─ skeleton.tsx
│  │  ├─ slider.tsx
│  │  ├─ sonner.tsx
│  │  ├─ switch.tsx
│  │  ├─ table.tsx
│  │  ├─ tabs.tsx
│  │  ├─ textarea.tsx
│  │  ├─ toast.tsx
│  │  ├─ toaster.tsx
│  │  ├─ toggle-group.tsx
│  │  ├─ toggle.tsx
│  │  ├─ tooltip.tsx
│  │  ├─ use-mobile.tsx
│  │  └─ use-toast.ts
│  └─ user-nav.tsx
├─ components.json
├─ fejl.txt
├─ guidelines.md
├─ hooks
│  ├─ use-mobile.tsx
│  ├─ use-performance.ts
│  └─ use-toast.ts
├─ lib
│  ├─ offline-storage.ts
│  ├─ performance-monitoring.ts
│  └─ utils.ts
├─ next.config.mjs
├─ overblik.txt
├─ package.json
├─ pnpm-lock.yaml
├─ pnpm-workspace.yaml
├─ postcss.config.mjs
├─ public
│  ├─ fonts
│  │  ├─ ScheherazadeNew-Bold.ttf
│  │  └─ ScheherazadeNew-Regular.ttf
│  ├─ placeholder-logo.png
│  ├─ placeholder-logo.svg
│  ├─ placeholder-user.jpg
│  ├─ placeholder.jpg
│  └─ placeholder.svg
├─ repomix-output.xml
├─ stackinfo.txt
├─ styles
│  └─ globals.css
├─ tailwind.config.js
└─ tsconfig.json

```
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}", // Scanner alle relevante filer i app mappen
    "./components/**/*.{js,ts,jsx,tsx,mdx}", // Scanner alle relevante filer i components mappen
    // Fjernet "./pages/**/*.{ts,tsx}" da projektet primært bruger App Router
    // Fjernet "./src/**/*.{ts,tsx}" da der ikke er en src mappe i den viste struktur
    // Fjernet "*.{js,ts,jsx,tsx,mdx}" fra roden for at være mere specifik
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" }, // Sørg for at værdier er strenge
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" }, // Sørg for at værdier er strenge
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
      fontFamily: {
        sans: ["var(--font-sans)", "sans-serif"], // Tilføj --font-sans her, hvis Inter skal være standard sans-serif
        arabic: ["var(--font-arabic)", "sans-serif"],
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="apps/api/prisma/schema.prisma">
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// --- Core Entities ---

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessons   Lesson[]
  quizzes   Quiz[]
  settings  Settings?
  progress  Progress[]
  flashcards Flashcard[]
  pronunciations Pronunciation[]
}

model Word {
  id        Int      @id @default(autoincrement())
  arabic    String
  root      String?
  meaning   String
  verseId   Int?
  verse     Verse?   @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verse {
  id        Int      @id @default(autoincrement())
  surah     Int
  ayah      Int
  text      String
  words     Word[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  quizzes   Quiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        Int      @id @default(autoincrement())
  title     String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  front     String
  back      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  stats     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grammar {
  id        Int      @id @default(autoincrement())
  rule      String
  example   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pronunciation {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  audioUrl  String
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Progress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  preferences Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
</file>

<file path="apps/api/package.json">
{
  "name": "api",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^11.1.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@nestjs/serve-static": "^5.0.3",
    "@nestjs/swagger": "^11.2.0",
    "@prisma/client": "^6.8.2",
    "bcrypt": "^6.0.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "nest-winston": "^1.10.2",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1",
    "swagger-ui-express": "^5.0.1",
    "winston": "^3.17.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@swc/cli": "^0.6.0",
    "@swc/core": "^1.10.7",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.7",
    "@types/supertest": "^6.0.2",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^15.14.0",
    "jest": "^29.7.0",
    "prettier": "^3.4.2",
    "prisma": "^6.8.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node"
  }
}
</file>

<file path="api_udviklingsplan.md">
# Flerfaset Udviklingsplan for Quranic Arabic Trainer API

> **Statusoversigt (maj 2024):**
>
> **Fuldt implementerede moduler:**
> - AuthModule (JWT-baseret auth, login/register endpoints)
> - WordsModule (CRUD, validering, Swagger, Prisma)
> - VerseModule (CRUD, validering, Swagger, Prisma)
> - LessonModule (CRUD, progression, Swagger, Prisma)
> - PrismaModule (Global database service provider)
>
> **Delvist implementerede moduler:**
> - QuizModule (Grundlæggende struktur, mangler fuld CRUD implementation)
>
> **Tomme moduler (kun struktur oprettet, ingen CRUD, controller, service eller DTOs):**
> - FlashcardModule
> - GrammarModule
> - PronunciationModule
> - ProgressModule
> - SettingsModule
>
> **Mangler:**
> - UserModule (CRUD, profil, indstillinger)
>
> **Frontend:**
> - Sider for flere moduler findes, men integration og UI/UX optimering mangler for nye features.
>
> **Test & Deployment:**
> - Testning påbegyndt, men ikke komplet. CI/CD og deployment mangler.
>
> **Dokumentation:**
> - Swagger delvist opsat. Øvrig dokumentation og vedligehold mangler.
>
> **Næste skridt (prioriteret):**
> 1. Implementér CRUD, DTOs og endpoints for Flashcard, Grammar, Pronunciation, Progress, Settings
> 2. Implementér manglende backend-modul for User
> 3. Udvid frontend med sider og integration for de nye moduler
> 4. Implementér AI-feedback og adaptiv progression
> 5. Forbedr testdækning og optimer performance
> 6. Opsæt CI/CD og deployment
> 7. Færdiggør dokumentation og brugervejledninger

Dette dokument beskriver en detaljeret, flerfaset plan for udviklingen af REST API'en til Quranic Arabic Trainer platformen. Planen tager udgangspunkt i den specificerede monorepo-struktur med NestJS, Prisma og PostgreSQL.

**Vigtigt:** Konsulter altid `stackinfo.txt` og `guidelines.md` (hvis de findes i projektet) for specifikke konfigurationer og retningslinjer.

## Fase 1: Projektopsætning & Fundament

Mål: At etablere en solid base for API'en, inklusiv projektstruktur, databaseintegration og grundlæggende autentifikation.

1.  **Initialiser NestJS Projekt i `apps/api`:**
    *   Sæt NestJS op indenfor `apps/api` workspace.
    *   Konfigurer grundlæggende projektstruktur (modules, controllers, services).
2.  **Integrer Prisma & PostgreSQL:**
    *   Tilføj Prisma til NestJS-projektet.
    *   Definer forbindelsen til PostgreSQL-databasen.
    *   Opret den indledende `schema.prisma` fil.
3.  **Grundlæggende Konfiguration:**
    *   Opsæt håndtering af miljøvariabler (f.eks. med `@nestjs/config`).
    *   Implementer et robust logningssystem (f.eks. Winston eller NestJS's indbyggede Logger).
4.  **Definer Kerne-Entiteter/Modeller (Eksempler):**
    *   Begynd at definere de centrale datamodeller i `schema.prisma`. Dette kan inkludere:
        *   `User` (brugeroplysninger, roller)
        *   `Word` (arabiske ord, oversættelser, rod, etc.)
        *   `Verse` (Koranvers, surah-reference, tekst)
        *   `Lesson` (lektioner for forskellige emner)
        *   `Quiz` (quizzer, spørgsmål, svarmuligheder)
    *   Kør `npx prisma migrate dev --name init` for at oprette den første migration.
5.  **Implementer Grundlæggende Autentifikation & Autorisation:**
    *   Opsæt JWT (JSON Web Tokens) for brugerautentifikation.
    *   Implementer `AuthModule` med login- og registrerings-endpoints.
    *   Opsæt guards for at beskytte routes.
    *   Definer grundlæggende roller og tilladelser.

## Fase 2: Udvikling af Kerne-Feature Moduler

Mål: At implementere CRUD-funktionalitet og forretningslogik for de primære ressourcer i applikationen.

### Statusoversigt
- [x] WordsModule: CRUD, DTOs, validering, Swagger, Prisma integration (færdig)
  - Modul, controller, service, DTOs oprettet
  - CRUD-endpoints og validering implementeret
  - Swagger-dokumentation tilføjet
  - Prisma integration via PrismaService
- [x] VerseModule: CRUD, DTOs, validering, Swagger, Prisma integration (færdig)
  - Modul, controller, service, DTOs oprettet
  - CRUD-endpoints og validering implementeret
  - Swagger-dokumentation tilføjet
  - Prisma integration via PrismaService
  - **LessonModule (Færdig):**
    - Oprettelse af modul, controller, service, DTOs
    - Implementering af CRUD-endpoints i service og controller
    - Tilføjelse af Swagger-dokumentation til endpoints
    - Korrekt DTO-import og Prisma-integration
- **QuizModule (Færdig):**
    - Modul, controller, service oprettet (eksisterede delvist), DTOs oprettet
    - Implementering af CRUD-endpoints i service (eksisterede delvist)
    - Implementering af CRUD-endpoints i controller (opdateret)
    - Tilføjelse af Swagger-dokumentation til endpoints (opdateret)
    - Korrekt DTO-import og Prisma-integration (opdateret/bekræftet)
    - Tilføjet eksplicitte returtyper i service og controller
  - Implementer CRUD-endpoints og validering
  - Tilføj Swagger-dokumentation
  - Integrer med Prisma via PrismaService

For hver nøgleressource (f.eks. `users`, `words`, `verses`, `lessons`, `quizzes`, `flashcards`, `grammar-rules`, `alphabet-lessons`, `pronunciation-guides`, `progress`, `settings`):

1.  **Definer Prisma Schema for Ressource:**
    *   Tilføj/opdater modellen for ressourcen i `apps/api/prisma/schema.prisma`.
    *   Definer relationer til andre modeller.
    *   Kør `npx prisma migrate dev --name add-<resource>-model`.
    *   Kør `npx prisma generate` for at opdatere Prisma Client.
2.  **Opret NestJS Modul:**
    *   Generer et nyt modul: `nest g module modules/<resource>`.
    *   Struktur: `apps/api/src/modules/<resource>/`
3.  **Opret Data Transfer Objects (DTOs):**
    *   Opret DTOs for at validere indgående data:
        *   `apps/api/src/modules/<resource>/dtos/create-<resource>.dto.ts`
        *   `apps/api/src/modules/<resource>/dtos/update-<resource>.dto.ts`
        *   Brug `class-validator` og `class-transformer` for validering.
4.  **Opret Entitet (hvis nødvendigt udover Prisma-modellen):**
    *   Normalt vil Prisma-modellen fungere som entiteten. Hvis der er behov for yderligere logik eller transformationer, kan en separat entitetsfil overvejes:
        *   `apps/api/src/modules/<resource>/entities/<resource>.entity.ts`
5.  **Opret Service:**
    *   Generer en service: `nest g service modules/<resource>/services/<resource>` (juster sti efter behov).
    *   Implementer CRUD-operationer (Create, Read, Update, Delete) og anden forretningslogik for ressourcen.
    *   Interager med Prisma Client for databaseadgang.
    *   Fil: `apps/api/src/modules/<resource>/services/<resource>.service.ts`
6.  **Opret Controller:**
    *   Generer en controller: `nest g controller modules/<resource>/controllers/<resource>` (juster sti efter behov).
    *   Definer HTTP-endpoints (GET all, GET by id, POST, PUT, DELETE) med passende ruter (`/api/<resource>`).
    *   Brug DTOs til request body validering.
    *   Integrer Swagger-dekorationer (`@ApiTags('<ResourceName>')`, `@ApiOperation()`, `@ApiResponse()`, `@ApiBody()`, `@ApiParam()`).
    *   Fil: `apps/api/src/modules/<resource>/controllers/<resource>.controller.ts`
7.  **Opdater `AppModule`:**
    *   Importer det nye `<ResourceModule>` i `apps/api/src/app.module.ts`.
8.  **Skriv Tests:**
    *   Opret en testfil: `apps/api/test/<resource>.spec.ts`.
    *   Skriv unit tests for servicen og controlleren.
    *   Brug Jest og Supertest til integrationstests af endpoints.
9.  **Byg og Test Workspacet:**
    *   Kør `yarn workspace api build`.
    *   Kør `yarn workspace api test`.

## Fase 3: Avancerede Features & AI Integration

Mål: At implementere mere kompleks funktionalitet og integrere AI-drevne features.

1.  **Brugerprogression og Sporing:**
    *   Design og implementer systemer til at spore brugerens fremskridt gennem lektioner, quizzer, etc.
    *   Gem data relateret til gennemførte øvelser, score, og mestringsniveauer.
2.  **Quiz Generering og Scoring:**
    *   Udvikl logik for dynamisk generering af quizzer baseret på brugerens niveau og tidligere præstationer.
    *   Implementer avanceret scoring og feedback-mekanismer.
3.  **AI Integration (Eksempler):**
    *   **Feedback på Udtale:** Integrer med en service (eller et custom model) for at analysere brugerens udtale og give feedback.
    *   **Grammatisk Analyse:** Udvikl eller integrer værktøjer til at give feedback på grammatiske øvelser.
    *   **Personaliserede Læringsstier:** Brug AI til at foreslå næste skridt i læringsforløbet baseret på brugerdata.
    *   Overvej oprettelse af et dedikeret `AIModule`.
4.  **Community Features (hvis relevant):**
    *   Implementer funktionalitet for brugerinteraktion, f.eks. fora, deling af fremskridt, studiegrupper.
5.  **Admin Panel Funktionaliteter:**
    *   Udvikl endpoints til administration af brugere, indhold, quizzer, etc.
    *   Implementer dashboards for at overvåge systemets brug og performance.

## Fase 4: Frontend Integration

Mål: At sikre problemfri kommunikation mellem Next.js frontend (`apps/web`) og NestJS backend (`apps/api`).

1.  **Definer API Kontrakter/Typer:**
    *   Overvej at bruge et værktøj som OpenAPI generator eller dele TypeScript-typer mellem frontend og backend for at sikre konsistens.
2.  **Implementer API Kald fra Frontend:**
    *   Brug f.eks. `fetch` eller et bibliotek som `axios` eller `SWR`/`React Query` i Next.js applikationen til at interagere med API-endpoints.
3.  **Håndter Autentifikation og Autorisation på Frontend:**
    *   Implementer login/logout flow.
    *   Gem og håndter JWT tokens sikkert.
    *   Beskyt frontend-ruter og vis/skjul UI-elementer baseret på brugerens rolle og tilladelser.
4.  **Opdater UI Komponenter:**
    *   Forbind UI-komponenter til de nye backend-data.
    *   Implementer loading states, error handling, og data-display.

## Fase 5: Testning, Optimering & Deployment

Mål: At sikre API'ens kvalitet, performance og sikkerhed, samt forberede til produktion.

1.  **Omfattende End-to-End Testning:**
    *   Skriv E2E tests der simulerer reelle brugerflows gennem både frontend og backend.
2.  **Performance Optimering:**
    *   Analyser og optimer databaseforespørgsler (Prisma query optimization).
    *   Implementer caching-strategier (f.eks. med Redis) hvor relevant.
    *   Load test API'en for at identificere flaskehalse.
3.  **Sikkerhedsgennemgang og Hærdning:**
    *   Gennemgå for almindelige sårbarheder (OWASP Top 10).
    *   Implementer rate limiting, input sanitisering, og andre sikkerhedsforanstaltninger.
    *   Sørg for korrekt håndtering af følsomme data.
4.  **Opsæt CI/CD Pipelines:**
    *   Automatiser build, test, og deployment processer (f.eks. med GitHub Actions, GitLab CI, Jenkins).
5.  **Deployment:**
    *   Vælg en hosting platform (f.eks. Vercel for Next.js, Heroku/AWS/Google Cloud for NestJS API og PostgreSQL).
    *   Konfigurer produktionsmiljøer.
6.  **Monitorering og Logging i Produktion:**
    *   Opsæt værktøjer til at overvåge API'ens performance, oppetid og fejl (f.eks. Sentry, New Relic, Datadog).

## Fase 6: Dokumentation & Vedligeholdelse

Mål: At sikre langsigtet succes og vedligeholdelse af API'en.

1.  **Finaliser API Dokumentation:**
    *   Sørg for at Swagger/OpenAPI dokumentationen er komplet og opdateret.
    *   Generer eventuelt en statisk HTML-version af dokumentationen.
2.  **Opret Bruger- og Udviklerdokumentation:**
    *   Skriv guides til hvordan API'en bruges (for frontend-udviklere eller tredjeparter).
    *   Dokumenter arkitektur, designvalg, og komplekse dele af koden.
3.  **Etabler Vedligeholdelsesplan:**
    *   Planlæg regelmæssige opdateringer af afhængigheder.
    *   Definer en proces for håndtering af fejlrapporter og feature requests.

Denne plan er et levende dokument og kan justeres undervejs som projektet skrider frem og nye indsigter opnås.
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@prisma/client": "^6.8.2",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "1.1.4",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "latest",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "1.2.2",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "1.1.1",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "^0.4.4",
    "prisma": "^6.8.2",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "latest",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "web-vitals": "latest",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^29.5.14",
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "jest": "^29.7.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  },
  "packageManager": "pnpm@10.11.0+sha512.6540583f41cc5f628eb3d9773ecee802f4f9ef9923cc45b69890fb47991d4b092964694ec3a4f738a420c918a333062c8b925d312f42e4f0c263eb603551f977"
}
</file>

</files>
