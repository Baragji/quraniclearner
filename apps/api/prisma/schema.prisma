// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// --- Core Entities ---

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessons   Lesson[]
  quizzes   Quiz[]
  settings  Settings?
  progress  Progress[]
  flashcards Flashcard[]
  pronunciations Pronunciation[]
}

model Word {
  id        Int      @id @default(autoincrement())
  arabic    String
  root      String?
  meaning   String
  verseId   Int?
  verse     Verse?   @relation(fields: [verseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Verse {
  id        Int      @id @default(autoincrement())
  surah     Int
  ayah      Int
  text      String
  words     Word[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  quizzes   Quiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id        Int      @id @default(autoincrement())
  title     String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  front     String
  back      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  stats     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grammar {
  id        Int      @id @default(autoincrement())
  rule      String
  example   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pronunciation {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  audioUrl  String
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Progress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  preferences Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
